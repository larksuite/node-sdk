import identity from "lodash.identity";
import pickBy from "lodash.pickby";
import fs from "fs";
import { fillApiPath } from "@node-sdk/utils";
import { Logger } from "@node-sdk/typings";
import { formatErrors } from "@node-sdk/client/utils";
import { IRequestOptions } from "@node-sdk/code-gen/types";
import { IPayload } from "@node-sdk/client/types";
import { HttpInstance } from "@node-sdk/typings/http";
import { Readable } from "stream";
import { stringify } from "qs";
import contract from "./contract";

// auto gen
export default abstract class Client extends contract {
    declare tokenManager;

    declare domain;

    declare logger: Logger;

    declare httpInstance: HttpInstance;

    abstract formatPayload(
        // eslint-disable-next-line no-unused-vars
        payload?: IPayload,
        // eslint-disable-next-line no-unused-vars
        options?: IRequestOptions
    ): Promise<Required<IPayload>>;

    /**
     * CoreHR
     */
    corehr = {
        /**
         * assigned_user
         */
        assignedUser: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=assigned_user&apiName=search&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/assigned_user/search document }
             *
             * 获取组织类角色授权列表
             *
             * 查询组织类角色的授权信息
             */
            search: async (
                payload?: {
                    data: {
                        role_id: string;
                        management_scope_list: Array<{
                            management_dimension: string;
                            obj_id: string;
                        }>;
                        search_method: string;
                        page_token?: string;
                        page_size: string;
                    };
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    employment_id: string;
                                    management_scope_list?: Array<{
                                        management_dimension: string;
                                        obj_id: string;
                                    }>;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/assigned_users/search`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * authorization
         */
        authorization: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=authorization&apiName=add_role_assign&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=add_role_assign&project=corehr&resource=authorization&version=v1 document }
             *
             * 追加更新组织类授权
             */
            addRoleAssign: async (
                payload?: {
                    data: {
                        assigned_organization_items: Array<
                            Array<{
                                org_key: string;
                                org_ids?: Array<string>;
                                org_codes?: Array<string>;
                            }>
                        >;
                    };
                    params: {
                        employment_id: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                        role_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { assign_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/authorizations/add_role_assign`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=authorization&apiName=get_by_param&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get_by_param&project=corehr&resource=authorization&version=v1 document }
             *
             * 根据ID查询单个用户授权
             */
            getByParam: async (
                payload?: {
                    params: {
                        employment_id: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                role_authorization?: {
                                    employment_id: string;
                                    permission_detail_list: Array<{
                                        role?: {
                                            id: string;
                                            code: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            description?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            org_truncation?: Array<{
                                                org_key?: string;
                                                type?: number;
                                                depth?: number;
                                            }>;
                                        };
                                        assigned_organization_list?: Array<
                                            Array<{
                                                org_key: string;
                                                org_name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                org_id_list: Array<string>;
                                            }>
                                        >;
                                        grantor_rule_list?: Array<{
                                            rule_dimension?: {
                                                entity_key?: string;
                                                entity_name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                            };
                                            rule_type?: number;
                                            expression?: {
                                                conditions?: Array<{
                                                    left?: {
                                                        type?: number;
                                                        value?: string;
                                                        lookup_value?: string;
                                                        lookup_type?: string;
                                                    };
                                                    right?: {
                                                        type?: number;
                                                        value?: string;
                                                        lookup_value?: string;
                                                        lookup_type?: string;
                                                    };
                                                    operator?: number;
                                                    right_value_type?: number;
                                                }>;
                                                expression?: string;
                                            };
                                        }>;
                                        update_time?: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/authorizations/get_by_param`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=authorization&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query&project=corehr&resource=authorization&version=v1 document }
             *
             * 批量查询用户授权
             */
            query: async (
                payload?: {
                    params?: {
                        employment_id_list?: Array<string>;
                        role_id_list?: Array<string>;
                        page_token?: string;
                        page_size?: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                        updated_at_gte?: string;
                        updated_at_lte?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    employment_id: string;
                                    permission_detail_list: Array<{
                                        role?: {
                                            id: string;
                                            code: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            active_status: number;
                                            description?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            group_type: number;
                                            created_by: string;
                                            update_time: string;
                                            org_truncation?: Array<{
                                                org_key?: string;
                                                type?: number;
                                                depth?: number;
                                            }>;
                                        };
                                        assigned_organization_list?: Array<
                                            Array<{
                                                org_key: string;
                                                org_name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                org_id_list: Array<string>;
                                            }>
                                        >;
                                        grantor_rule_list?: Array<{
                                            rule_dimension?: {
                                                entity_key?: string;
                                                entity_name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                            };
                                            rule_type?: number;
                                            expression?: {
                                                conditions?: Array<{
                                                    left?: {
                                                        type?: number;
                                                        value?: string;
                                                        lookup_value?: string;
                                                        lookup_type?: string;
                                                    };
                                                    right?: {
                                                        type?: number;
                                                        value?: string;
                                                        lookup_value?: string;
                                                        lookup_type?: string;
                                                    };
                                                    operator?: number;
                                                    right_value_type?: number;
                                                }>;
                                                expression?: string;
                                            };
                                        }>;
                                        update_time?: string;
                                    }>;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/authorizations/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=authorization&apiName=remove_role_assign&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=remove_role_assign&project=corehr&resource=authorization&version=v1 document }
             *
             * 删除组织类授权
             */
            removeRoleAssign: async (
                payload?: {
                    params: {
                        employment_id: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                        role_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { assign_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/authorizations/remove_role_assign`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=authorization&apiName=update_role_assign&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=update_role_assign&project=corehr&resource=authorization&version=v1 document }
             *
             * 覆盖更新组织类授权
             */
            updateRoleAssign: async (
                payload?: {
                    data: {
                        assigned_organization_items: Array<
                            Array<{
                                org_key: string;
                                org_ids?: Array<string>;
                                org_codes?: Array<string>;
                            }>
                        >;
                    };
                    params: {
                        employment_id: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                        role_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { assign_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/authorizations/update_role_assign`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * common_data.id
         */
        commonDataId: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=common_data.id&apiName=convert&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=convert&project=corehr&resource=common_data.id&version=v1 document }
             */
            convert: async (
                payload?: {
                    data: { ids: Array<string> };
                    params: {
                        id_transform_type: number;
                        id_type:
                            | "user_id"
                            | "department_id"
                            | "job_level_id"
                            | "job_family_id"
                            | "employee_type_id";
                        feishu_user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id";
                        feishu_department_id_type?:
                            | "open_department_id"
                            | "department_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    target_id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/common_data/id/convert`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * common_data.meta_data
         */
        commonDataMetaData: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=common_data.meta_data&apiName=add_enum_option&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=add_enum_option&project=corehr&resource=common_data.meta_data&version=v1 document }
             */
            addEnumOption: async (
                payload?: {
                    data: {
                        object_api_name: string;
                        enum_field_api_name: string;
                        enum_field_options: Array<{
                            option_api_name: string;
                            name: { zh_cn?: string; en_us?: string };
                        }>;
                    };
                    params?: { client_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                enum_field_api_name?: string;
                                enum_field_options?: Array<{
                                    option_api_name: string;
                                    active?: boolean;
                                    name: { zh_cn?: string; en_us?: string };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/common_data/meta_data/add_enum_option`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=common_data.meta_data&apiName=edit_enum_option&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=edit_enum_option&project=corehr&resource=common_data.meta_data&version=v1 document }
             */
            editEnumOption: async (
                payload?: {
                    data: {
                        object_api_name: string;
                        enum_field_api_name: string;
                        enum_field_option: {
                            option_api_name: string;
                            active: boolean;
                            name: { zh_cn?: string; en_us?: string };
                        };
                    };
                    params?: { client_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                enum_field_api_name?: string;
                                enum_field_options?: Array<{
                                    option_api_name: string;
                                    active?: boolean;
                                    name: { zh_cn?: string; en_us?: string };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/common_data/meta_data/edit_enum_option`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 公司
         */
        company: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=company&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/create document }
             *
             * 创建公司
             *
             * 创建公司
             */
            create: async (
                payload?: {
                    data: {
                        hiberarchy_common: {
                            parent_id?: string;
                            name: Array<{ lang: string; value: string }>;
                            type?: { enum_name: string };
                            active: boolean;
                            effective_time?: string;
                            expiration_time?: string;
                            code?: string;
                            description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        };
                        type?: { enum_name: string };
                        industry_list?: Array<{ enum_name: string }>;
                        legal_representative?: Array<{
                            lang: string;
                            value: string;
                        }>;
                        post_code?: string;
                        tax_payer_id?: string;
                        confidential?: boolean;
                        sub_type_list?: Array<{ enum_name: string }>;
                        branch_company?: boolean;
                        primary_manager?: Array<{
                            lang: string;
                            value: string;
                        }>;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                        currency?: {
                            currency_name?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            numeric_code?: number;
                            currency_alpha_3_code?: string;
                        };
                        phone?: {
                            area_code: { enum_name: string };
                            phone_number: string;
                        };
                        fax?: {
                            area_code: { enum_name: string };
                            phone_number: string;
                        };
                        registered_office_address_info?: {
                            country_region_id: string;
                            region_id?: string;
                            city_id?: string;
                            distinct_id?: string;
                            address_line1?: string;
                            address_line2?: string;
                            address_line3?: string;
                            address_line4?: string;
                            address_line5?: string;
                            address_line6?: string;
                            address_line7?: string;
                            address_line8?: string;
                            address_line9?: string;
                            local_address_line1?: string;
                            local_address_line2?: string;
                            local_address_line3?: string;
                            local_address_line4?: string;
                            local_address_line5?: string;
                            local_address_line6?: string;
                            local_address_line7?: string;
                            local_address_line8?: string;
                            local_address_line9?: string;
                            postal_code?: string;
                        };
                        office_address_info?: {
                            country_region_id: string;
                            region_id?: string;
                            city_id?: string;
                            distinct_id?: string;
                            address_line1?: string;
                            address_line2?: string;
                            address_line3?: string;
                            address_line4?: string;
                            address_line5?: string;
                            address_line6?: string;
                            address_line7?: string;
                            address_line8?: string;
                            address_line9?: string;
                            local_address_line1?: string;
                            local_address_line2?: string;
                            local_address_line3?: string;
                            local_address_line4?: string;
                            local_address_line5?: string;
                            local_address_line6?: string;
                            local_address_line7?: string;
                            local_address_line8?: string;
                            local_address_line9?: string;
                            postal_code?: string;
                        };
                    };
                    params?: { client_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                company?: {
                                    id?: string;
                                    hiberarchy_common: {
                                        parent_id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        active: boolean;
                                        effective_time?: string;
                                        expiration_time?: string;
                                        code?: string;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        tree_order?: string;
                                        list_order?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                    type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    industry_list?: Array<{
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    }>;
                                    legal_representative?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    post_code?: string;
                                    tax_payer_id?: string;
                                    confidential?: boolean;
                                    sub_type_list?: Array<{
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    }>;
                                    branch_company?: boolean;
                                    primary_manager?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    currency?: {
                                        id?: string;
                                        country_region_id?: string;
                                        currency_name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        numeric_code?: number;
                                        currency_alpha_3_code?: string;
                                    };
                                    phone?: {
                                        area_code: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_number: string;
                                    };
                                    fax?: {
                                        area_code: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_number: string;
                                    };
                                    registered_office_address?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    office_address?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    registered_office_address_info?: {
                                        country_region_id: string;
                                        region_id?: string;
                                        city_id?: string;
                                        distinct_id?: string;
                                        address_line1?: string;
                                        address_line2?: string;
                                        address_line3?: string;
                                        address_line4?: string;
                                        address_line5?: string;
                                        address_line6?: string;
                                        address_line7?: string;
                                        address_line8?: string;
                                        address_line9?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                    };
                                    office_address_info?: {
                                        country_region_id: string;
                                        region_id?: string;
                                        city_id?: string;
                                        distinct_id?: string;
                                        address_line1?: string;
                                        address_line2?: string;
                                        address_line3?: string;
                                        address_line4?: string;
                                        address_line5?: string;
                                        address_line6?: string;
                                        address_line7?: string;
                                        address_line8?: string;
                                        address_line9?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/companies`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=company&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/delete document }
             *
             * 删除公司
             *
             * 删除公司
             */
            delete: async (
                payload?: {
                    path: { company_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/companies/:company_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=company&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/get document }
             *
             * 查询单个公司
             *
             * 根据 ID 查询单个公司
             */
            get: async (
                payload?: {
                    path: { company_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                company?: {
                                    id?: string;
                                    hiberarchy_common: {
                                        parent_id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        active: boolean;
                                        effective_time?: string;
                                        expiration_time?: string;
                                        code?: string;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        tree_order?: string;
                                        list_order?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                    type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    industry_list?: Array<{
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    }>;
                                    legal_representative?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    post_code?: string;
                                    tax_payer_id?: string;
                                    confidential?: boolean;
                                    sub_type_list?: Array<{
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    }>;
                                    branch_company?: boolean;
                                    primary_manager?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    currency?: {
                                        id?: string;
                                        country_region_id?: string;
                                        currency_name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        numeric_code?: number;
                                        currency_alpha_3_code?: string;
                                    };
                                    phone?: {
                                        area_code: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_number: string;
                                    };
                                    fax?: {
                                        area_code: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_number: string;
                                    };
                                    registered_office_address?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    office_address?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    registered_office_address_info?: {
                                        full_address_local_script?: string;
                                        full_address_western_script?: string;
                                        id?: string;
                                        country_region_id: string;
                                        region_id?: string;
                                        city_id?: string;
                                        distinct_id?: string;
                                        address_line1?: string;
                                        address_line2?: string;
                                        address_line3?: string;
                                        address_line4?: string;
                                        address_line5?: string;
                                        address_line6?: string;
                                        address_line7?: string;
                                        address_line8?: string;
                                        address_line9?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                        address_type_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        is_primary?: boolean;
                                        is_public?: boolean;
                                    };
                                    office_address_info?: {
                                        full_address_local_script?: string;
                                        full_address_western_script?: string;
                                        id?: string;
                                        country_region_id: string;
                                        region_id?: string;
                                        city_id?: string;
                                        distinct_id?: string;
                                        address_line1?: string;
                                        address_line2?: string;
                                        address_line3?: string;
                                        address_line4?: string;
                                        address_line5?: string;
                                        address_line6?: string;
                                        address_line7?: string;
                                        address_line8?: string;
                                        address_line9?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                        address_type_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        is_primary?: boolean;
                                        is_public?: boolean;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/companies/:company_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=company&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/list document }
             *
             * 批量查询公司
             *
             * 批量查询公司
             */
            list: async (
                payload?: {
                    params: { page_token?: string; page_size: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    hiberarchy_common: {
                                        parent_id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        active: boolean;
                                        effective_time?: string;
                                        expiration_time?: string;
                                        code?: string;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        tree_order?: string;
                                        list_order?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                    type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    industry_list?: Array<{
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    }>;
                                    legal_representative?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    post_code?: string;
                                    tax_payer_id?: string;
                                    confidential?: boolean;
                                    sub_type_list?: Array<{
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    }>;
                                    branch_company?: boolean;
                                    primary_manager?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    currency?: {
                                        id?: string;
                                        country_region_id?: string;
                                        currency_name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        numeric_code?: number;
                                        currency_alpha_3_code?: string;
                                    };
                                    phone?: {
                                        area_code: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_number: string;
                                    };
                                    fax?: {
                                        area_code: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_number: string;
                                    };
                                    registered_office_address?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    office_address?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    registered_office_address_info?: {
                                        full_address_local_script?: string;
                                        full_address_western_script?: string;
                                        id?: string;
                                        country_region_id: string;
                                        region_id?: string;
                                        city_id?: string;
                                        distinct_id?: string;
                                        address_line1?: string;
                                        address_line2?: string;
                                        address_line3?: string;
                                        address_line4?: string;
                                        address_line5?: string;
                                        address_line6?: string;
                                        address_line7?: string;
                                        address_line8?: string;
                                        address_line9?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                        address_type_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        is_primary?: boolean;
                                        is_public?: boolean;
                                    };
                                    office_address_info?: {
                                        full_address_local_script?: string;
                                        full_address_western_script?: string;
                                        id?: string;
                                        country_region_id: string;
                                        region_id?: string;
                                        city_id?: string;
                                        distinct_id?: string;
                                        address_line1?: string;
                                        address_line2?: string;
                                        address_line3?: string;
                                        address_line4?: string;
                                        address_line5?: string;
                                        address_line6?: string;
                                        address_line7?: string;
                                        address_line8?: string;
                                        address_line9?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                        address_type_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        is_primary?: boolean;
                                        is_public?: boolean;
                                    };
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/companies`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=company&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=corehr&resource=company&version=v1 document }
             *
             * 更新公司数据
             */
            patch: async (
                payload?: {
                    data?: {
                        hiberarchy_common?: {
                            parent_id?: string;
                            name?: Array<{ lang: string; value: string }>;
                            type?: { enum_name: string };
                            active?: boolean;
                            effective_time: string;
                            expiration_time?: string;
                            code?: string;
                            description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        };
                        type?: { enum_name: string };
                        industry_list?: Array<{ enum_name: string }>;
                        legal_representative?: Array<{
                            lang: string;
                            value: string;
                        }>;
                        post_code?: string;
                        tax_payer_id?: string;
                        confidential?: boolean;
                        sub_type_list?: Array<{ enum_name: string }>;
                        branch_company?: boolean;
                        primary_manager?: Array<{
                            lang: string;
                            value: string;
                        }>;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                        currency?: {
                            currency_name?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            numeric_code?: number;
                            currency_alpha_3_code?: string;
                        };
                        phone?: {
                            area_code: { enum_name: string };
                            phone_number: string;
                        };
                        fax?: {
                            area_code: { enum_name: string };
                            phone_number: string;
                        };
                        registered_office_address_info?: {
                            country_region_id: string;
                            region_id?: string;
                            city_id?: string;
                            distinct_id?: string;
                            address_line1?: string;
                            address_line2?: string;
                            address_line3?: string;
                            address_line4?: string;
                            address_line5?: string;
                            address_line6?: string;
                            address_line7?: string;
                            address_line8?: string;
                            address_line9?: string;
                            local_address_line1?: string;
                            local_address_line2?: string;
                            local_address_line3?: string;
                            local_address_line4?: string;
                            local_address_line5?: string;
                            local_address_line6?: string;
                            local_address_line7?: string;
                            local_address_line8?: string;
                            local_address_line9?: string;
                            postal_code?: string;
                        };
                        office_address_info?: {
                            country_region_id: string;
                            region_id?: string;
                            city_id?: string;
                            distinct_id?: string;
                            address_line1?: string;
                            address_line2?: string;
                            address_line3?: string;
                            address_line4?: string;
                            address_line5?: string;
                            address_line6?: string;
                            address_line7?: string;
                            address_line8?: string;
                            address_line9?: string;
                            local_address_line1?: string;
                            local_address_line2?: string;
                            local_address_line3?: string;
                            local_address_line4?: string;
                            local_address_line5?: string;
                            local_address_line6?: string;
                            local_address_line7?: string;
                            local_address_line8?: string;
                            local_address_line9?: string;
                            postal_code?: string;
                        };
                    };
                    params?: { client_token?: string };
                    path: { company_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                company?: {
                                    id?: string;
                                    hiberarchy_common: {
                                        parent_id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        active: boolean;
                                        effective_time?: string;
                                        expiration_time?: string;
                                        code?: string;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        tree_order?: string;
                                        list_order?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                    type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    industry_list?: Array<{
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    }>;
                                    legal_representative?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    post_code?: string;
                                    tax_payer_id?: string;
                                    confidential?: boolean;
                                    sub_type_list?: Array<{
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    }>;
                                    branch_company?: boolean;
                                    primary_manager?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    currency?: {
                                        id?: string;
                                        country_region_id?: string;
                                        currency_name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        numeric_code?: number;
                                        currency_alpha_3_code?: string;
                                    };
                                    phone?: {
                                        area_code: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_number: string;
                                    };
                                    fax?: {
                                        area_code: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_number: string;
                                    };
                                    registered_office_address?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    office_address?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    registered_office_address_info?: {
                                        country_region_id: string;
                                        region_id?: string;
                                        city_id?: string;
                                        distinct_id?: string;
                                        address_line1?: string;
                                        address_line2?: string;
                                        address_line3?: string;
                                        address_line4?: string;
                                        address_line5?: string;
                                        address_line6?: string;
                                        address_line7?: string;
                                        address_line8?: string;
                                        address_line9?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                    };
                                    office_address_info?: {
                                        country_region_id: string;
                                        region_id?: string;
                                        city_id?: string;
                                        distinct_id?: string;
                                        address_line1?: string;
                                        address_line2?: string;
                                        address_line3?: string;
                                        address_line4?: string;
                                        address_line5?: string;
                                        address_line6?: string;
                                        address_line7?: string;
                                        address_line8?: string;
                                        address_line9?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/companies/:company_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * compensation_standard
         */
        compensationStandard: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=compensation_standard&apiName=match&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=match&project=corehr&resource=compensation_standard&version=v1 document }
             *
             * 分页查询地点数据
             */
            match: async (
                payload?: {
                    params: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id"
                            | "people_corehr_department_id";
                        employment_id?: string;
                        reference_object_api?: "cpst_item" | "cpst_indicator";
                        reference_object_id: string;
                        department_id?: string;
                        work_location_id?: string;
                        company_id?: string;
                        job_family_id?: string;
                        job_id?: string;
                        job_level_id?: string;
                        employee_type_id?: string;
                        recruitment_type?:
                            | "experienced_professionals"
                            | "recent_graduates"
                            | "routine_intern";
                        cpst_change_reason_id?: string;
                        cpst_plan_id?: string;
                        cpst_salary_level_id?: string;
                        effective_time?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                standard_id?: string;
                                grade?: {
                                    grade_id?: string;
                                    grade_tid?: string;
                                    grade_standard_value?: {
                                        reference_object?: {
                                            api_name?:
                                                | "cpst_item"
                                                | "cpst_indicator";
                                            id?: string;
                                        };
                                        standard_type?: {
                                            api_name?:
                                                | "standard_value"
                                                | "bandwidth_and_standard_value"
                                                | "bandwidth_upper_and_lower_limit";
                                        };
                                        band_width?: {
                                            upper_limit?: string;
                                            lower_limit?: string;
                                        };
                                        standard_value?: string;
                                    };
                                    currency?: {
                                        currency_id?: string;
                                        code?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                    description?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                    };
                                };
                                effective_time?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/compensation_standards/match`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 合同
         */
        contract: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=contract&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/create document }
             *
             * 创建合同
             *
             * 创建合同
             */
            create: async (
                payload?: {
                    data: {
                        effective_time: string;
                        expiration_time?: string;
                        employment_id: string;
                        contract_type: { enum_name: string };
                        first_party_company_id: string;
                        person_id?: string;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                        duration_type?: { enum_name: string };
                        contract_end_date?: string;
                        contract_number?: string;
                        signing_type?: { enum_name: string };
                    };
                    params?: { client_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                contract?: {
                                    id?: string;
                                    effective_time: string;
                                    expiration_time?: string;
                                    employment_id: string;
                                    contract_type: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    first_party_company_id: string;
                                    person_id?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    duration_type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    contract_end_date?: string;
                                    contract_number?: string;
                                    signing_type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    contract_status?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    renewal_status?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    signing_times?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/contracts`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=contract&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/delete document }
             *
             * 删除合同
             *
             * 删除合同
             */
            delete: async (
                payload?: {
                    path: { contract_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/contracts/:contract_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=contract&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/get document }
             *
             * 查询单个合同
             *
             * 根据 ID 查询单个合同
             */
            get: async (
                payload?: {
                    path: { contract_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                contract?: {
                                    id?: string;
                                    effective_time: string;
                                    expiration_time?: string;
                                    employment_id: string;
                                    contract_type: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    first_party_company_id: string;
                                    person_id?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    duration_type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    contract_end_date?: string;
                                    contract_number?: string;
                                    signing_type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    contract_status?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    renewal_status?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    signing_times?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/contracts/:contract_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=contract&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/list document }
             *
             * 批量查询合同
             *
             * 批量查询合同
             */
            list: async (
                payload?: {
                    params: { page_token?: string; page_size: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    effective_time: string;
                                    expiration_time?: string;
                                    employment_id: string;
                                    contract_type: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    first_party_company_id: string;
                                    person_id?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    duration_type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    contract_end_date?: string;
                                    contract_number?: string;
                                    signing_type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    contract_status?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    renewal_status?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    signing_times?: number;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/contracts`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=contract&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/patch document }
             *
             * 更新合同
             *
             * 更新合同
             */
            patch: async (
                payload?: {
                    data?: {
                        effective_time?: string;
                        expiration_time?: string;
                        employment_id?: string;
                        contract_type?: { enum_name: string };
                        first_party_company_id?: string;
                        person_id?: string;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                        duration_type?: { enum_name: string };
                        contract_end_date?: string;
                        contract_number?: string;
                        signing_type?: { enum_name: string };
                    };
                    params?: { client_token?: string };
                    path: { contract_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                contract?: {
                                    id?: string;
                                    effective_time: string;
                                    expiration_time?: string;
                                    employment_id: string;
                                    contract_type: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    first_party_company_id: string;
                                    person_id?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    duration_type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    contract_end_date?: string;
                                    contract_number?: string;
                                    signing_type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    contract_status?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    renewal_status?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    signing_times?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/contracts/:contract_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 地理库信息
         */
        countryRegion: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=country_region&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/country_region/get document }
             *
             * 查询单条国家/地区信息
             *
             * 查询单条国家/地区信息
             */
            get: async (
                payload?: {
                    path: { country_region_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                country_region?: {
                                    id: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    alpha_3_code: string;
                                    alpha_2_code: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/country_regions/:country_region_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=country_region&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/country_region/list document }
             *
             * 批量查询国家/地区信息
             *
             * 批量查询国家/地区信息
             */
            list: async (
                payload?: {
                    params: { page_token?: string; page_size: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    alpha_3_code: string;
                                    alpha_2_code: string;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/country_regions`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 货币信息
         */
        currency: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=currency&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/currency/get document }
             *
             * 查询单个货币信息
             *
             * 查询单个货币信息
             */
            get: async (
                payload?: {
                    path: { currency_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                currency?: {
                                    id?: string;
                                    country_region_id?: string;
                                    currency_name?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    numeric_code?: number;
                                    currency_alpha_3_code?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/currencies/:currency_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=currency&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/currency/list document }
             *
             * 批量查询货币信息
             *
             * 批量查询货币信息
             */
            list: async (
                payload?: {
                    params: { page_token?: string; page_size: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    country_region_id?: string;
                                    currency_name?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    numeric_code?: number;
                                    currency_alpha_3_code?: string;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/currencies`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 自定义字段
         */
        customField: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=custom_field&apiName=get_by_param&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param document }
             *
             * 获取自定义字段详情
             *
             * 获取「飞书人事」具体对象下某自定义字段的详细信息
             */
            getByParam: async (
                payload?: {
                    params: {
                        object_api_name: string;
                        custom_api_name: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                data?: {
                                    custom_api_name?: string;
                                    name: { zh_cn?: string; en_us?: string };
                                    description: {
                                        zh_cn?: string;
                                        en_us?: string;
                                    };
                                    is_open: boolean;
                                    is_required: boolean;
                                    is_unique: boolean;
                                    object_api_name: string;
                                    type: number;
                                    common_schema_config?: {
                                        text_field_setting?: {
                                            is_multilingual?: boolean;
                                            is_multiline?: boolean;
                                            max_length: number;
                                            is_url_type?: boolean;
                                        };
                                        number_field_setting?: {
                                            number_field_type?: number;
                                            decimal_places?: number;
                                            round_type?: number;
                                            decimal_total_places?: number;
                                        };
                                        enum_field_setting?: {
                                            enum_field_option_list?: Array<{
                                                api_name?: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                description?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                is_open?: boolean;
                                            }>;
                                            is_multiple?: boolean;
                                        };
                                        lookup_field_setting?: {
                                            lookup_obj_api_name?: string;
                                            is_multiple?: boolean;
                                        };
                                        date_time_field_setting?: {
                                            date_time_type?: number;
                                        };
                                        attachment_field_setting?: {
                                            is_multiple?: boolean;
                                            file_type?: number;
                                        };
                                        image_field_setting?: {
                                            image_type?: number;
                                            display_style?: number;
                                        };
                                        calculated_field_setting?: {
                                            type: number;
                                        };
                                    };
                                    create_time?: string;
                                    update_time?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/custom_fields/get_by_param`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=custom_field&apiName=list_object_api_name&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/list_object_api_name document }
             *
             * 获取飞书人事对象列表
             *
             * 获取「飞书人事」中的对象列表，含系统预置对象与自定义对象
             */
            listObjectApiName: async (
                payload?: {
                    params: { page_token?: string; page_size: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    object_api_name?: string;
                                    name?: { zh_cn?: string; en_us?: string };
                                    is_open?: boolean;
                                    create_time?: string;
                                    update_time?: string;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/custom_fields/list_object_api_name`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=custom_field&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/query document }
             *
             * 获取自定义字段列表
             *
             * 获取「飞书人事」具体对象下的自定义字段列表
             */
            query: async (
                payload?: {
                    params: { object_api_name_list: Array<string> };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    custom_api_name?: string;
                                    name: { zh_cn?: string; en_us?: string };
                                    description: {
                                        zh_cn?: string;
                                        en_us?: string;
                                    };
                                    is_open: boolean;
                                    is_required: boolean;
                                    is_unique: boolean;
                                    object_api_name: string;
                                    type: number;
                                    common_schema_config?: {
                                        text_field_setting?: {
                                            is_multilingual?: boolean;
                                            is_multiline?: boolean;
                                            max_length: number;
                                            is_url_type?: boolean;
                                        };
                                        number_field_setting?: {
                                            number_field_type?: number;
                                            decimal_places?: number;
                                            round_type?: number;
                                            decimal_total_places?: number;
                                        };
                                        enum_field_setting?: {
                                            enum_field_option_list?: Array<{
                                                api_name?: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                description?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                is_open?: boolean;
                                            }>;
                                            is_multiple?: boolean;
                                        };
                                        lookup_field_setting?: {
                                            lookup_obj_api_name?: string;
                                            is_multiple?: boolean;
                                        };
                                        date_time_field_setting?: {
                                            date_time_type?: number;
                                        };
                                        attachment_field_setting?: {
                                            is_multiple?: boolean;
                                            file_type?: number;
                                        };
                                        image_field_setting?: {
                                            image_type?: number;
                                            display_style?: number;
                                        };
                                        calculated_field_setting?: {
                                            type: number;
                                        };
                                    };
                                    create_time?: string;
                                    update_time?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/custom_fields/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 部门
         */
        department: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/create document }
             *
             * 创建部门
             *
             * 创建部门
             */
            create: async (
                payload?: {
                    data: {
                        sub_type?: { enum_name: string };
                        manager?: string;
                        is_confidential?: boolean;
                        hiberarchy_common: {
                            parent_id?: string;
                            name: Array<{ lang: string; value: string }>;
                            type?: { enum_name: string };
                            active: boolean;
                            expiration_time?: string;
                            code?: string;
                            description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        };
                        effective_time: string;
                        expiration_time?: string;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                        cost_center_id?: string;
                        staffing_model?: { enum_name: string };
                    };
                    params?: {
                        client_token?: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id"
                            | "people_corehr_department_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                department?: {
                                    id?: string;
                                    sub_type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    manager?: string;
                                    is_confidential?: boolean;
                                    hiberarchy_common: {
                                        parent_id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        active: boolean;
                                        effective_time?: string;
                                        expiration_time?: string;
                                        code?: string;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        tree_order?: string;
                                        list_order?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                    effective_time: string;
                                    expiration_time?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    cost_center_id?: string;
                                    staffing_model?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/departments`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/delete document }
             *
             * 删除部门
             *
             * 删除部门
             */
            delete: async (
                payload?: {
                    path: { department_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/departments/:department_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/get document }
             *
             * 查询单个部门
             *
             * 根据 ID 查询单个部门
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id"
                            | "people_corehr_department_id";
                    };
                    path: { department_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                department?: {
                                    id?: string;
                                    sub_type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    manager?: string;
                                    is_confidential?: boolean;
                                    hiberarchy_common: {
                                        parent_id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        active: boolean;
                                        effective_time?: string;
                                        expiration_time?: string;
                                        code?: string;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        tree_order?: string;
                                        list_order?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                    effective_time: string;
                                    expiration_time?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    cost_center_id?: string;
                                    staffing_model?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/departments/:department_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/list document }
             *
             * 批量查询部门
             *
             * 批量查询部门
             */
            list: async (
                payload?: {
                    params: {
                        page_token?: string;
                        page_size: string;
                        department_id_list?: Array<string>;
                        name_list?: Array<string>;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id"
                            | "people_corehr_department_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    sub_type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    manager?: string;
                                    is_confidential?: boolean;
                                    hiberarchy_common: {
                                        parent_id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        active: boolean;
                                        effective_time?: string;
                                        expiration_time?: string;
                                        code?: string;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        tree_order?: string;
                                        list_order?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                    effective_time: string;
                                    expiration_time?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    cost_center_id?: string;
                                    staffing_model?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/departments`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/patch document }
             *
             * 更新部门
             *
             * 更新部门
             */
            patch: async (
                payload?: {
                    data: {
                        id?: string;
                        sub_type?: { enum_name: string };
                        manager?: string;
                        is_confidential?: boolean;
                        hiberarchy_common?: {
                            parent_id?: string;
                            name?: Array<{ lang: string; value: string }>;
                            type?: { enum_name: string };
                            active?: boolean;
                            effective_time?: string;
                            expiration_time?: string;
                            code?: string;
                            description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        };
                        effective_time: string;
                        expiration_time?: string;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                        cost_center_id?: string;
                        staffing_model?: { enum_name: string };
                    };
                    params?: {
                        client_token?: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id"
                            | "people_corehr_department_id";
                    };
                    path: { department_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                department?: {
                                    id?: string;
                                    sub_type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    manager?: string;
                                    is_confidential?: boolean;
                                    hiberarchy_common: {
                                        parent_id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        active: boolean;
                                        effective_time?: string;
                                        expiration_time?: string;
                                        code?: string;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        tree_order?: string;
                                        list_order?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                    effective_time: string;
                                    expiration_time?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    cost_center_id?: string;
                                    staffing_model?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/departments/:department_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 人员类型
         */
        employeeType: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee_type&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/create document }
             *
             * 创建人员类型
             *
             * 创建人员类型
             */
            create: async (
                payload?: {
                    data: {
                        name: Array<{ lang: string; value: string }>;
                        default_employee_type: boolean;
                        active: boolean;
                        code?: string;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                    };
                    params?: { client_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employee_type?: {
                                    id?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    default_employee_type: boolean;
                                    active: boolean;
                                    code?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/employee_types`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee_type&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/delete document }
             *
             * 删除人员类型
             *
             * 删除人员类型
             */
            delete: async (
                payload?: {
                    path: { employee_type_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/employee_types/:employee_type_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee_type&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/get document }
             *
             * 查询单个人员类型
             *
             * 根据 ID 查询单个人员类型
             */
            get: async (
                payload?: {
                    path: { employee_type_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employee_type?: {
                                    id?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    default_employee_type: boolean;
                                    active: boolean;
                                    code?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/employee_types/:employee_type_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee_type&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/list document }
             *
             * 批量查询人员类型
             *
             * 批量查询人员类型
             */
            list: async (
                payload?: {
                    params: { page_token?: string; page_size: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    default_employee_type: boolean;
                                    active: boolean;
                                    code?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/employee_types`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee_type&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/patch document }
             *
             * 更新人员类型数据
             *
             * 更新人员类型数据
             */
            patch: async (
                payload?: {
                    data?: {
                        name?: Array<{ lang: string; value: string }>;
                        default_employee_type?: boolean;
                        active?: boolean;
                        code?: string;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                    };
                    params?: { client_token?: string };
                    path: { employee_type_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employee_type?: {
                                    id?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    default_employee_type: boolean;
                                    active: boolean;
                                    code?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/employee_types/:employee_type_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 雇佣信息
         */
        employment: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employment&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employment/create document }
             *
             * 创建雇佣信息
             *
             * 创建人员的雇佣信息
             */
            create: async (
                payload?: {
                    data: {
                        seniority_date?: string;
                        employee_number?: string;
                        effective_time: string;
                        expiration_time?: string;
                        employment_type: { enum_name: string };
                        person_id: string;
                        primary_employment: boolean;
                        employment_status: { enum_name: string };
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                        work_email_list?: Array<{
                            email: string;
                            is_primary?: boolean;
                            is_public?: boolean;
                            email_usage?: { enum_name: string };
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        }>;
                        reason_for_offboarding?: { enum_name: string };
                        ats_application_id?: string;
                        rehire?: { enum_name: string };
                        rehire_employment_id?: string;
                    };
                    params?: { client_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employment?: {
                                    prehire_id?: string;
                                    employee_type_id?: string;
                                    tenure?: string;
                                    department_id?: string;
                                    job_level_id?: string;
                                    work_location_id?: string;
                                    job_family_id?: string;
                                    job_id?: string;
                                    company_id?: string;
                                    working_hours_type_id?: string;
                                    id?: string;
                                    seniority_date?: string;
                                    employee_number?: string;
                                    effective_time: string;
                                    expiration_time?: string;
                                    employment_type: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    person_id: string;
                                    probation_period?: number;
                                    on_probation?: string;
                                    probation_end_date?: string;
                                    primary_employment: boolean;
                                    employment_status?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    work_email_list?: Array<{
                                        email: string;
                                        is_primary?: boolean;
                                        is_public?: boolean;
                                        email_usage?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    email_address?: string;
                                    reason_for_offboarding?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    cost_center_list?: Array<{
                                        cost_center_id?: string;
                                        rate?: number;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    ats_application_id?: string;
                                    rehire?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    rehire_employment_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/employments`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employment&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employment/delete document }
             *
             * 删除雇佣信息
             *
             * 删除人员的雇佣信息
             */
            delete: async (
                payload?: {
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                    };
                    path: { employment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/employments/:employment_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employment&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employment/patch document }
             *
             * 更新雇佣信息
             *
             * 更新雇佣信息
             */
            patch: async (
                payload?: {
                    data?: {
                        seniority_date?: string;
                        employee_number?: string;
                        employment_type?: { enum_name: string };
                        person_id?: string;
                        primary_employment?: boolean;
                        condition_worker?: boolean;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                        work_email_list?: Array<{
                            email: string;
                            is_primary?: boolean;
                            is_public?: boolean;
                            email_usage?: { enum_name: string };
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        }>;
                        reason_for_offboarding?: { enum_name: string };
                        ats_application_id?: string;
                    };
                    params?: {
                        client_token?: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id"
                            | "people_corehr_department_id";
                    };
                    path: { employment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employment?: {
                                    prehire_id?: string;
                                    employee_type_id?: string;
                                    tenure?: string;
                                    department_id?: string;
                                    job_level_id?: string;
                                    work_location_id?: string;
                                    job_family_id?: string;
                                    job_id?: string;
                                    company_id?: string;
                                    working_hours_type_id?: string;
                                    id?: string;
                                    seniority_date?: string;
                                    employee_number?: string;
                                    effective_time: string;
                                    expiration_time?: string;
                                    employment_type: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    person_id: string;
                                    probation_period?: number;
                                    on_probation?: string;
                                    probation_end_date?: string;
                                    primary_employment: boolean;
                                    condition_worker?: boolean;
                                    employment_status?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    work_email_list?: Array<{
                                        email: string;
                                        is_primary?: boolean;
                                        is_public?: boolean;
                                        email_usage?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    email_address?: string;
                                    reason_for_offboarding?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    cost_center_list?: Array<{
                                        cost_center_id?: string;
                                        rate?: number;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    ats_application_id?: string;
                                    service_company?: string;
                                    compensation_type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    work_shift?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/employments/:employment_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * file
         */
        file: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=file&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=corehr&resource=file&version=v1 document }
             */
            get: async (
                payload?: {
                    path?: { id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/files/:id`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                const checkIsReadable = () => {
                    const consumedError =
                        "The stream has already been consumed";
                    if (!res.readable) {
                        this.logger.error(consumedError);
                        throw new Error(consumedError);
                    }
                };

                return {
                    writeFile: async (filePath: string) => {
                        checkIsReadable();
                        return new Promise((resolve, reject) => {
                            const writableStream =
                                fs.createWriteStream(filePath);
                            writableStream.on("finish", () => {
                                resolve(filePath);
                            });
                            writableStream.on("error", (e) => {
                                reject(e);
                            });
                            res.pipe(writableStream);
                        });
                    },
                    getReadableStream: () => {
                        checkIsReadable();
                        return res as Readable;
                    },
                };
            },
        },
        /**
         * 职务
         */
        job: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/create document }
             *
             * 创建职务
             *
             * 创建职务
             */
            create: async (
                payload?: {
                    data: {
                        code?: string;
                        name: Array<{ lang: string; value: string }>;
                        description?: Array<{ lang: string; value: string }>;
                        active: boolean;
                        job_title?: Array<{ lang: string; value: string }>;
                        pathway_id?: string;
                        job_family_id_list?: Array<string>;
                        job_level_id_list?: Array<string>;
                        working_hours_type_id?: string;
                        effective_time: string;
                        expiration_time?: string;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                    };
                    params?: { client_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                job?: {
                                    id?: string;
                                    code?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    description?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active: boolean;
                                    job_title?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    pathway_id?: string;
                                    job_family_id_list?: Array<string>;
                                    job_level_id_list?: Array<string>;
                                    working_hours_type_id?: string;
                                    effective_time: string;
                                    expiration_time?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/jobs`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/delete document }
             *
             * 删除职务
             *
             * 删除职务
             */
            delete: async (
                payload?: {
                    path: { job_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/jobs/:job_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/get document }
             *
             * 查询单个职务
             *
             * 根据 ID 查询单个职务
             */
            get: async (
                payload?: {
                    path: { job_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                job?: {
                                    id?: string;
                                    code?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    description?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active: boolean;
                                    job_title?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    pathway_id?: string;
                                    job_family_id_list?: Array<string>;
                                    job_level_id_list?: Array<string>;
                                    working_hours_type_id?: string;
                                    effective_time: string;
                                    expiration_time?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/jobs/:job_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/list document }
             *
             * 批量查询职务
             *
             * 批量查询职务
             */
            list: async (
                payload?: {
                    params: {
                        page_token?: string;
                        page_size: string;
                        name?: string;
                        query_language?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    code?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    description?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active: boolean;
                                    job_title?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    pathway_id?: string;
                                    job_family_id_list?: Array<string>;
                                    job_level_id_list?: Array<string>;
                                    working_hours_type_id?: string;
                                    effective_time: string;
                                    expiration_time?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/jobs`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/patch document }
             *
             * 更新职务
             *
             * 更新职务
             */
            patch: async (
                payload?: {
                    data?: {
                        code?: string;
                        name?: Array<{ lang: string; value: string }>;
                        description?: Array<{ lang: string; value: string }>;
                        active?: boolean;
                        job_title?: Array<{ lang: string; value: string }>;
                        pathway_id?: string;
                        job_family_id_list?: Array<string>;
                        job_level_id_list?: Array<string>;
                        working_hours_type_id?: string;
                        effective_time?: string;
                        expiration_time?: string;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                    };
                    params?: { client_token?: string };
                    path: { job_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                job?: {
                                    id?: string;
                                    code?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    description?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active: boolean;
                                    job_title?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    pathway_id?: string;
                                    job_family_id_list?: Array<string>;
                                    job_level_id_list?: Array<string>;
                                    working_hours_type_id?: string;
                                    effective_time: string;
                                    expiration_time?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/jobs/:job_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 异动信息
         */
        jobChange: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_change&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_change/create document }
             *
             * 发起员工异动
             *
             * 创建员工异动信息
             */
            create: async (
                payload?: {
                    data: {
                        transfer_mode: number;
                        employment_id: string;
                        transfer_type_unique_identifier: string;
                        flow_id?: string;
                        effective_date: string;
                        transfer_info: {
                            remark?: string;
                            offer_info?: string;
                            target_dotted_manager_clean?: boolean;
                            probation_exist?: boolean;
                            original_department?: string;
                            target_department?: string;
                            original_work_location?: string;
                            target_work_location?: string;
                            original_direct_manager?: string;
                            target_direct_manager?: string;
                            original_dotted_manager?: string;
                            target_dotted_manager?: string;
                            original_job?: string;
                            target_job?: string;
                            original_job_family?: string;
                            target_job_family?: string;
                            original_job_level?: string;
                            target_job_level?: string;
                            original_workforce_type?: string;
                            target_workforce_type?: string;
                            original_employee_subtype?: string;
                            target_employee_subtype?: string;
                            original_company?: string;
                            target_company?: string;
                            original_contract_number?: string;
                            target_contract_number?: string;
                            original_contract_type?: string;
                            target_contract_type?: string;
                            original_duration_type?: string;
                            target_duration_type?: string;
                            original_signing_type?: string;
                            target_signing_type?: string;
                            original_contract_start_date?: string;
                            target_contract_start_date?: string;
                            original_contract_end_date?: string;
                            target_contract_end_date?: string;
                            original_working_hours_type?: string;
                            target_working_hours_type?: string;
                            original_working_calendar?: string;
                            target_working_calendar?: string;
                            original_probation_end_date?: string;
                            target_probation_end_date?: string;
                            original_weekly_working_hours?: string;
                            target_weekly_working_hours?: string;
                            original_work_shift?: string;
                            target_work_shift?: string;
                            original_cost_center_rate?: Array<{
                                cost_center_id?: string;
                                rate?: number;
                            }>;
                            target_cost_center_rate?: Array<{
                                cost_center_id?: string;
                                rate?: number;
                            }>;
                            original_employment_change?: {
                                regular_employee_start_date?: string;
                                seniority_date?: string;
                                employee_number?: string;
                                custom_fields?: Array<{
                                    custom_api_name: string;
                                    value: string;
                                }>;
                            };
                            target_employment_change?: {
                                regular_employee_start_date?: string;
                                seniority_date?: string;
                                employee_number?: string;
                                custom_fields?: Array<{
                                    custom_api_name: string;
                                    value: string;
                                }>;
                            };
                            original_job_grade?: string;
                            target_job_grade?: string;
                            original_compensation_type?: string;
                            target_compensation_type?: string;
                            original_service_company?: string;
                            target_service_company?: string;
                            original_position?: string;
                            target_position?: string;
                            original_pathway?: string;
                            target_pathway?: string;
                        };
                        transfer_key?: string;
                        initiator_id?: string;
                    };
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id"
                            | "people_corehr_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id"
                            | "people_corehr_department_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                job_change_id?: string;
                                employment_id?: string;
                                status?: number;
                                transfer_type_unique_identifier?: string;
                                transfer_reason_unique_identifier?: string;
                                process_id?: string;
                                effective_date?: string;
                                created_time?: string;
                                transfer_info?: {
                                    remark?: string;
                                    offer_info?: string;
                                    target_dotted_manager_clean?: boolean;
                                    probation_exist?: boolean;
                                    original_department?: string;
                                    target_department?: string;
                                    original_work_location?: string;
                                    target_work_location?: string;
                                    original_direct_manager?: string;
                                    target_direct_manager?: string;
                                    original_dotted_manager?: string;
                                    target_dotted_manager?: string;
                                    original_job?: string;
                                    target_job?: string;
                                    original_job_family?: string;
                                    target_job_family?: string;
                                    original_job_level?: string;
                                    target_job_level?: string;
                                    original_workforce_type?: string;
                                    target_workforce_type?: string;
                                    original_employee_subtype?: string;
                                    target_employee_subtype?: string;
                                    original_company?: string;
                                    target_company?: string;
                                    original_contract_number?: string;
                                    target_contract_number?: string;
                                    original_contract_type?: string;
                                    target_contract_type?: string;
                                    original_duration_type?: string;
                                    target_duration_type?: string;
                                    original_signing_type?: string;
                                    target_signing_type?: string;
                                    original_contract_start_date?: string;
                                    target_contract_start_date?: string;
                                    original_contract_end_date?: string;
                                    target_contract_end_date?: string;
                                    original_working_hours_type?: string;
                                    target_working_hours_type?: string;
                                    original_working_calendar?: string;
                                    target_working_calendar?: string;
                                    original_probation_end_date?: string;
                                    target_probation_end_date?: string;
                                    original_weekly_working_hours?: string;
                                    target_weekly_working_hours?: string;
                                    original_work_shift?: string;
                                    target_work_shift?: string;
                                    original_cost_center_rate?: Array<{
                                        cost_center_id?: string;
                                        rate?: number;
                                    }>;
                                    target_cost_center_rate?: Array<{
                                        cost_center_id?: string;
                                        rate?: number;
                                    }>;
                                    original_employment_change?: {
                                        regular_employee_start_date?: string;
                                        seniority_date?: string;
                                        employee_number?: string;
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                    };
                                    target_employment_change?: {
                                        regular_employee_start_date?: string;
                                        seniority_date?: string;
                                        employee_number?: string;
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                    };
                                    original_job_grade?: string;
                                    target_job_grade?: string;
                                    original_compensation_type?: string;
                                    target_compensation_type?: string;
                                    original_service_company?: string;
                                    target_service_company?: string;
                                    original_position?: string;
                                    target_position?: string;
                                    original_pathway?: string;
                                    target_pathway?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/job_changes`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 任职信息
         */
        jobData: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_data&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/create document }
             *
             * 创建任职信息
             *
             * 在系统中第一次创建员工任职数据，通常在员工入职或者做数据批量导入的时候使用，【任职原因】只支持填写“入职”
             */
            create: async (
                payload?: {
                    data: {
                        job_level_id?: string;
                        job_grade_id?: string;
                        employee_type_id: string;
                        working_hours_type_id?: string;
                        work_location_id?: string;
                        department_id: string;
                        job_id?: string;
                        probation_start_date?: string;
                        probation_end_date?: string;
                        primary_job_data: boolean;
                        employment_id: string;
                        effective_time: string;
                        expiration_time?: string;
                        job_family_id?: string;
                        assignment_start_reason: { enum_name: string };
                        probation_expected_end_date?: string;
                        direct_manager_id?: string;
                        dotted_line_manager_id_list?: Array<string>;
                        second_direct_manager_id?: string;
                        cost_center_rate?: Array<{
                            cost_center_id?: string;
                            rate?: number;
                        }>;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                        work_shift?: { enum_name: string };
                        compensation_type?: { enum_name: string };
                        service_company?: string;
                        position_id?: string;
                        pathway_id?: string;
                    };
                    params?: {
                        client_token?: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id"
                            | "people_corehr_department_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                job_data?: {
                                    id?: string;
                                    version_id?: string;
                                    job_level_id?: string;
                                    job_grade_id?: string;
                                    employee_type_id: string;
                                    working_hours_type_id?: string;
                                    work_location_id?: string;
                                    department_id?: string;
                                    job_id?: string;
                                    probation_start_date?: string;
                                    probation_end_date?: string;
                                    primary_job_data: boolean;
                                    employment_id: string;
                                    effective_time: string;
                                    expiration_time?: string;
                                    job_family_id?: string;
                                    assignment_start_reason?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    probation_expected_end_date?: string;
                                    weekly_working_hours?: number;
                                    direct_manager_id?: string;
                                    dotted_line_manager_id_list?: Array<string>;
                                    second_direct_manager_id?: string;
                                    cost_center_rate?: Array<{
                                        cost_center_id?: string;
                                        rate?: number;
                                    }>;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    weekly_working_hours_v2?: number;
                                    work_shift?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    compensation_type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    service_company?: string;
                                    pathway_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/job_datas`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_data&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/delete document }
             *
             * 删除任职信息
             *
             * 删除人员的任职信息
             */
            delete: async (
                payload?: {
                    params?: { version_id?: string };
                    path: { job_data_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/job_datas/:job_data_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_data&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/get document }
             *
             * 查询单个任职信息
             *
             * 根据 ID 查询单任职信息
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id"
                            | "people_corehr_department_id";
                    };
                    path: { job_data_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                job_data?: {
                                    id?: string;
                                    version_id?: string;
                                    job_level_id?: string;
                                    job_grade_id?: string;
                                    employee_type_id: string;
                                    working_hours_type_id?: string;
                                    work_location_id?: string;
                                    department_id?: string;
                                    job_id?: string;
                                    probation_start_date?: string;
                                    probation_end_date?: string;
                                    primary_job_data: boolean;
                                    employment_id: string;
                                    effective_time: string;
                                    expiration_time?: string;
                                    job_family_id?: string;
                                    assignment_start_reason?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    probation_expected_end_date?: string;
                                    weekly_working_hours?: number;
                                    direct_manager_id?: string;
                                    dotted_line_manager_id_list?: Array<string>;
                                    second_direct_manager_id?: string;
                                    cost_center_rate?: Array<{
                                        cost_center_id?: string;
                                        rate?: number;
                                    }>;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    weekly_working_hours_v2?: number;
                                    work_shift?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    compensation_type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    service_company?: string;
                                    employee_subtype_id?: string;
                                    position_id?: string;
                                    pathway_id?: string;
                                    job_data_reason?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/job_datas/:job_data_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_data&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/list document }
             *
             * 批量查询任职信息
             *
             * 批量查询人员的任职信息
             */
            list: async (
                payload?: {
                    params: {
                        page_token?: string;
                        page_size: string;
                        employment_id?: string;
                        job_data_id_list?: Array<string>;
                        department_id?: string;
                        job_id?: string;
                        get_all_version?: boolean;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id"
                            | "people_corehr_department_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    version_id?: string;
                                    job_level_id?: string;
                                    job_grade_id?: string;
                                    employee_type_id: string;
                                    working_hours_type_id?: string;
                                    work_location_id?: string;
                                    department_id?: string;
                                    job_id?: string;
                                    probation_start_date?: string;
                                    probation_end_date?: string;
                                    primary_job_data: boolean;
                                    employment_id: string;
                                    effective_time: string;
                                    expiration_time?: string;
                                    job_family_id?: string;
                                    assignment_start_reason?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    probation_expected_end_date?: string;
                                    probation_outcome?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    weekly_working_hours?: number;
                                    direct_manager_id?: string;
                                    dotted_line_manager_id_list?: Array<string>;
                                    second_direct_manager_id?: string;
                                    cost_center_rate?: Array<{
                                        cost_center_id?: string;
                                        rate?: number;
                                    }>;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    weekly_working_hours_v2?: number;
                                    work_shift?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    compensation_type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    service_company?: string;
                                    employee_subtype_id?: string;
                                    position_id?: string;
                                    pathway_id?: string;
                                    job_data_reason?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/job_datas`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_data&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/patch document }
             *
             * 更新任职信息
             *
             * 更新任职信息
             */
            patch: async (
                payload?: {
                    data?: {
                        version_id?: string;
                        job_level_id?: string;
                        job_grade_id?: string;
                        employee_type_id?: string;
                        working_hours_type_id?: string;
                        work_location_id?: string;
                        department_id?: string;
                        job_id?: string;
                        probation_start_date?: string;
                        probation_end_date?: string;
                        primary_job_data?: boolean;
                        effective_time?: string;
                        expiration_time?: string;
                        job_family_id?: string;
                        assignment_start_reason?: { enum_name: string };
                        probation_expected_end_date?: string;
                        direct_manager_id?: string;
                        dotted_line_manager_id_list?: Array<string>;
                        second_direct_manager_id?: string;
                        cost_center_rate?: Array<{
                            cost_center_id?: string;
                            rate?: number;
                        }>;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                        work_shift?: { enum_name: string };
                        compensation_type?: { enum_name: string };
                        service_company?: string;
                        pathway_id?: string;
                    };
                    params?: {
                        client_token?: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id"
                            | "people_corehr_department_id";
                        strict_verify?: string;
                    };
                    path: { job_data_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                job_data?: {
                                    id?: string;
                                    version_id?: string;
                                    job_level_id?: string;
                                    job_grade_id?: string;
                                    employee_type_id: string;
                                    working_hours_type_id?: string;
                                    work_location_id?: string;
                                    department_id?: string;
                                    job_id?: string;
                                    probation_start_date?: string;
                                    probation_end_date?: string;
                                    primary_job_data: boolean;
                                    employment_id: string;
                                    effective_time: string;
                                    expiration_time?: string;
                                    job_family_id?: string;
                                    assignment_start_reason?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    probation_expected_end_date?: string;
                                    weekly_working_hours?: number;
                                    direct_manager_id?: string;
                                    dotted_line_manager_id_list?: Array<string>;
                                    second_direct_manager_id?: string;
                                    cost_center_rate?: Array<{
                                        cost_center_id?: string;
                                        rate?: number;
                                    }>;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    weekly_working_hours_v2?: number;
                                    work_shift?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    compensation_type?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    service_company?: string;
                                    pathway_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/job_datas/:job_data_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 职务序列
         */
        jobFamily: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_family&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/create document }
             *
             * 创建职务序列
             *
             * 创建职务序列
             */
            create: async (
                payload?: {
                    data: {
                        name: Array<{ lang: string; value: string }>;
                        active: boolean;
                        selectable?: boolean;
                        parent_id?: string;
                        pathway_ids?: Array<string>;
                        effective_time: string;
                        expiration_time?: string;
                        code?: string;
                        description?: Array<{ lang: string; value: string }>;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                    };
                    params?: { client_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                job_family?: {
                                    id?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active: boolean;
                                    selectable?: boolean;
                                    parent_id?: string;
                                    pathway_ids?: Array<string>;
                                    effective_time: string;
                                    expiration_time?: string;
                                    code?: string;
                                    description?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/job_families`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_family&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/delete document }
             *
             * 删除职务序列
             *
             * 删除职务序列
             */
            delete: async (
                payload?: {
                    path: { job_family_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/job_families/:job_family_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_family&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/get document }
             *
             * 查询单个职务序列
             *
             * 根据 ID 查询单个职务序列
             */
            get: async (
                payload?: {
                    path: { job_family_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                job_family?: {
                                    id?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active: boolean;
                                    selectable?: boolean;
                                    parent_id?: string;
                                    pathway_ids?: Array<string>;
                                    effective_time: string;
                                    expiration_time?: string;
                                    code?: string;
                                    description?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/job_families/:job_family_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_family&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/list document }
             *
             * 批量查询职务序列
             *
             * 批量查询职务序列
             */
            list: async (
                payload?: {
                    params: { page_token?: string; page_size: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active: boolean;
                                    selectable?: boolean;
                                    parent_id?: string;
                                    pathway_ids?: Array<string>;
                                    effective_time: string;
                                    expiration_time?: string;
                                    code?: string;
                                    description?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/job_families`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_family&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/patch document }
             *
             * 更新职务序列
             *
             * 更新职务序列
             */
            patch: async (
                payload?: {
                    data?: {
                        name?: Array<{ lang: string; value: string }>;
                        active?: boolean;
                        selectable?: boolean;
                        parent_id?: string;
                        pathway_ids?: Array<string>;
                        effective_time?: string;
                        expiration_time?: string;
                        code?: string;
                        description?: Array<{ lang: string; value: string }>;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                    };
                    params?: { client_token?: string };
                    path: { job_family_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                job_family?: {
                                    id?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active: boolean;
                                    selectable?: boolean;
                                    parent_id?: string;
                                    pathway_ids?: Array<string>;
                                    effective_time: string;
                                    expiration_time?: string;
                                    code?: string;
                                    description?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/job_families/:job_family_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 职务级别
         */
        jobLevel: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_level&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/create document }
             *
             * 创建职务级别
             *
             * 创建职务级别
             */
            create: async (
                payload?: {
                    data: {
                        level_order: number;
                        code?: string;
                        name: Array<{ lang: string; value: string }>;
                        description?: Array<{ lang: string; value: string }>;
                        active: boolean;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                        job_grade?: Array<string>;
                        pathway_ids?: Array<string>;
                    };
                    params?: { client_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                job_level?: {
                                    id?: string;
                                    level_order: number;
                                    code?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    description?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active: boolean;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    job_grade?: Array<string>;
                                    pathway_ids?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/job_levels`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_level&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/delete document }
             *
             * 删除职务级别
             *
             * 删除职务级别
             */
            delete: async (
                payload?: {
                    path: { job_level_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/job_levels/:job_level_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_level&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/get document }
             *
             * 查询单个职务级别
             *
             * 根据 ID 查询单个职务级别
             */
            get: async (
                payload?: {
                    path: { job_level_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                job_level?: {
                                    id?: string;
                                    level_order: number;
                                    code?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    description?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active: boolean;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    job_grade?: Array<string>;
                                    pathway_ids?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/job_levels/:job_level_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_level&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/list document }
             *
             * 批量查询职务级别
             *
             * 批量查询职务级别
             */
            list: async (
                payload?: {
                    params: { page_token?: string; page_size: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    level_order: number;
                                    code?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    description?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active: boolean;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    job_grade?: Array<string>;
                                    pathway_ids?: Array<string>;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/job_levels`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_level&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/patch document }
             *
             * 更新职务级别
             *
             * 更新职务级别
             */
            patch: async (
                payload?: {
                    data?: {
                        level_order?: number;
                        code?: string;
                        name?: Array<{ lang: string; value: string }>;
                        description?: Array<{ lang: string; value: string }>;
                        active?: boolean;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                        job_grade?: Array<string>;
                        pathway_ids?: Array<string>;
                    };
                    params?: { client_token?: string };
                    path: { job_level_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                job_level?: {
                                    id?: string;
                                    level_order: number;
                                    code?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    description?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active: boolean;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    job_grade?: Array<string>;
                                    pathway_ids?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/job_levels/:job_level_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 休假管理
         */
        leave: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave&apiName=calendar_by_scope&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=calendar_by_scope&project=corehr&resource=leave&version=v1 document }
             */
            calendarByScope: async (
                payload?: {
                    params?: {
                        wk_department_id?: string;
                        wk_country_region_id?: string;
                        wk_employee_type_id?: string;
                        wk_work_location_id?: string;
                        wk_working_hours_type_id?: string;
                        wk_job_family_id?: string;
                        wk_company_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { calendar_wk_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/leaves/calendar_by_scope`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave&apiName=leave_balances&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave/leave_balances document }
             *
             * 批量查询员工假期余额
             *
             * 批量获取员工各个假期的余额数据
             */
            leaveBalances: async (
                payload?: {
                    params: {
                        page_token?: string;
                        page_size: string;
                        as_of_date?: string;
                        employment_id_list?: Array<string>;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                        time_zone?: string;
                        include_offboard?: boolean;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employment_leave_balance_list?: Array<{
                                    employment_id: string;
                                    employment_name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    as_of_date: string;
                                    leave_balance_list: Array<{
                                        leave_type_id: string;
                                        leave_type_name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        historical_cycles_left?: string;
                                        this_cycle_total?: string;
                                        this_cycle_taken: string;
                                        leave_balance: string;
                                        leave_duration_unit: number;
                                        history_cycle_accrual?: string;
                                        balance_in_current_cycle?: string;
                                        taken?: string;
                                        taken_history_cycle?: string;
                                        offboarding_balance?: string;
                                        taken_current_date?: string;
                                        offboarding_granted?: string;
                                    }>;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/leaves/leave_balances`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave&apiName=leave_request_history&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave/leave_request_history document }
             *
             * 批量查询员工请假记录
             *
             * 批量获取员工的请假记录数据
             */
            leaveRequestHistory: async (
                payload?: {
                    params: {
                        page_token?: string;
                        page_size: string;
                        employment_id_list?: Array<string>;
                        initiator_id_list?: Array<string>;
                        leave_request_status?: Array<string>;
                        leave_type_id_list?: Array<string>;
                        leave_start_date_min?: string;
                        leave_start_date_max?: string;
                        leave_end_date_min?: string;
                        leave_end_date_max?: string;
                        leave_submit_date_min?: string;
                        leave_submit_date_max?: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                        leave_update_time_min?: string;
                        leave_update_time_max?: string;
                        return_detail?: boolean;
                        leave_term_type?: number;
                        time_zone?: string;
                        data_source?: number;
                        db_update_time_min?: string;
                        db_update_time_max?: string;
                        wd_need_amount_zero_records?: boolean;
                        wd_need_denied_and_canceled_record?: boolean;
                        wd_paid_type?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                leave_request_list?: Array<{
                                    leave_request_id: string;
                                    employment_id: string;
                                    employment_name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    leave_type_id: string;
                                    leave_type_name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    start_time: string;
                                    end_time: string;
                                    leave_duration: string;
                                    leave_duration_unit: number;
                                    leave_request_status: number;
                                    grant_source: string;
                                    return_time: string;
                                    submitted_at: string;
                                    submitted_by: string;
                                    notes: string;
                                    approval_date?: string;
                                    is_deducted?: boolean;
                                    details?: Array<{
                                        leave_request_id: string;
                                        leave_date: string;
                                        leave_duration: string;
                                        leave_duration_unit: number;
                                        paid_type: number;
                                    }>;
                                    leave_type_code?: string;
                                    actual_end_date?: string;
                                    estimated_end_date?: string;
                                    time_zone?: string;
                                    data_source?: number;
                                    leave_process_id?: Array<string>;
                                    leave_correct_process_id?: Array<string>;
                                    leave_cancel_process_id?: Array<string>;
                                    leave_return_process_id?: Array<string>;
                                    wd_paid_type?: number;
                                    leave_correct_process_info?: Array<{
                                        process_id: string;
                                        process_status: string;
                                        process_apply_time: string;
                                    }>;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/leaves/leave_request_history`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave&apiName=leave_types&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave/leave_types document }
             *
             * 获取假期类型列表
             *
             * 获取休假设置后台配置的假期类型列表（比如年假、事假、婚假等）
             */
            leaveTypes: async (
                payload?: {
                    params: {
                        page_token?: string;
                        page_size: string;
                        status?: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                leave_type_list?: Array<{
                                    leave_type_id: string;
                                    leave_type_name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    status: number;
                                    leave_subtype_list?: Array<{
                                        leave_type_id: string;
                                        leave_type_name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    }>;
                                    created_at: string;
                                    created_by: string;
                                    updated_at: string;
                                    updated_by: string;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/leaves/leave_types`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave&apiName=work_calendar&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=work_calendar&project=corehr&resource=leave&version=v1 document }
             */
            workCalendar: async (
                payload?: {
                    data: {
                        wk_calendar_ids: Array<string>;
                        wk_calendar_id_gt?: string;
                        wk_option?: {
                            count?: boolean;
                            offset?: number;
                            limit: number;
                            sort_options?: Array<{
                                sort_field?: string;
                                sort_order?: number;
                                sort_i18n?: number;
                                sort_by_strand_length?: boolean;
                                sort_by_pinyin?: boolean;
                                sort_by_enum_value_order?: boolean;
                            }>;
                        };
                        only_enable?: boolean;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                work_calendars?: Array<{
                                    calendar_id: string;
                                    calendar_name?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                    };
                                    enable: boolean;
                                }>;
                                count?: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/leaves/work_calendar`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave&apiName=work_calendar_date&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=work_calendar_date&project=corehr&resource=leave&version=v1 document }
             */
            workCalendarDate: async (
                payload?: {
                    data: {
                        wk_calendar_ids: Array<string>;
                        dates?: Array<string>;
                        begin_date?: string;
                        end_date?: string;
                        offset?: number;
                        limit?: number;
                        ids?: Array<string>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                calendar_dates?: Array<{
                                    calendar_id?: string;
                                    date?: string;
                                    date_type?:
                                        | "day_off"
                                        | "public_holiday"
                                        | "workday";
                                    id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/leaves/work_calendar_date`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * leave_granting_record
         */
        leaveGrantingRecord: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave_granting_record&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave_granting_record/create document }
             *
             * 创建假期授予记录
             *
             * 向飞书人事休假系统写入假期授予记录
             */
            create: async (
                payload?: {
                    data: {
                        leave_type_id: string;
                        employment_id: string;
                        granting_quantity: string;
                        granting_unit: number;
                        effective_date: string;
                        expiration_date?: string;
                        section_type?: number;
                        reason: Array<{ lang: string; value: string }>;
                        external_id?: string;
                    };
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                leave_granting_record?: {
                                    id: string;
                                    employment_id: string;
                                    leave_type_id: string;
                                    granting_quantity: string;
                                    granting_unit: number;
                                    effective_date: string;
                                    expiration_date: string;
                                    granted_by: number;
                                    reason: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    created_at: string;
                                    created_by: string;
                                    updated_at: string;
                                    updated_by: string;
                                    section_type?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/leave_granting_records`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave_granting_record&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave_granting_record/delete document }
             *
             * 删除假期授予记录
             *
             * 删除飞书人事休假系统中的假期授予记录（仅支持删除授予来源是「手动授予」或「外部系统授予」的记录）
             */
            delete: async (
                payload?: {
                    path: { leave_granting_record_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/leave_granting_records/:leave_granting_record_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 地点
         */
        location: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/create document }
             *
             * 创建地点
             *
             * 创建地点
             */
            create: async (
                payload?: {
                    data: {
                        hiberarchy_common: {
                            parent_id?: string;
                            name: Array<{ lang: string; value: string }>;
                            type?: { enum_name: string };
                            active: boolean;
                            expiration_time?: string;
                            code?: string;
                            description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        };
                        location_usage_list?: Array<{ enum_name: string }>;
                        address?: Array<{
                            country_region_id: string;
                            region_id?: string;
                            city_id?: string;
                            distinct_id?: string;
                            address_line1?: string;
                            address_line2?: string;
                            address_line3?: string;
                            address_line4?: string;
                            address_line5?: string;
                            address_line6?: string;
                            address_line7?: string;
                            address_line8?: string;
                            address_line9?: string;
                            local_address_line1?: string;
                            local_address_line2?: string;
                            local_address_line3?: string;
                            local_address_line4?: string;
                            local_address_line5?: string;
                            local_address_line6?: string;
                            local_address_line7?: string;
                            local_address_line8?: string;
                            local_address_line9?: string;
                            postal_code?: string;
                            address_type_list?: Array<{ enum_name: string }>;
                            is_primary?: boolean;
                            is_public?: boolean;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        }>;
                        working_hours_type_id?: string;
                        effective_time: string;
                        expiration_time?: string;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                        locale?: { enum_name: string };
                        time_zone_id?: string;
                        display_language_id?: string;
                    };
                    params?: { client_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                location?: {
                                    id?: string;
                                    hiberarchy_common: {
                                        parent_id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        active: boolean;
                                        effective_time?: string;
                                        expiration_time?: string;
                                        code?: string;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        tree_order?: string;
                                        list_order?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                    location_usage_list?: Array<{
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    }>;
                                    address?: Array<{
                                        full_address_local_script?: string;
                                        full_address_western_script?: string;
                                        id?: string;
                                        country_region_id: string;
                                        region_id?: string;
                                        city_id?: string;
                                        distinct_id?: string;
                                        address_line1?: string;
                                        address_line2?: string;
                                        address_line3?: string;
                                        address_line4?: string;
                                        address_line5?: string;
                                        address_line6?: string;
                                        address_line7?: string;
                                        address_line8?: string;
                                        address_line9?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                        address_type_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        is_primary?: boolean;
                                        is_public?: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    working_hours_type_id?: string;
                                    effective_time: string;
                                    expiration_time?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    locale?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    time_zone_id?: string;
                                    display_language_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/locations`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/delete document }
             *
             * 删除地点
             *
             * 删除地点
             */
            delete: async (
                payload?: {
                    path: { location_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/locations/:location_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/get document }
             *
             * 查询单个地点
             *
             * 根据 ID 查询单个地点
             */
            get: async (
                payload?: {
                    path: { location_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                location?: {
                                    id?: string;
                                    hiberarchy_common: {
                                        parent_id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        active: boolean;
                                        effective_time?: string;
                                        expiration_time?: string;
                                        code?: string;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        tree_order?: string;
                                        list_order?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                    location_usage_list?: Array<{
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    }>;
                                    address?: Array<{
                                        full_address_local_script?: string;
                                        full_address_western_script?: string;
                                        id?: string;
                                        country_region_id: string;
                                        region_id?: string;
                                        city_id?: string;
                                        distinct_id?: string;
                                        address_line1?: string;
                                        address_line2?: string;
                                        address_line3?: string;
                                        address_line4?: string;
                                        address_line5?: string;
                                        address_line6?: string;
                                        address_line7?: string;
                                        address_line8?: string;
                                        address_line9?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                        address_type_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        is_primary?: boolean;
                                        is_public?: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    working_hours_type_id?: string;
                                    effective_time: string;
                                    expiration_time?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    locale?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    time_zone_id?: string;
                                    display_language_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/locations/:location_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/list document }
             *
             * 批量查询地点
             *
             * 批量查询地点
             */
            list: async (
                payload?: {
                    params: { page_token?: string; page_size: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    hiberarchy_common: {
                                        parent_id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        active: boolean;
                                        effective_time?: string;
                                        expiration_time?: string;
                                        code?: string;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        tree_order?: string;
                                        list_order?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                    location_usage_list?: Array<{
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    }>;
                                    address?: Array<{
                                        full_address_local_script?: string;
                                        full_address_western_script?: string;
                                        id?: string;
                                        country_region_id: string;
                                        region_id?: string;
                                        city_id?: string;
                                        distinct_id?: string;
                                        address_line1?: string;
                                        address_line2?: string;
                                        address_line3?: string;
                                        address_line4?: string;
                                        address_line5?: string;
                                        address_line6?: string;
                                        address_line7?: string;
                                        address_line8?: string;
                                        address_line9?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                        address_type_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        is_primary?: boolean;
                                        is_public?: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    working_hours_type_id?: string;
                                    effective_time: string;
                                    expiration_time?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    locale?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    time_zone_id?: string;
                                    display_language_id?: string;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/locations`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 国家证件类型
         */
        nationalIdType: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=national_id_type&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/national_id_type/create document }
             *
             * 创建国家证件类型
             *
             * 创建国家证件类型
             */
            create: async (
                payload?: {
                    data: {
                        country_region_id: string;
                        name: Array<{ lang: string; value: string }>;
                        active: boolean;
                        validation_rule: string;
                        validation_rule_description?: Array<{
                            lang: string;
                            value: string;
                        }>;
                        code: string;
                        identification_type: { enum_name: string };
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                    };
                    params?: { client_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                national_id_type?: {
                                    id?: string;
                                    country_region_id: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active: boolean;
                                    validation_rule: string;
                                    validation_rule_description?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    code: string;
                                    identification_type: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/national_id_types`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=national_id_type&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/national_id_type/delete document }
             *
             * 删除国家证件类型
             *
             * 删除国家证件类型
             */
            delete: async (
                payload?: {
                    path: { national_id_type_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/national_id_types/:national_id_type_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=national_id_type&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/national_id_type/get document }
             *
             * 查询单个国家证件类型
             *
             * 根据 ID 查询单个国家证件类型
             */
            get: async (
                payload?: {
                    path: { national_id_type_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                national_id_type?: {
                                    id?: string;
                                    country_region_id: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active: boolean;
                                    validation_rule: string;
                                    validation_rule_description?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    code: string;
                                    identification_type: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/national_id_types/:national_id_type_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=national_id_type&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/national_id_type/list document }
             *
             * 批量查询国家证件类型
             *
             * 批量查询国家证件类型
             */
            list: async (
                payload?: {
                    params: {
                        page_token?: string;
                        page_size: string;
                        identification_type?: string;
                        code?: string;
                        country_region_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    country_region_id: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active: boolean;
                                    validation_rule: string;
                                    validation_rule_description?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    code: string;
                                    identification_type: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/national_id_types`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=national_id_type&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/national_id_type/patch document }
             *
             * 更新国家证件类型
             *
             * 更新国家证件类型
             */
            patch: async (
                payload?: {
                    data?: {
                        country_region_id?: string;
                        name?: Array<{ lang: string; value: string }>;
                        active?: boolean;
                        validation_rule?: string;
                        validation_rule_description?: Array<{
                            lang: string;
                            value: string;
                        }>;
                        code?: string;
                        identification_type?: { enum_name: string };
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                    };
                    params?: { client_token?: string };
                    path: { national_id_type_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                national_id_type?: {
                                    id?: string;
                                    country_region_id: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active: boolean;
                                    validation_rule: string;
                                    validation_rule_description?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    code: string;
                                    identification_type: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/national_id_types/:national_id_type_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 员工离职
         */
        offboarding: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=offboarding&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/offboarding/query document }
             *
             * 查询员工离职原因列表
             *
             * 查询「飞书人事」-「离职设置」中的离职原因
             */
            query: async (
                payload?: {
                    data?: {
                        active?: boolean;
                        offboarding_reason_unique_identifier?: Array<string>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    offboarding_reason_unique_identifier?: string;
                                    name?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active?: boolean;
                                    parent_offboarding_reason_unique_identifier?: string;
                                    created_time?: string;
                                    updated_time?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/offboardings/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            searchWithIterator: async (
                payload?: {
                    data?: {
                        employment_ids?: Array<string>;
                        apply_initiating_time_start?: string;
                        apply_initiating_time_end?: string;
                        apply_finished_time_start?: string;
                        apply_finished_time_end?: string;
                        expected_offboarding_date_start?: string;
                        expected_offboarding_date_end?: string;
                        offboarding_date_start?: string;
                        offboarding_date_end?: string;
                        statuses?: Array<
                            | "Approving"
                            | "Approved"
                            | "Offboarded"
                            | "Rejected"
                            | "Withdrawn"
                            | "NoNeedApproval"
                        >;
                        reasons?: Array<string>;
                        employee_reasons?: Array<string>;
                    };
                    params: {
                        page_size: number;
                        page_token?: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/offboardings/search`,
                                path
                            ),
                            method: "POST",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                            data,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    (
                                        res as {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    initiating_type?: string;
                                                    status?:
                                                        | "Approving"
                                                        | "Approved"
                                                        | "Offboarded"
                                                        | "Rejected"
                                                        | "Withdrawn"
                                                        | "NoNeedApproval";
                                                    application_info?: {
                                                        apply_initiator_id?: string;
                                                        apply_initiating_time?: string;
                                                        apply_finish_time?: string;
                                                        process_id?: string;
                                                    };
                                                    offboarding_info?: {
                                                        employment_id?: string;
                                                        hrbp_id?: Array<string>;
                                                        expected_offboarding_date?: string;
                                                        offboarding_date?: string;
                                                        reason?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        reason_explanation?: string;
                                                        employee_reason?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        employee_reason_explanation?: string;
                                                        add_block_list?: string;
                                                        block_reason?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        block_reason_explanation?: string;
                                                        custom_fields?: Array<{
                                                            custom_api_name: string;
                                                            name?: {
                                                                zh_cn?: string;
                                                                en_us?: string;
                                                            };
                                                            type?: number;
                                                            value: string;
                                                        }>;
                                                        retain_account?: boolean;
                                                        social_insurance_end_date?: string;
                                                        provident_fund_end_date?: string;
                                                        enforce_noncompete_agreement?: boolean;
                                                        noncompete_agreement_id?: string;
                                                        noncompete_agreement_company?: string;
                                                        noncompete_agreement_start_date?: string;
                                                        noncompete_agreement_end_date?: string;
                                                        sign_type?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        signature_file?: string;
                                                        last_attendance_date?: string;
                                                        is_transfer_with_workforce?: boolean;
                                                    };
                                                    offboarding_checklist?: {
                                                        checklist_status?: string;
                                                        checklist_start_time?: string;
                                                        checklist_finish_time?: string;
                                                        checklist_process_id?: string;
                                                    };
                                                    offboarding_id?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        }
                                    )?.data || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=offboarding&apiName=search&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=offboarding&version=v1 document }
             *
             * 根据 雇佣 ID 查询员工离职信息
             */
            search: async (
                payload?: {
                    data?: {
                        employment_ids?: Array<string>;
                        apply_initiating_time_start?: string;
                        apply_initiating_time_end?: string;
                        apply_finished_time_start?: string;
                        apply_finished_time_end?: string;
                        expected_offboarding_date_start?: string;
                        expected_offboarding_date_end?: string;
                        offboarding_date_start?: string;
                        offboarding_date_end?: string;
                        statuses?: Array<
                            | "Approving"
                            | "Approved"
                            | "Offboarded"
                            | "Rejected"
                            | "Withdrawn"
                            | "NoNeedApproval"
                        >;
                        reasons?: Array<string>;
                        employee_reasons?: Array<string>;
                    };
                    params: {
                        page_size: number;
                        page_token?: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    initiating_type?: string;
                                    status?:
                                        | "Approving"
                                        | "Approved"
                                        | "Offboarded"
                                        | "Rejected"
                                        | "Withdrawn"
                                        | "NoNeedApproval";
                                    application_info?: {
                                        apply_initiator_id?: string;
                                        apply_initiating_time?: string;
                                        apply_finish_time?: string;
                                        process_id?: string;
                                    };
                                    offboarding_info?: {
                                        employment_id?: string;
                                        hrbp_id?: Array<string>;
                                        expected_offboarding_date?: string;
                                        offboarding_date?: string;
                                        reason?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        reason_explanation?: string;
                                        employee_reason?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        employee_reason_explanation?: string;
                                        add_block_list?: string;
                                        block_reason?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        block_reason_explanation?: string;
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                        retain_account?: boolean;
                                        social_insurance_end_date?: string;
                                        provident_fund_end_date?: string;
                                        enforce_noncompete_agreement?: boolean;
                                        noncompete_agreement_id?: string;
                                        noncompete_agreement_company?: string;
                                        noncompete_agreement_start_date?: string;
                                        noncompete_agreement_end_date?: string;
                                        sign_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        signature_file?: string;
                                        last_attendance_date?: string;
                                        is_transfer_with_workforce?: boolean;
                                    };
                                    offboarding_checklist?: {
                                        checklist_status?: string;
                                        checklist_start_time?: string;
                                        checklist_finish_time?: string;
                                        checklist_process_id?: string;
                                    };
                                    offboarding_id?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/offboardings/search`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=offboarding&apiName=submit&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/offboarding/submit document }
             *
             * 操作员工离职
             *
             * 操作员工直接离职
             */
            submit: async (
                payload?: {
                    data: {
                        offboarding_mode: number;
                        employment_id: string;
                        offboarding_date: string;
                        offboarding_reason_unique_identifier: string;
                        offboarding_reason_explanation?: string;
                        initiator_id?: string;
                        add_block_list?: boolean;
                        block_reason?: string;
                        block_reason_explanation?: string;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                    };
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                offboarding_id?: string;
                                employment_id?: string;
                                offboarding_reason_unique_identifier?: string;
                                offboarding_date?: string;
                                offboarding_reason_explanation?: string;
                                add_block_list?: boolean;
                                block_reason?: string;
                                block_reason_explanation?: string;
                                created_time?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/offboardings/submit`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 个人信息
         */
        person: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=person&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/person/create document }
             *
             * 创建个人信息
             *
             * 创建人员的个人信息
             */
            create: async (
                payload?: {
                    data: {
                        name_list: Array<{
                            local_primary?: string;
                            local_first_name?: string;
                            country_region_id: string;
                            name_type: { enum_name: string };
                            local_first_name_2?: string;
                            local_primary_2?: string;
                            additional_name_type?: { enum_name: string };
                            first_name?: string;
                            full_name?: string;
                            hereditary?: string;
                            custom_name?: string;
                            custom_local_name?: string;
                            middle_name?: string;
                            name_primary?: string;
                            secondary?: string;
                            social?: { enum_name: string };
                            tertiary?: string;
                            title?: { enum_name: string };
                            local_middle_name?: string;
                            local_secondary?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        }>;
                        gender?: { enum_name: string };
                        date_of_birth?: string;
                        nationality_id?: string;
                        race?: { enum_name: string };
                        marital_status?: { enum_name: string };
                        phone_list?: Array<{
                            international_area_code?: { enum_name: string };
                            phone_number: string;
                            device_type?: { enum_name: string };
                            phone_usage?: { enum_name: string };
                            is_primary?: boolean;
                            is_public?: boolean;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        }>;
                        address_list?: Array<{
                            country_region_id: string;
                            region_id?: string;
                            city_id?: string;
                            distinct_id?: string;
                            address_line1?: string;
                            address_line2?: string;
                            address_line3?: string;
                            address_line4?: string;
                            address_line5?: string;
                            address_line6?: string;
                            address_line7?: string;
                            address_line8?: string;
                            address_line9?: string;
                            local_address_line1?: string;
                            local_address_line2?: string;
                            local_address_line3?: string;
                            local_address_line4?: string;
                            local_address_line5?: string;
                            local_address_line6?: string;
                            local_address_line7?: string;
                            local_address_line8?: string;
                            local_address_line9?: string;
                            postal_code?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        }>;
                        email_list?: Array<{
                            email: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        }>;
                        work_experience_list?: Array<{
                            company_organization?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            department?: Array<{ lang: string; value: string }>;
                            job?: Array<{ lang: string; value: string }>;
                            description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            start_date?: string;
                            end_date?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        }>;
                        education_list?: Array<{
                            school: Array<{ lang: string; value: string }>;
                            level_of_education?: { enum_name: string };
                            start_date?: string;
                            end_date?: string;
                            field_of_study?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            degree?: { enum_name: string };
                            school_name?: { enum_name: string };
                            field_of_study_name?: { enum_name: string };
                            country_region_id?: string;
                            expected_end_date?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        }>;
                        bank_account_list?: Array<{
                            bank_name?: string;
                            bank_account_number: string;
                            account_holder: string;
                            bank?: { enum_name: string };
                            bank_identification_code?: string;
                            branch_name?: string;
                            bank_id?: string;
                            branch_id?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            country_region_id?: string;
                            bank_account_usage?: Array<{ enum_name: string }>;
                            bank_account_type?: { enum_name: string };
                            currency_id?: string;
                        }>;
                        national_id_list?: Array<{
                            national_id_type_id: string;
                            national_id_number: string;
                            issue_date?: string;
                            expiration_date?: string;
                            country_region_id: string;
                            issued_by?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        }>;
                        dependent_list?: Array<{
                            name?: {
                                local_primary?: string;
                                local_first_name?: string;
                                country_region_id: string;
                                name_type: { enum_name: string };
                                local_first_name_2?: string;
                                local_primary_2?: string;
                                additional_name_type?: { enum_name: string };
                                first_name?: string;
                                full_name?: string;
                                hereditary?: string;
                                custom_name?: string;
                                custom_local_name?: string;
                                middle_name?: string;
                                name_primary?: string;
                                secondary?: string;
                                social?: { enum_name: string };
                                tertiary?: string;
                                title?: { enum_name: string };
                                local_middle_name?: string;
                                local_secondary?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            };
                            relationship: { enum_name: string };
                            gender?: { enum_name: string };
                            date_of_birth?: string;
                            nationality_id?: string;
                            national_id_list?: Array<{
                                national_id_type_id: string;
                                national_id_number: string;
                                issue_date?: string;
                                expiration_date?: string;
                                country_region_id: string;
                                issued_by?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            spouses_working_status?: { enum_name: string };
                            is_this_person_covered_by_health_insurance?: boolean;
                            is_this_person_allowed_for_tax_deduction?: boolean;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            dependent_name?: string;
                            employer?: string;
                            job?: string;
                            phone?: {
                                international_area_code?: { enum_name: string };
                                phone_number: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            };
                            address?: {
                                id?: string;
                                country_region_id: string;
                                region_id?: string;
                                city_id?: string;
                                distinct_id?: string;
                                address_line1?: string;
                                address_line2?: string;
                                address_line3?: string;
                                address_line4?: string;
                                address_line5?: string;
                                address_line6?: string;
                                address_line7?: string;
                                address_line8?: string;
                                address_line9?: string;
                                local_address_line1?: string;
                                local_address_line2?: string;
                                local_address_line3?: string;
                                local_address_line4?: string;
                                local_address_line5?: string;
                                local_address_line6?: string;
                                local_address_line7?: string;
                                local_address_line8?: string;
                                local_address_line9?: string;
                                postal_code?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            };
                            birth_certificate_of_child?: Array<{ id?: string }>;
                        }>;
                        emergency_contact_list?: Array<{
                            name?: {
                                local_primary?: string;
                                local_first_name?: string;
                                country_region_id: string;
                                name_type: { enum_name: string };
                                local_first_name_2?: string;
                                local_primary_2?: string;
                                additional_name_type?: { enum_name: string };
                                first_name?: string;
                                full_name?: string;
                                hereditary?: string;
                                custom_name?: string;
                                custom_local_name?: string;
                                middle_name?: string;
                                name_primary?: string;
                                secondary?: string;
                                social?: { enum_name: string };
                                tertiary?: string;
                                title?: { enum_name: string };
                                local_middle_name?: string;
                                local_secondary?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            };
                            relationship?: { enum_name: string };
                            phone_ist?: Array<{
                                international_area_code?: { enum_name: string };
                                phone_number: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            legal_name?: string;
                        }>;
                        date_entered_workforce?: string;
                        profile_image_id?: string;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                        resident_tax_id_list?: Array<string>;
                        age?: number;
                        personal_profile?: Array<{
                            personal_profile_type?: { enum_name: string };
                            files?: Array<{ id?: string }>;
                        }>;
                    };
                    params?: { client_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                person?: {
                                    phone_number?: string;
                                    legal_name?: string;
                                    preferred_name?: string;
                                    id?: string;
                                    name_list: Array<{
                                        local_primary?: string;
                                        local_first_name?: string;
                                        country_region_id: string;
                                        name_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        local_first_name_2?: string;
                                        local_primary_2?: string;
                                        additional_name_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        first_name?: string;
                                        full_name?: string;
                                        hereditary?: string;
                                        middle_name?: string;
                                        name_primary?: string;
                                        secondary?: string;
                                        social?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        tertiary?: string;
                                        title?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        local_middle_name?: string;
                                        local_secondary?: string;
                                        display_name_local_and_western_script?: string;
                                        display_name_local_script?: string;
                                        display_name_western_script?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    gender?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    date_of_birth?: string;
                                    nationality_id?: string;
                                    race?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    marital_status?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    phone_list?: Array<{
                                        international_area_code?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_number: string;
                                        formatted_phone_number?: string;
                                        device_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_usage?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        is_primary?: boolean;
                                        is_public?: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    address_list?: Array<{
                                        full_address_local_script?: string;
                                        full_address_western_script?: string;
                                        id?: string;
                                        country_region_id: string;
                                        region_id?: string;
                                        city_id?: string;
                                        distinct_id?: string;
                                        address_line1?: string;
                                        address_line2?: string;
                                        address_line3?: string;
                                        address_line4?: string;
                                        address_line5?: string;
                                        address_line6?: string;
                                        address_line7?: string;
                                        address_line8?: string;
                                        address_line9?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    email_list?: Array<{
                                        email: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    work_experience_list?: Array<{
                                        company_organization?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        department?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        job?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        start_date?: string;
                                        end_date?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    education_list?: Array<{
                                        school: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        level_of_education?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        start_date?: string;
                                        end_date?: string;
                                        field_of_study?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        degree?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        school_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        field_of_study_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        country_region_id?: string;
                                        expected_end_date?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    bank_account_list?: Array<{
                                        bank_name?: string;
                                        bank_account_number: string;
                                        account_holder: string;
                                        bank?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        bank_identification_code?: string;
                                        branch_name?: string;
                                        bank_id?: string;
                                        branch_id?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        country_region_id?: string;
                                        bank_account_usage?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        bank_account_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        currency_id?: string;
                                    }>;
                                    national_id_list?: Array<{
                                        national_id_type_id: string;
                                        national_id_number: string;
                                        issue_date?: string;
                                        expiration_date?: string;
                                        country_region_id: string;
                                        issued_by?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    dependent_list?: Array<{
                                        name?: {
                                            local_primary?: string;
                                            local_first_name?: string;
                                            country_region_id: string;
                                            name_type: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_first_name_2?: string;
                                            local_primary_2?: string;
                                            additional_name_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            first_name?: string;
                                            full_name?: string;
                                            hereditary?: string;
                                            custom_name?: string;
                                            custom_local_name?: string;
                                            middle_name?: string;
                                            name_primary?: string;
                                            secondary?: string;
                                            social?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            tertiary?: string;
                                            title?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_middle_name?: string;
                                            local_secondary?: string;
                                            display_name_local_and_western_script?: string;
                                            display_name_local_script?: string;
                                            display_name_western_script?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        relationship: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        gender?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        date_of_birth?: string;
                                        nationality_id?: string;
                                        national_id_list?: Array<{
                                            national_id_type_id: string;
                                            national_id_number: string;
                                            issue_date?: string;
                                            expiration_date?: string;
                                            country_region_id: string;
                                            issued_by?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        spouses_working_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        is_this_person_covered_by_health_insurance?: boolean;
                                        is_this_person_allowed_for_tax_deduction?: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        dependent_name?: string;
                                        employer?: string;
                                        job?: string;
                                        phone?: {
                                            international_area_code?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                            formatted_phone_number?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        address?: {
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        birth_certificate_of_child?: Array<{
                                            id?: string;
                                        }>;
                                    }>;
                                    emergency_contact_list?: Array<{
                                        name?: {
                                            local_primary?: string;
                                            local_first_name?: string;
                                            country_region_id: string;
                                            name_type: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_first_name_2?: string;
                                            local_primary_2?: string;
                                            additional_name_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            first_name?: string;
                                            full_name?: string;
                                            hereditary?: string;
                                            custom_name?: string;
                                            custom_local_name?: string;
                                            middle_name?: string;
                                            name_primary?: string;
                                            secondary?: string;
                                            social?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            tertiary?: string;
                                            title?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_middle_name?: string;
                                            local_secondary?: string;
                                            display_name_local_and_western_script?: string;
                                            display_name_local_script?: string;
                                            display_name_western_script?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        relationship?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_ist?: Array<{
                                            international_area_code?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        legal_name?: string;
                                    }>;
                                    date_entered_workforce?: string;
                                    profile_image_id?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    email_address?: string;
                                    resident_tax_id_list?: Array<string>;
                                    age?: number;
                                    highest_level_of_education?: {
                                        school: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        level_of_education?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        start_date?: string;
                                        end_date?: string;
                                        field_of_study?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        degree?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        school_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        field_of_study_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        country_region_id?: string;
                                        expected_end_date?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                    highest_degree_of_education?: {
                                        school: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        level_of_education?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        start_date?: string;
                                        end_date?: string;
                                        field_of_study?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        degree?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        school_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        field_of_study_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        country_region_id?: string;
                                        expected_end_date?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                    personal_profile?: Array<{
                                        personal_profile_id?: string;
                                        personal_profile_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        files?: Array<{ id?: string }>;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/persons`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=person&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/person/delete document }
             *
             * 删除个人信息
             *
             * 删除人员的个人信息
             */
            delete: async (
                payload?: {
                    path: { person_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/persons/:person_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=person&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/person/get document }
             *
             * 查询单个个人信息
             *
             * 根据 ID 查询单个人员的个人信息
             */
            get: async (
                payload?: {
                    params?: { user_id_type?: "people_employee_id" };
                    path: { person_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                person?: {
                                    phone_number?: string;
                                    legal_name?: string;
                                    preferred_name?: string;
                                    id?: string;
                                    name_list: Array<{
                                        local_primary?: string;
                                        local_first_name?: string;
                                        country_region_id: string;
                                        name_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        local_first_name_2?: string;
                                        local_primary_2?: string;
                                        additional_name_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        first_name?: string;
                                        full_name?: string;
                                        hereditary?: string;
                                        middle_name?: string;
                                        name_primary?: string;
                                        secondary?: string;
                                        social?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        tertiary?: string;
                                        title?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        local_middle_name?: string;
                                        local_secondary?: string;
                                        display_name_local_and_western_script?: string;
                                        display_name_local_script?: string;
                                        display_name_western_script?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    gender?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    date_of_birth?: string;
                                    nationality_id?: string;
                                    nationality_id_v2?: string;
                                    race?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    marital_status?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    phone_list?: Array<{
                                        international_area_code?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_number: string;
                                        formatted_phone_number?: string;
                                        device_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_usage?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        is_primary?: boolean;
                                        is_public?: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    address_list?: Array<{
                                        full_address_local_script?: string;
                                        full_address_western_script?: string;
                                        id?: string;
                                        country_region_id: string;
                                        region_id?: string;
                                        city_id?: string;
                                        distinct_id?: string;
                                        city_id_v2?: string;
                                        district_id_v2?: string;
                                        address_line1?: string;
                                        address_line2?: string;
                                        address_line3?: string;
                                        address_line4?: string;
                                        address_line5?: string;
                                        address_line6?: string;
                                        address_line7?: string;
                                        address_line8?: string;
                                        address_line9?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                        address_type_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        is_primary?: boolean;
                                        is_public?: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    email_list?: Array<{
                                        email: string;
                                        is_primary?: boolean;
                                        is_public?: boolean;
                                        email_usage?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    work_experience_list?: Array<{
                                        company_organization?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        department?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        job?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        start_date?: string;
                                        end_date?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    education_list?: Array<{
                                        school: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        level_of_education?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        start_date?: string;
                                        end_date?: string;
                                        field_of_study?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        degree?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        school_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        field_of_study_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        country_region_id?: string;
                                        expected_end_date?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    bank_account_list?: Array<{
                                        bank_name?: string;
                                        bank_account_number: string;
                                        account_holder: string;
                                        bank?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        bank_identification_code?: string;
                                        branch_name?: string;
                                        bank_id?: string;
                                        branch_id?: string;
                                        bank_id_v2?: string;
                                        branch_id_v2?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        country_region_id?: string;
                                        bank_account_usage?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        bank_account_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        currency_id?: string;
                                    }>;
                                    national_id_list?: Array<{
                                        national_id_type_id: string;
                                        national_id_number: string;
                                        issue_date?: string;
                                        expiration_date?: string;
                                        country_region_id: string;
                                        issued_by?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    dependent_list?: Array<{
                                        name?: {
                                            local_primary?: string;
                                            local_first_name?: string;
                                            country_region_id: string;
                                            name_type: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_first_name_2?: string;
                                            local_primary_2?: string;
                                            additional_name_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            first_name?: string;
                                            full_name?: string;
                                            hereditary?: string;
                                            custom_name?: string;
                                            custom_local_name?: string;
                                            middle_name?: string;
                                            name_primary?: string;
                                            secondary?: string;
                                            social?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            tertiary?: string;
                                            title?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_middle_name?: string;
                                            local_secondary?: string;
                                            display_name_local_and_western_script?: string;
                                            display_name_local_script?: string;
                                            display_name_western_script?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        relationship: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        gender?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        date_of_birth?: string;
                                        nationality_id?: string;
                                        nationality_id_v2?: string;
                                        national_id_list?: Array<{
                                            national_id_type_id: string;
                                            national_id_number: string;
                                            issue_date?: string;
                                            expiration_date?: string;
                                            country_region_id: string;
                                            issued_by?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        spouses_working_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        is_this_person_covered_by_health_insurance?: boolean;
                                        is_this_person_allowed_for_tax_deduction?: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        dependent_name?: string;
                                        employer?: string;
                                        job?: string;
                                        phone?: {
                                            international_area_code?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                            formatted_phone_number?: string;
                                            device_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_usage?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        address?: {
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            city_id_v2?: string;
                                            district_id_v2?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            address_type_list?: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        birth_certificate_of_child?: Array<{
                                            id?: string;
                                        }>;
                                    }>;
                                    emergency_contact_list?: Array<{
                                        name?: {
                                            local_primary?: string;
                                            local_first_name?: string;
                                            country_region_id: string;
                                            name_type: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_first_name_2?: string;
                                            local_primary_2?: string;
                                            additional_name_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            first_name?: string;
                                            full_name?: string;
                                            hereditary?: string;
                                            custom_name?: string;
                                            custom_local_name?: string;
                                            middle_name?: string;
                                            name_primary?: string;
                                            secondary?: string;
                                            social?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            tertiary?: string;
                                            title?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_middle_name?: string;
                                            local_secondary?: string;
                                            display_name_local_and_western_script?: string;
                                            display_name_local_script?: string;
                                            display_name_western_script?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        relationship?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_ist?: Array<{
                                            international_area_code?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                            formatted_phone_number?: string;
                                            device_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_usage?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        legal_name?: string;
                                    }>;
                                    date_entered_workforce?: string;
                                    profile_image_id?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    email_address?: string;
                                    resident_tax_id_list?: Array<string>;
                                    age?: number;
                                    highest_level_of_education?: {
                                        school: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        level_of_education?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        start_date?: string;
                                        end_date?: string;
                                        field_of_study?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        degree?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        school_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        field_of_study_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        country_region_id?: string;
                                        expected_end_date?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                    highest_degree_of_education?: {
                                        school: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        level_of_education?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        start_date?: string;
                                        end_date?: string;
                                        field_of_study?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        degree?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        school_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        field_of_study_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        country_region_id?: string;
                                        expected_end_date?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                    personal_profile?: Array<{
                                        personal_profile_id?: string;
                                        personal_profile_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        files?: Array<{ id?: string }>;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/persons/:person_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=person&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/person/patch document }
             *
             * 更新个人信息
             *
             * 更新个人信息
             */
            patch: async (
                payload?: {
                    data?: {
                        name_list?: Array<{
                            local_primary?: string;
                            local_first_name?: string;
                            country_region_id: string;
                            name_type: { enum_name: string };
                            local_first_name_2?: string;
                            local_primary_2?: string;
                            additional_name_type?: { enum_name: string };
                            first_name?: string;
                            full_name?: string;
                            hereditary?: string;
                            custom_name?: string;
                            custom_local_name?: string;
                            middle_name?: string;
                            name_primary?: string;
                            secondary?: string;
                            social?: { enum_name: string };
                            tertiary?: string;
                            title?: { enum_name: string };
                            local_middle_name?: string;
                            local_secondary?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        }>;
                        gender?: { enum_name: string };
                        date_of_birth?: string;
                        nationality_id?: string;
                        race?: { enum_name: string };
                        marital_status?: { enum_name: string };
                        phone_list?: Array<{
                            international_area_code?: { enum_name: string };
                            phone_number: string;
                            device_type?: { enum_name: string };
                            phone_usage?: { enum_name: string };
                            is_primary?: boolean;
                            is_public?: boolean;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        }>;
                        address_list?: Array<{
                            country_region_id: string;
                            region_id?: string;
                            city_id?: string;
                            distinct_id?: string;
                            address_line1?: string;
                            address_line2?: string;
                            address_line3?: string;
                            address_line4?: string;
                            address_line5?: string;
                            address_line6?: string;
                            address_line7?: string;
                            address_line8?: string;
                            address_line9?: string;
                            local_address_line1?: string;
                            local_address_line2?: string;
                            local_address_line3?: string;
                            local_address_line4?: string;
                            local_address_line5?: string;
                            local_address_line6?: string;
                            local_address_line7?: string;
                            local_address_line8?: string;
                            local_address_line9?: string;
                            postal_code?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        }>;
                        email_list?: Array<{
                            email: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        }>;
                        work_experience_list?: Array<{
                            company_organization?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            department?: Array<{ lang: string; value: string }>;
                            job?: Array<{ lang: string; value: string }>;
                            description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            start_date?: string;
                            end_date?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        }>;
                        education_list?: Array<{
                            school: Array<{ lang: string; value: string }>;
                            level_of_education?: { enum_name: string };
                            start_date?: string;
                            end_date?: string;
                            field_of_study?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            degree?: { enum_name: string };
                            school_name?: { enum_name: string };
                            field_of_study_name?: { enum_name: string };
                            country_region_id?: string;
                            expected_end_date?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        }>;
                        bank_account_list?: Array<{
                            bank_name?: string;
                            bank_account_number: string;
                            account_holder: string;
                            bank?: { enum_name: string };
                            bank_identification_code?: string;
                            branch_name?: string;
                            bank_id?: string;
                            branch_id?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            country_region_id?: string;
                            bank_account_usage?: Array<{ enum_name: string }>;
                            bank_account_type?: { enum_name: string };
                            currency_id?: string;
                        }>;
                        national_id_list?: Array<{
                            national_id_type_id: string;
                            national_id_number: string;
                            issue_date?: string;
                            expiration_date?: string;
                            country_region_id: string;
                            issued_by?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        }>;
                        dependent_list?: Array<{
                            name?: {
                                local_primary?: string;
                                local_first_name?: string;
                                country_region_id: string;
                                name_type: { enum_name: string };
                                local_first_name_2?: string;
                                local_primary_2?: string;
                                additional_name_type?: { enum_name: string };
                                first_name?: string;
                                full_name?: string;
                                hereditary?: string;
                                custom_name?: string;
                                custom_local_name?: string;
                                middle_name?: string;
                                name_primary?: string;
                                secondary?: string;
                                social?: { enum_name: string };
                                tertiary?: string;
                                title?: { enum_name: string };
                                local_middle_name?: string;
                                local_secondary?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            };
                            relationship: { enum_name: string };
                            gender?: { enum_name: string };
                            date_of_birth?: string;
                            nationality_id?: string;
                            national_id_list?: Array<{
                                national_id_type_id: string;
                                national_id_number: string;
                                issue_date?: string;
                                expiration_date?: string;
                                country_region_id: string;
                                issued_by?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            spouses_working_status?: { enum_name: string };
                            is_this_person_covered_by_health_insurance?: boolean;
                            is_this_person_allowed_for_tax_deduction?: boolean;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            dependent_name?: string;
                            employer?: string;
                            job?: string;
                            phone?: {
                                international_area_code?: { enum_name: string };
                                phone_number: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            };
                            address?: {
                                id?: string;
                                country_region_id: string;
                                region_id?: string;
                                city_id?: string;
                                distinct_id?: string;
                                address_line1?: string;
                                address_line2?: string;
                                address_line3?: string;
                                address_line4?: string;
                                address_line5?: string;
                                address_line6?: string;
                                address_line7?: string;
                                address_line8?: string;
                                address_line9?: string;
                                local_address_line1?: string;
                                local_address_line2?: string;
                                local_address_line3?: string;
                                local_address_line4?: string;
                                local_address_line5?: string;
                                local_address_line6?: string;
                                local_address_line7?: string;
                                local_address_line8?: string;
                                local_address_line9?: string;
                                postal_code?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            };
                            birth_certificate_of_child?: Array<{ id?: string }>;
                        }>;
                        emergency_contact_list?: Array<{
                            name?: {
                                local_primary?: string;
                                local_first_name?: string;
                                country_region_id: string;
                                name_type: { enum_name: string };
                                local_first_name_2?: string;
                                local_primary_2?: string;
                                additional_name_type?: { enum_name: string };
                                first_name?: string;
                                full_name?: string;
                                hereditary?: string;
                                custom_name?: string;
                                custom_local_name?: string;
                                middle_name?: string;
                                name_primary?: string;
                                secondary?: string;
                                social?: { enum_name: string };
                                tertiary?: string;
                                title?: { enum_name: string };
                                local_middle_name?: string;
                                local_secondary?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            };
                            relationship?: { enum_name: string };
                            phone_ist?: Array<{
                                international_area_code?: { enum_name: string };
                                phone_number: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            legal_name?: string;
                        }>;
                        date_entered_workforce?: string;
                        profile_image_id?: string;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                        resident_tax_id_list?: Array<string>;
                        age?: number;
                        personal_profile?: Array<{
                            personal_profile_type?: { enum_name: string };
                            files?: Array<{ id?: string }>;
                        }>;
                    };
                    params?: { client_token?: string };
                    path: { person_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                person?: {
                                    phone_number?: string;
                                    legal_name?: string;
                                    preferred_name?: string;
                                    id?: string;
                                    name_list: Array<{
                                        local_primary?: string;
                                        local_first_name?: string;
                                        country_region_id: string;
                                        name_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        local_first_name_2?: string;
                                        local_primary_2?: string;
                                        additional_name_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        first_name?: string;
                                        full_name?: string;
                                        hereditary?: string;
                                        middle_name?: string;
                                        name_primary?: string;
                                        secondary?: string;
                                        social?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        tertiary?: string;
                                        title?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        local_middle_name?: string;
                                        local_secondary?: string;
                                        display_name_local_and_western_script?: string;
                                        display_name_local_script?: string;
                                        display_name_western_script?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    gender?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    date_of_birth?: string;
                                    nationality_id?: string;
                                    race?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    marital_status?: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    phone_list?: Array<{
                                        international_area_code?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_number: string;
                                        formatted_phone_number?: string;
                                        device_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_usage?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        is_primary?: boolean;
                                        is_public?: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    address_list?: Array<{
                                        full_address_local_script?: string;
                                        full_address_western_script?: string;
                                        id?: string;
                                        country_region_id: string;
                                        region_id?: string;
                                        city_id?: string;
                                        distinct_id?: string;
                                        address_line1?: string;
                                        address_line2?: string;
                                        address_line3?: string;
                                        address_line4?: string;
                                        address_line5?: string;
                                        address_line6?: string;
                                        address_line7?: string;
                                        address_line8?: string;
                                        address_line9?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    email_list?: Array<{
                                        email: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    work_experience_list?: Array<{
                                        company_organization?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        department?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        job?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        start_date?: string;
                                        end_date?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    education_list?: Array<{
                                        school: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        level_of_education?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        start_date?: string;
                                        end_date?: string;
                                        field_of_study?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        degree?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        school_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        field_of_study_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        country_region_id?: string;
                                        expected_end_date?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    bank_account_list?: Array<{
                                        bank_name?: string;
                                        bank_account_number: string;
                                        account_holder: string;
                                        bank?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        bank_identification_code?: string;
                                        branch_name?: string;
                                        bank_id?: string;
                                        branch_id?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        country_region_id?: string;
                                        bank_account_usage?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        bank_account_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        currency_id?: string;
                                    }>;
                                    national_id_list?: Array<{
                                        national_id_type_id: string;
                                        national_id_number: string;
                                        issue_date?: string;
                                        expiration_date?: string;
                                        country_region_id: string;
                                        issued_by?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    dependent_list?: Array<{
                                        name?: {
                                            local_primary?: string;
                                            local_first_name?: string;
                                            country_region_id: string;
                                            name_type: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_first_name_2?: string;
                                            local_primary_2?: string;
                                            additional_name_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            first_name?: string;
                                            full_name?: string;
                                            hereditary?: string;
                                            custom_name?: string;
                                            custom_local_name?: string;
                                            middle_name?: string;
                                            name_primary?: string;
                                            secondary?: string;
                                            social?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            tertiary?: string;
                                            title?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_middle_name?: string;
                                            local_secondary?: string;
                                            display_name_local_and_western_script?: string;
                                            display_name_local_script?: string;
                                            display_name_western_script?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        relationship: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        gender?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        date_of_birth?: string;
                                        nationality_id?: string;
                                        national_id_list?: Array<{
                                            national_id_type_id: string;
                                            national_id_number: string;
                                            issue_date?: string;
                                            expiration_date?: string;
                                            country_region_id: string;
                                            issued_by?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        spouses_working_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        is_this_person_covered_by_health_insurance?: boolean;
                                        is_this_person_allowed_for_tax_deduction?: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        dependent_name?: string;
                                        employer?: string;
                                        job?: string;
                                        phone?: {
                                            international_area_code?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                            formatted_phone_number?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        address?: {
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        birth_certificate_of_child?: Array<{
                                            id?: string;
                                        }>;
                                    }>;
                                    emergency_contact_list?: Array<{
                                        name?: {
                                            local_primary?: string;
                                            local_first_name?: string;
                                            country_region_id: string;
                                            name_type: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_first_name_2?: string;
                                            local_primary_2?: string;
                                            additional_name_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            first_name?: string;
                                            full_name?: string;
                                            hereditary?: string;
                                            custom_name?: string;
                                            custom_local_name?: string;
                                            middle_name?: string;
                                            name_primary?: string;
                                            secondary?: string;
                                            social?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            tertiary?: string;
                                            title?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_middle_name?: string;
                                            local_secondary?: string;
                                            display_name_local_and_western_script?: string;
                                            display_name_local_script?: string;
                                            display_name_western_script?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        relationship?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_ist?: Array<{
                                            international_area_code?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                            formatted_phone_number?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        legal_name?: string;
                                    }>;
                                    date_entered_workforce?: string;
                                    profile_image_id?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    email_address?: string;
                                    resident_tax_id_list?: Array<string>;
                                    age?: number;
                                    highest_level_of_education?: {
                                        school: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        level_of_education?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        start_date?: string;
                                        end_date?: string;
                                        field_of_study?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        degree?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        school_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        field_of_study_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        country_region_id?: string;
                                        expected_end_date?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                    highest_degree_of_education?: {
                                        school: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        level_of_education?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        start_date?: string;
                                        end_date?: string;
                                        field_of_study?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        degree?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        school_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        field_of_study_name?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        country_region_id?: string;
                                        expected_end_date?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                    personal_profile?: Array<{
                                        personal_profile_id?: string;
                                        personal_profile_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        files?: Array<{ id?: string }>;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/persons/:person_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=person&apiName=upload&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/person/upload document }
             *
             * 上传文件
             *
             * 上传文件
             */
            upload: async (
                payload?: {
                    data: {
                        file_content: Buffer | fs.ReadStream;
                        file_name: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<
                        any,
                        { code?: number; msg?: string; data?: { id?: string } }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/persons/upload`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                return res?.data || null;
            },
        },
        /**
         * 待入职
         */
        preHire: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/pre_hire/delete document }
             *
             * 删除待入职人员
             *
             * 删除待入职人员
             */
            delete: async (
                payload?: {
                    path: { pre_hire_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/pre_hires/:pre_hire_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/pre_hire/get document }
             *
             * 查询单个待入职人员
             *
             * 根据 ID 查询单个待入职人员
             */
            get: async (
                payload?: {
                    path: { pre_hire_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                pre_hire?: {
                                    ats_application_id?: string;
                                    id?: string;
                                    hire_date?: string;
                                    employee_type: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    worker_id?: string;
                                    employee_type_id: string;
                                    person_id: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    cost_center_rate?: Array<{
                                        cost_center_id?: string;
                                        rate?: number;
                                    }>;
                                    onboarding_status: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/pre_hires/:pre_hire_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/pre_hire/list document }
             *
             * 批量查询待入职人员
             *
             * 批量查询待入职人员
             */
            list: async (
                payload?: {
                    params: {
                        page_token?: string;
                        page_size: string;
                        pre_hire_ids?: Array<string>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    ats_application_id?: string;
                                    id?: string;
                                    hire_date?: string;
                                    employee_type: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    worker_id?: string;
                                    employee_type_id: string;
                                    person_id: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    onboarding_status: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    cost_center_rate?: Array<{
                                        cost_center_id?: string;
                                        rate?: number;
                                    }>;
                                    work_email_list?: Array<{
                                        email: string;
                                        is_primary?: boolean;
                                        is_public?: boolean;
                                        email_usage?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    department_id?: string;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/pre_hires`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/pre_hire/patch document }
             *
             * 更新待入职数据
             *
             * 更新待入职数据
             */
            patch: async (
                payload?: {
                    data: {
                        ats_application_id?: string;
                        hire_date?: string;
                        employee_type?: { enum_name: string };
                        worker_id?: string;
                        employee_type_id?: string;
                        person_id?: string;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                        cost_center_rate?: Array<{
                            cost_center_id?: string;
                            rate?: number;
                        }>;
                        onboarding_status: { enum_name: string };
                    };
                    params?: { client_token?: string };
                    path: { pre_hire_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                pre_hire?: {
                                    ats_application_id?: string;
                                    id?: string;
                                    hire_date?: string;
                                    employee_type: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                    worker_id?: string;
                                    employee_type_id: string;
                                    person_id: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                    cost_center_rate?: Array<{
                                        cost_center_id?: string;
                                        rate?: number;
                                    }>;
                                    onboarding_status: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/pre_hires/:pre_hire_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 流程管理
         */
        processFormVariableData: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=process.form_variable_data&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/process-form_variable_data/get document }
             *
             * 获取流程表单数据
             *
             * 获取流程表单数据
             */
            get: async (
                payload?: {
                    path: { process_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                field_variable_values?: Array<{
                                    variable_api_name?: string;
                                    variable_name?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                    };
                                    variable_value?: {
                                        text_value?: { value?: string };
                                        number_value?: { value?: string };
                                        date_value?: { value?: number };
                                        employment_value?: {
                                            value?: string;
                                            user_id?: string;
                                        };
                                        date_time_value?: {
                                            value?: number;
                                            zone?: string;
                                        };
                                        enum_value?: {
                                            value?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            desc?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                        };
                                        null_value?: {};
                                        bool_value?: { value?: boolean };
                                        department_value?: { value?: string };
                                        file_value?: {
                                            source_type?: number;
                                            file_id?: string;
                                            file_name?: string;
                                            length?: number;
                                            mime_type?: string;
                                        };
                                        i18n_value?: {
                                            value?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                        };
                                        object_value?: {
                                            value?: string;
                                            wk_api_name?: string;
                                        };
                                        list_value?: {
                                            values?: Array<{
                                                text_value?: { value?: string };
                                                number_value?: {
                                                    value?: string;
                                                };
                                                date_value?: { value?: number };
                                                employment_value?: {
                                                    value?: string;
                                                    user_id?: string;
                                                };
                                                date_time_value?: {
                                                    value?: number;
                                                    zone?: string;
                                                };
                                                enum_value?: {
                                                    value?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    desc?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                null_value?: {};
                                                bool_value?: {
                                                    value?: boolean;
                                                };
                                                department_value?: {
                                                    value?: string;
                                                };
                                                file_value?: {
                                                    source_type?: number;
                                                    file_id?: string;
                                                    file_name?: string;
                                                    length?: number;
                                                    mime_type?: string;
                                                };
                                                i18n_value?: {
                                                    value?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                object_value?: {
                                                    value?: string;
                                                    wk_api_name?: string;
                                                };
                                                record_value?: {
                                                    values?: {
                                                        country_region?: {
                                                            object_value?: {
                                                                value?: string;
                                                                wk_api_name?: string;
                                                            };
                                                        };
                                                    };
                                                };
                                            }>;
                                        };
                                        record_value?: {
                                            values?: {
                                                country_region?: {
                                                    object_value?: {
                                                        value?: string;
                                                        wk_api_name?: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/processes/:process_id/form_variable_data`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * security_group
         */
        securityGroup: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=security_group&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/security_group/list document }
             *
             * 批量获取角色列表
             *
             * 批量查询「飞书人事」-「权限设置」-「角色设置」中的角色列表
             */
            list: async (
                payload?: {
                    params: { page_token?: string; page_size: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id: string;
                                    code: string;
                                    name?: { zh_cn?: string; en_us?: string };
                                    active_status: number;
                                    description?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                    };
                                    group_type: number;
                                    created_by: string;
                                    update_time: string;
                                    org_truncation?: Array<{
                                        org_key?: string;
                                        type?: number;
                                        depth?: number;
                                    }>;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/security_groups`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=security_group&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/security_group/query document }
             *
             * HRBP/属地 BP 查询
             *
             * 通过部门或工作地点，查询对应的 HRBP/属地 BP
             */
            query: async (
                payload?: {
                    data: {
                        item_list: Array<{
                            role_key: string;
                            department_id: string;
                            work_location_id?: string;
                        }>;
                        updated_at_gte?: string;
                        updated_at_lte?: string;
                    };
                    params?: {
                        department_id_type?:
                            | "open_department_id"
                            | "department_id"
                            | "people_corehr_department_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                hrbp_list?: Array<{
                                    employment_id_list: Array<string>;
                                    department_id?: string;
                                    work_location_id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/security_groups/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 地理库信息
         */
        subdivision: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=subdivision&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/subdivision/get document }
             *
             * 查询单条省份/行政区信息
             *
             * 查询单条省份/行政区信息
             */
            get: async (
                payload?: {
                    path: { subdivision_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                subdivision?: {
                                    id: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    country_region_id: string;
                                    subdivision_type: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/subdivisions/:subdivision_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=subdivision&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/subdivision/list document }
             *
             * 批量查询省份/行政区信息
             *
             * 批量查询省份/行政区信息
             */
            list: async (
                payload?: {
                    params: {
                        page_token?: string;
                        page_size: string;
                        country_region_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    country_region_id: string;
                                    subdivision_type: {
                                        enum_name: string;
                                        display?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                    };
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/subdivisions`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 地理库信息
         */
        subregion: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=subregion&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/subregion/get document }
             *
             * 查询单条城市/区域信息
             *
             * 查询单条城市/区域信息
             */
            get: async (
                payload?: {
                    path: { subregion_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                subregion?: {
                                    id: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    subdivision_id: string;
                                    superior_subregion_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/subregions/:subregion_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=subregion&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/subregion/list document }
             *
             * 批量查询城市/区域信息
             *
             * 批量查询城市/区域信息
             */
            list: async (
                payload?: {
                    params: {
                        page_token?: string;
                        page_size: string;
                        subdivision_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    subdivision_id: string;
                                    superior_subregion_id?: string;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/subregions`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 异动原因
         */
        transferReason: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=transfer_reason&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/transfer_reason/query document }
             *
             * 获取异动原因列表
             *
             * 获取异动原因列表
             */
            query: async (
                payload?: {
                    params?: {
                        active?: boolean;
                        transfer_reason_unique_identifier?: Array<string>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    transfer_reason_unique_identifier?: string;
                                    name?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active?: boolean;
                                    parent_transfer_reason_unique_identifier?: string;
                                    created_time?: string;
                                    updated_time?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/transfer_reasons/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 异动类型
         */
        transferType: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=transfer_type&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/transfer_type/query document }
             *
             * 获取异动类型列表
             *
             * 获取异动类型列表
             */
            query: async (
                payload?: {
                    params?: {
                        active?: boolean;
                        transfer_type_unique_identifier?: Array<string>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    transfer_type_unique_identifier?: string;
                                    name?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    active?: boolean;
                                    flow_id?: string;
                                    flow_name?: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    created_time?: string;
                                    updated_time?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/transfer_types/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 工时制度
         */
        workingHoursType: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=working_hours_type&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/create document }
             *
             * 创建工时制度
             *
             * 创建工时制度
             */
            create: async (
                payload?: {
                    data: {
                        code?: string;
                        name: Array<{ lang: string; value: string }>;
                        country_region_id_list?: Array<string>;
                        default_for_job: boolean;
                        active: boolean;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                    };
                    params?: { client_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                working_hours_type?: {
                                    id?: string;
                                    code?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    country_region_id_list?: Array<string>;
                                    default_for_job: boolean;
                                    active: boolean;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/working_hours_types`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=working_hours_type&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/delete document }
             *
             * 删除工时制度
             *
             * 删除工时制度
             */
            delete: async (
                payload?: {
                    path: { working_hours_type_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/working_hours_types/:working_hours_type_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=working_hours_type&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/get document }
             *
             * 查询单个工时制度
             *
             * 根据 ID 查询单个工时制度
             */
            get: async (
                payload?: {
                    path: { working_hours_type_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                working_hours_type?: {
                                    id?: string;
                                    code?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    country_region_id_list?: Array<string>;
                                    default_for_job: boolean;
                                    active: boolean;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/working_hours_types/:working_hours_type_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=working_hours_type&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/list document }
             *
             * 批量查询工时制度
             *
             * 批量查询工时制度
             */
            list: async (
                payload?: {
                    params: { page_token?: string; page_size: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    code?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    country_region_id_list?: Array<string>;
                                    default_for_job: boolean;
                                    active: boolean;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/working_hours_types`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=working_hours_type&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/patch document }
             *
             * 更新工时制度
             *
             * 更新工时制度
             */
            patch: async (
                payload?: {
                    data?: {
                        code?: string;
                        name?: Array<{ lang: string; value: string }>;
                        country_region_id_list?: Array<string>;
                        default_for_job?: boolean;
                        active?: boolean;
                        custom_fields?: Array<{
                            field_name: string;
                            value: string;
                        }>;
                    };
                    params?: { client_token?: string };
                    path: { working_hours_type_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                working_hours_type?: {
                                    id?: string;
                                    code?: string;
                                    name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    country_region_id_list?: Array<string>;
                                    default_for_job: boolean;
                                    active: boolean;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/working_hours_types/:working_hours_type_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                        paramsSerializer: (params) =>
                            stringify(params, { arrayFormat: "repeat" }),
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        v1: {
            /**
             * assigned_user
             */
            assignedUser: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=assigned_user&apiName=search&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/assigned_user/search document }
                 *
                 * 获取组织类角色授权列表
                 *
                 * 查询组织类角色的授权信息
                 */
                search: async (
                    payload?: {
                        data: {
                            role_id: string;
                            management_scope_list: Array<{
                                management_dimension: string;
                                obj_id: string;
                            }>;
                            search_method: string;
                            page_token?: string;
                            page_size: string;
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        employment_id: string;
                                        management_scope_list?: Array<{
                                            management_dimension: string;
                                            obj_id: string;
                                        }>;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/assigned_users/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * authorization
             */
            authorization: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=authorization&apiName=add_role_assign&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=add_role_assign&project=corehr&resource=authorization&version=v1 document }
                 *
                 * 追加更新组织类授权
                 */
                addRoleAssign: async (
                    payload?: {
                        data: {
                            assigned_organization_items: Array<
                                Array<{
                                    org_key: string;
                                    org_ids?: Array<string>;
                                    org_codes?: Array<string>;
                                }>
                            >;
                        };
                        params: {
                            employment_id: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            role_id: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { assign_id?: string };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/authorizations/add_role_assign`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=authorization&apiName=get_by_param&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get_by_param&project=corehr&resource=authorization&version=v1 document }
                 *
                 * 根据ID查询单个用户授权
                 */
                getByParam: async (
                    payload?: {
                        params: {
                            employment_id: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    role_authorization?: {
                                        employment_id: string;
                                        permission_detail_list: Array<{
                                            role?: {
                                                id: string;
                                                code: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                description?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                org_truncation?: Array<{
                                                    org_key?: string;
                                                    type?: number;
                                                    depth?: number;
                                                }>;
                                            };
                                            assigned_organization_list?: Array<
                                                Array<{
                                                    org_key: string;
                                                    org_name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    org_id_list: Array<string>;
                                                }>
                                            >;
                                            grantor_rule_list?: Array<{
                                                rule_dimension?: {
                                                    entity_key?: string;
                                                    entity_name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                rule_type?: number;
                                                expression?: {
                                                    conditions?: Array<{
                                                        left?: {
                                                            type?: number;
                                                            value?: string;
                                                            lookup_value?: string;
                                                            lookup_type?: string;
                                                        };
                                                        right?: {
                                                            type?: number;
                                                            value?: string;
                                                            lookup_value?: string;
                                                            lookup_type?: string;
                                                        };
                                                        operator?: number;
                                                        right_value_type?: number;
                                                    }>;
                                                    expression?: string;
                                                };
                                            }>;
                                            update_time?: string;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/authorizations/get_by_param`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=authorization&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query&project=corehr&resource=authorization&version=v1 document }
                 *
                 * 批量查询用户授权
                 */
                query: async (
                    payload?: {
                        params?: {
                            employment_id_list?: Array<string>;
                            role_id_list?: Array<string>;
                            page_token?: string;
                            page_size?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            updated_at_gte?: string;
                            updated_at_lte?: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        employment_id: string;
                                        permission_detail_list: Array<{
                                            role?: {
                                                id: string;
                                                code: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                active_status: number;
                                                description?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                group_type: number;
                                                created_by: string;
                                                update_time: string;
                                                org_truncation?: Array<{
                                                    org_key?: string;
                                                    type?: number;
                                                    depth?: number;
                                                }>;
                                            };
                                            assigned_organization_list?: Array<
                                                Array<{
                                                    org_key: string;
                                                    org_name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    org_id_list: Array<string>;
                                                }>
                                            >;
                                            grantor_rule_list?: Array<{
                                                rule_dimension?: {
                                                    entity_key?: string;
                                                    entity_name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                rule_type?: number;
                                                expression?: {
                                                    conditions?: Array<{
                                                        left?: {
                                                            type?: number;
                                                            value?: string;
                                                            lookup_value?: string;
                                                            lookup_type?: string;
                                                        };
                                                        right?: {
                                                            type?: number;
                                                            value?: string;
                                                            lookup_value?: string;
                                                            lookup_type?: string;
                                                        };
                                                        operator?: number;
                                                        right_value_type?: number;
                                                    }>;
                                                    expression?: string;
                                                };
                                            }>;
                                            update_time?: string;
                                        }>;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/authorizations/query`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=authorization&apiName=remove_role_assign&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=remove_role_assign&project=corehr&resource=authorization&version=v1 document }
                 *
                 * 删除组织类授权
                 */
                removeRoleAssign: async (
                    payload?: {
                        params: {
                            employment_id: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            role_id: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { assign_id?: string };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/authorizations/remove_role_assign`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=authorization&apiName=update_role_assign&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=update_role_assign&project=corehr&resource=authorization&version=v1 document }
                 *
                 * 覆盖更新组织类授权
                 */
                updateRoleAssign: async (
                    payload?: {
                        data: {
                            assigned_organization_items: Array<
                                Array<{
                                    org_key: string;
                                    org_ids?: Array<string>;
                                    org_codes?: Array<string>;
                                }>
                            >;
                        };
                        params: {
                            employment_id: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            role_id: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { assign_id?: string };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/authorizations/update_role_assign`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * common_data.id
             */
            commonDataId: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=common_data.id&apiName=convert&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=convert&project=corehr&resource=common_data.id&version=v1 document }
                 */
                convert: async (
                    payload?: {
                        data: { ids: Array<string> };
                        params: {
                            id_transform_type: number;
                            id_type:
                                | "user_id"
                                | "department_id"
                                | "job_level_id"
                                | "job_family_id"
                                | "employee_type_id";
                            feishu_user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id";
                            feishu_department_id_type?:
                                | "open_department_id"
                                | "department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        target_id?: string;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/common_data/id/convert`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * common_data.meta_data
             */
            commonDataMetaData: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=common_data.meta_data&apiName=add_enum_option&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=add_enum_option&project=corehr&resource=common_data.meta_data&version=v1 document }
                 */
                addEnumOption: async (
                    payload?: {
                        data: {
                            object_api_name: string;
                            enum_field_api_name: string;
                            enum_field_options: Array<{
                                option_api_name: string;
                                name: { zh_cn?: string; en_us?: string };
                            }>;
                        };
                        params?: { client_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    enum_field_api_name?: string;
                                    enum_field_options?: Array<{
                                        option_api_name: string;
                                        active?: boolean;
                                        name: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/common_data/meta_data/add_enum_option`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=common_data.meta_data&apiName=edit_enum_option&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=edit_enum_option&project=corehr&resource=common_data.meta_data&version=v1 document }
                 */
                editEnumOption: async (
                    payload?: {
                        data: {
                            object_api_name: string;
                            enum_field_api_name: string;
                            enum_field_option: {
                                option_api_name: string;
                                active: boolean;
                                name: { zh_cn?: string; en_us?: string };
                            };
                        };
                        params?: { client_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    enum_field_api_name?: string;
                                    enum_field_options?: Array<{
                                        option_api_name: string;
                                        active?: boolean;
                                        name: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/common_data/meta_data/edit_enum_option`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 公司
             */
            company: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=company&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/create document }
                 *
                 * 创建公司
                 *
                 * 创建公司
                 */
                create: async (
                    payload?: {
                        data: {
                            hiberarchy_common: {
                                parent_id?: string;
                                name: Array<{ lang: string; value: string }>;
                                type?: { enum_name: string };
                                active: boolean;
                                effective_time?: string;
                                expiration_time?: string;
                                code?: string;
                                description?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            };
                            type?: { enum_name: string };
                            industry_list?: Array<{ enum_name: string }>;
                            legal_representative?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            post_code?: string;
                            tax_payer_id?: string;
                            confidential?: boolean;
                            sub_type_list?: Array<{ enum_name: string }>;
                            branch_company?: boolean;
                            primary_manager?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            currency?: {
                                currency_name?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                numeric_code?: number;
                                currency_alpha_3_code?: string;
                            };
                            phone?: {
                                area_code: { enum_name: string };
                                phone_number: string;
                            };
                            fax?: {
                                area_code: { enum_name: string };
                                phone_number: string;
                            };
                            registered_office_address_info?: {
                                country_region_id: string;
                                region_id?: string;
                                city_id?: string;
                                distinct_id?: string;
                                address_line1?: string;
                                address_line2?: string;
                                address_line3?: string;
                                address_line4?: string;
                                address_line5?: string;
                                address_line6?: string;
                                address_line7?: string;
                                address_line8?: string;
                                address_line9?: string;
                                local_address_line1?: string;
                                local_address_line2?: string;
                                local_address_line3?: string;
                                local_address_line4?: string;
                                local_address_line5?: string;
                                local_address_line6?: string;
                                local_address_line7?: string;
                                local_address_line8?: string;
                                local_address_line9?: string;
                                postal_code?: string;
                            };
                            office_address_info?: {
                                country_region_id: string;
                                region_id?: string;
                                city_id?: string;
                                distinct_id?: string;
                                address_line1?: string;
                                address_line2?: string;
                                address_line3?: string;
                                address_line4?: string;
                                address_line5?: string;
                                address_line6?: string;
                                address_line7?: string;
                                address_line8?: string;
                                address_line9?: string;
                                local_address_line1?: string;
                                local_address_line2?: string;
                                local_address_line3?: string;
                                local_address_line4?: string;
                                local_address_line5?: string;
                                local_address_line6?: string;
                                local_address_line7?: string;
                                local_address_line8?: string;
                                local_address_line9?: string;
                                postal_code?: string;
                            };
                        };
                        params?: { client_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    company?: {
                                        id?: string;
                                        hiberarchy_common: {
                                            parent_id?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            active: boolean;
                                            effective_time?: string;
                                            expiration_time?: string;
                                            code?: string;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            tree_order?: string;
                                            list_order?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        industry_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        legal_representative?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        post_code?: string;
                                        tax_payer_id?: string;
                                        confidential?: boolean;
                                        sub_type_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        branch_company?: boolean;
                                        primary_manager?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        currency?: {
                                            id?: string;
                                            country_region_id?: string;
                                            currency_name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            numeric_code?: number;
                                            currency_alpha_3_code?: string;
                                        };
                                        phone?: {
                                            area_code: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                        };
                                        fax?: {
                                            area_code: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                        };
                                        registered_office_address?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        office_address?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        registered_office_address_info?: {
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                        };
                                        office_address_info?: {
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                        };
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/companies`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=company&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/delete document }
                 *
                 * 删除公司
                 *
                 * 删除公司
                 */
                delete: async (
                    payload?: {
                        path: { company_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/companies/:company_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=company&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/get document }
                 *
                 * 查询单个公司
                 *
                 * 根据 ID 查询单个公司
                 */
                get: async (
                    payload?: {
                        path: { company_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    company?: {
                                        id?: string;
                                        hiberarchy_common: {
                                            parent_id?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            active: boolean;
                                            effective_time?: string;
                                            expiration_time?: string;
                                            code?: string;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            tree_order?: string;
                                            list_order?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        industry_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        legal_representative?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        post_code?: string;
                                        tax_payer_id?: string;
                                        confidential?: boolean;
                                        sub_type_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        branch_company?: boolean;
                                        primary_manager?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        currency?: {
                                            id?: string;
                                            country_region_id?: string;
                                            currency_name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            numeric_code?: number;
                                            currency_alpha_3_code?: string;
                                        };
                                        phone?: {
                                            area_code: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                        };
                                        fax?: {
                                            area_code: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                        };
                                        registered_office_address?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        office_address?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        registered_office_address_info?: {
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            address_type_list?: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                        };
                                        office_address_info?: {
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            address_type_list?: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                        };
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/companies/:company_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=company&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/list document }
                 *
                 * 批量查询公司
                 *
                 * 批量查询公司
                 */
                list: async (
                    payload?: {
                        params: { page_token?: string; page_size: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        hiberarchy_common: {
                                            parent_id?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            active: boolean;
                                            effective_time?: string;
                                            expiration_time?: string;
                                            code?: string;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            tree_order?: string;
                                            list_order?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        industry_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        legal_representative?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        post_code?: string;
                                        tax_payer_id?: string;
                                        confidential?: boolean;
                                        sub_type_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        branch_company?: boolean;
                                        primary_manager?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        currency?: {
                                            id?: string;
                                            country_region_id?: string;
                                            currency_name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            numeric_code?: number;
                                            currency_alpha_3_code?: string;
                                        };
                                        phone?: {
                                            area_code: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                        };
                                        fax?: {
                                            area_code: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                        };
                                        registered_office_address?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        office_address?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        registered_office_address_info?: {
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            address_type_list?: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                        };
                                        office_address_info?: {
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            address_type_list?: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                        };
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/companies`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=company&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=corehr&resource=company&version=v1 document }
                 *
                 * 更新公司数据
                 */
                patch: async (
                    payload?: {
                        data?: {
                            hiberarchy_common?: {
                                parent_id?: string;
                                name?: Array<{ lang: string; value: string }>;
                                type?: { enum_name: string };
                                active?: boolean;
                                effective_time: string;
                                expiration_time?: string;
                                code?: string;
                                description?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            };
                            type?: { enum_name: string };
                            industry_list?: Array<{ enum_name: string }>;
                            legal_representative?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            post_code?: string;
                            tax_payer_id?: string;
                            confidential?: boolean;
                            sub_type_list?: Array<{ enum_name: string }>;
                            branch_company?: boolean;
                            primary_manager?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            currency?: {
                                currency_name?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                numeric_code?: number;
                                currency_alpha_3_code?: string;
                            };
                            phone?: {
                                area_code: { enum_name: string };
                                phone_number: string;
                            };
                            fax?: {
                                area_code: { enum_name: string };
                                phone_number: string;
                            };
                            registered_office_address_info?: {
                                country_region_id: string;
                                region_id?: string;
                                city_id?: string;
                                distinct_id?: string;
                                address_line1?: string;
                                address_line2?: string;
                                address_line3?: string;
                                address_line4?: string;
                                address_line5?: string;
                                address_line6?: string;
                                address_line7?: string;
                                address_line8?: string;
                                address_line9?: string;
                                local_address_line1?: string;
                                local_address_line2?: string;
                                local_address_line3?: string;
                                local_address_line4?: string;
                                local_address_line5?: string;
                                local_address_line6?: string;
                                local_address_line7?: string;
                                local_address_line8?: string;
                                local_address_line9?: string;
                                postal_code?: string;
                            };
                            office_address_info?: {
                                country_region_id: string;
                                region_id?: string;
                                city_id?: string;
                                distinct_id?: string;
                                address_line1?: string;
                                address_line2?: string;
                                address_line3?: string;
                                address_line4?: string;
                                address_line5?: string;
                                address_line6?: string;
                                address_line7?: string;
                                address_line8?: string;
                                address_line9?: string;
                                local_address_line1?: string;
                                local_address_line2?: string;
                                local_address_line3?: string;
                                local_address_line4?: string;
                                local_address_line5?: string;
                                local_address_line6?: string;
                                local_address_line7?: string;
                                local_address_line8?: string;
                                local_address_line9?: string;
                                postal_code?: string;
                            };
                        };
                        params?: { client_token?: string };
                        path: { company_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    company?: {
                                        id?: string;
                                        hiberarchy_common: {
                                            parent_id?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            active: boolean;
                                            effective_time?: string;
                                            expiration_time?: string;
                                            code?: string;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            tree_order?: string;
                                            list_order?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        industry_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        legal_representative?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        post_code?: string;
                                        tax_payer_id?: string;
                                        confidential?: boolean;
                                        sub_type_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        branch_company?: boolean;
                                        primary_manager?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        currency?: {
                                            id?: string;
                                            country_region_id?: string;
                                            currency_name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            numeric_code?: number;
                                            currency_alpha_3_code?: string;
                                        };
                                        phone?: {
                                            area_code: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                        };
                                        fax?: {
                                            area_code: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                        };
                                        registered_office_address?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        office_address?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        registered_office_address_info?: {
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                        };
                                        office_address_info?: {
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                        };
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/companies/:company_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * compensation_standard
             */
            compensationStandard: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=compensation_standard&apiName=match&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=match&project=corehr&resource=compensation_standard&version=v1 document }
                 *
                 * 分页查询地点数据
                 */
                match: async (
                    payload?: {
                        params: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                            employment_id?: string;
                            reference_object_api?:
                                | "cpst_item"
                                | "cpst_indicator";
                            reference_object_id: string;
                            department_id?: string;
                            work_location_id?: string;
                            company_id?: string;
                            job_family_id?: string;
                            job_id?: string;
                            job_level_id?: string;
                            employee_type_id?: string;
                            recruitment_type?:
                                | "experienced_professionals"
                                | "recent_graduates"
                                | "routine_intern";
                            cpst_change_reason_id?: string;
                            cpst_plan_id?: string;
                            cpst_salary_level_id?: string;
                            effective_time?: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    standard_id?: string;
                                    grade?: {
                                        grade_id?: string;
                                        grade_tid?: string;
                                        grade_standard_value?: {
                                            reference_object?: {
                                                api_name?:
                                                    | "cpst_item"
                                                    | "cpst_indicator";
                                                id?: string;
                                            };
                                            standard_type?: {
                                                api_name?:
                                                    | "standard_value"
                                                    | "bandwidth_and_standard_value"
                                                    | "bandwidth_upper_and_lower_limit";
                                            };
                                            band_width?: {
                                                upper_limit?: string;
                                                lower_limit?: string;
                                            };
                                            standard_value?: string;
                                        };
                                        currency?: {
                                            currency_id?: string;
                                            code?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                        };
                                        description?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                    effective_time?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/compensation_standards/match`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 合同
             */
            contract: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=contract&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/create document }
                 *
                 * 创建合同
                 *
                 * 创建合同
                 */
                create: async (
                    payload?: {
                        data: {
                            effective_time: string;
                            expiration_time?: string;
                            employment_id: string;
                            contract_type: { enum_name: string };
                            first_party_company_id: string;
                            person_id?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            duration_type?: { enum_name: string };
                            contract_end_date?: string;
                            contract_number?: string;
                            signing_type?: { enum_name: string };
                        };
                        params?: { client_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    contract?: {
                                        id?: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        employment_id: string;
                                        contract_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        first_party_company_id: string;
                                        person_id?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        duration_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        contract_end_date?: string;
                                        contract_number?: string;
                                        signing_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        contract_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        renewal_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        signing_times?: number;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/contracts`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=contract&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/delete document }
                 *
                 * 删除合同
                 *
                 * 删除合同
                 */
                delete: async (
                    payload?: {
                        path: { contract_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/contracts/:contract_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=contract&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/get document }
                 *
                 * 查询单个合同
                 *
                 * 根据 ID 查询单个合同
                 */
                get: async (
                    payload?: {
                        path: { contract_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    contract?: {
                                        id?: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        employment_id: string;
                                        contract_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        first_party_company_id: string;
                                        person_id?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        duration_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        contract_end_date?: string;
                                        contract_number?: string;
                                        signing_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        contract_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        renewal_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        signing_times?: number;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/contracts/:contract_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=contract&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/list document }
                 *
                 * 批量查询合同
                 *
                 * 批量查询合同
                 */
                list: async (
                    payload?: {
                        params: { page_token?: string; page_size: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        employment_id: string;
                                        contract_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        first_party_company_id: string;
                                        person_id?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        duration_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        contract_end_date?: string;
                                        contract_number?: string;
                                        signing_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        contract_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        renewal_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        signing_times?: number;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/contracts`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=contract&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/patch document }
                 *
                 * 更新合同
                 *
                 * 更新合同
                 */
                patch: async (
                    payload?: {
                        data?: {
                            effective_time?: string;
                            expiration_time?: string;
                            employment_id?: string;
                            contract_type?: { enum_name: string };
                            first_party_company_id?: string;
                            person_id?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            duration_type?: { enum_name: string };
                            contract_end_date?: string;
                            contract_number?: string;
                            signing_type?: { enum_name: string };
                        };
                        params?: { client_token?: string };
                        path: { contract_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    contract?: {
                                        id?: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        employment_id: string;
                                        contract_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        first_party_company_id: string;
                                        person_id?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        duration_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        contract_end_date?: string;
                                        contract_number?: string;
                                        signing_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        contract_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        renewal_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        signing_times?: number;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/contracts/:contract_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 地理库信息
             */
            countryRegion: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=country_region&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/country_region/get document }
                 *
                 * 查询单条国家/地区信息
                 *
                 * 查询单条国家/地区信息
                 */
                get: async (
                    payload?: {
                        path: { country_region_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    country_region?: {
                                        id: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        alpha_3_code: string;
                                        alpha_2_code: string;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/country_regions/:country_region_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=country_region&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/country_region/list document }
                 *
                 * 批量查询国家/地区信息
                 *
                 * 批量查询国家/地区信息
                 */
                list: async (
                    payload?: {
                        params: { page_token?: string; page_size: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        alpha_3_code: string;
                                        alpha_2_code: string;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/country_regions`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 货币信息
             */
            currency: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=currency&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/currency/get document }
                 *
                 * 查询单个货币信息
                 *
                 * 查询单个货币信息
                 */
                get: async (
                    payload?: {
                        path: { currency_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    currency?: {
                                        id?: string;
                                        country_region_id?: string;
                                        currency_name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        numeric_code?: number;
                                        currency_alpha_3_code?: string;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/currencies/:currency_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=currency&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/currency/list document }
                 *
                 * 批量查询货币信息
                 *
                 * 批量查询货币信息
                 */
                list: async (
                    payload?: {
                        params: { page_token?: string; page_size: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        country_region_id?: string;
                                        currency_name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        numeric_code?: number;
                                        currency_alpha_3_code?: string;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/currencies`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 自定义字段
             */
            customField: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=custom_field&apiName=get_by_param&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param document }
                 *
                 * 获取自定义字段详情
                 *
                 * 获取「飞书人事」具体对象下某自定义字段的详细信息
                 */
                getByParam: async (
                    payload?: {
                        params: {
                            object_api_name: string;
                            custom_api_name: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    data?: {
                                        custom_api_name?: string;
                                        name: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        description: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        is_open: boolean;
                                        is_required: boolean;
                                        is_unique: boolean;
                                        object_api_name: string;
                                        type: number;
                                        common_schema_config?: {
                                            text_field_setting?: {
                                                is_multilingual?: boolean;
                                                is_multiline?: boolean;
                                                max_length: number;
                                                is_url_type?: boolean;
                                            };
                                            number_field_setting?: {
                                                number_field_type?: number;
                                                decimal_places?: number;
                                                round_type?: number;
                                                decimal_total_places?: number;
                                            };
                                            enum_field_setting?: {
                                                enum_field_option_list?: Array<{
                                                    api_name?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    description?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    is_open?: boolean;
                                                }>;
                                                is_multiple?: boolean;
                                            };
                                            lookup_field_setting?: {
                                                lookup_obj_api_name?: string;
                                                is_multiple?: boolean;
                                            };
                                            date_time_field_setting?: {
                                                date_time_type?: number;
                                            };
                                            attachment_field_setting?: {
                                                is_multiple?: boolean;
                                                file_type?: number;
                                            };
                                            image_field_setting?: {
                                                image_type?: number;
                                                display_style?: number;
                                            };
                                            calculated_field_setting?: {
                                                type: number;
                                            };
                                        };
                                        create_time?: string;
                                        update_time?: string;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/custom_fields/get_by_param`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=custom_field&apiName=list_object_api_name&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/list_object_api_name document }
                 *
                 * 获取飞书人事对象列表
                 *
                 * 获取「飞书人事」中的对象列表，含系统预置对象与自定义对象
                 */
                listObjectApiName: async (
                    payload?: {
                        params: { page_token?: string; page_size: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        object_api_name?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        is_open?: boolean;
                                        create_time?: string;
                                        update_time?: string;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/custom_fields/list_object_api_name`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=custom_field&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/query document }
                 *
                 * 获取自定义字段列表
                 *
                 * 获取「飞书人事」具体对象下的自定义字段列表
                 */
                query: async (
                    payload?: {
                        params: { object_api_name_list: Array<string> };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        custom_api_name?: string;
                                        name: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        description: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        is_open: boolean;
                                        is_required: boolean;
                                        is_unique: boolean;
                                        object_api_name: string;
                                        type: number;
                                        common_schema_config?: {
                                            text_field_setting?: {
                                                is_multilingual?: boolean;
                                                is_multiline?: boolean;
                                                max_length: number;
                                                is_url_type?: boolean;
                                            };
                                            number_field_setting?: {
                                                number_field_type?: number;
                                                decimal_places?: number;
                                                round_type?: number;
                                                decimal_total_places?: number;
                                            };
                                            enum_field_setting?: {
                                                enum_field_option_list?: Array<{
                                                    api_name?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    description?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    is_open?: boolean;
                                                }>;
                                                is_multiple?: boolean;
                                            };
                                            lookup_field_setting?: {
                                                lookup_obj_api_name?: string;
                                                is_multiple?: boolean;
                                            };
                                            date_time_field_setting?: {
                                                date_time_type?: number;
                                            };
                                            attachment_field_setting?: {
                                                is_multiple?: boolean;
                                                file_type?: number;
                                            };
                                            image_field_setting?: {
                                                image_type?: number;
                                                display_style?: number;
                                            };
                                            calculated_field_setting?: {
                                                type: number;
                                            };
                                        };
                                        create_time?: string;
                                        update_time?: string;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/custom_fields/query`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 部门
             */
            department: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/create document }
                 *
                 * 创建部门
                 *
                 * 创建部门
                 */
                create: async (
                    payload?: {
                        data: {
                            sub_type?: { enum_name: string };
                            manager?: string;
                            is_confidential?: boolean;
                            hiberarchy_common: {
                                parent_id?: string;
                                name: Array<{ lang: string; value: string }>;
                                type?: { enum_name: string };
                                active: boolean;
                                expiration_time?: string;
                                code?: string;
                                description?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            };
                            effective_time: string;
                            expiration_time?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            cost_center_id?: string;
                            staffing_model?: { enum_name: string };
                        };
                        params?: {
                            client_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    department?: {
                                        id?: string;
                                        sub_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        manager?: string;
                                        is_confidential?: boolean;
                                        hiberarchy_common: {
                                            parent_id?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            active: boolean;
                                            effective_time?: string;
                                            expiration_time?: string;
                                            code?: string;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            tree_order?: string;
                                            list_order?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        effective_time: string;
                                        expiration_time?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        cost_center_id?: string;
                                        staffing_model?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/departments`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/delete document }
                 *
                 * 删除部门
                 *
                 * 删除部门
                 */
                delete: async (
                    payload?: {
                        path: { department_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/departments/:department_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/get document }
                 *
                 * 查询单个部门
                 *
                 * 根据 ID 查询单个部门
                 */
                get: async (
                    payload?: {
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                        path: { department_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    department?: {
                                        id?: string;
                                        sub_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        manager?: string;
                                        is_confidential?: boolean;
                                        hiberarchy_common: {
                                            parent_id?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            active: boolean;
                                            effective_time?: string;
                                            expiration_time?: string;
                                            code?: string;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            tree_order?: string;
                                            list_order?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        effective_time: string;
                                        expiration_time?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        cost_center_id?: string;
                                        staffing_model?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/departments/:department_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/list document }
                 *
                 * 批量查询部门
                 *
                 * 批量查询部门
                 */
                list: async (
                    payload?: {
                        params: {
                            page_token?: string;
                            page_size: string;
                            department_id_list?: Array<string>;
                            name_list?: Array<string>;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        sub_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        manager?: string;
                                        is_confidential?: boolean;
                                        hiberarchy_common: {
                                            parent_id?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            active: boolean;
                                            effective_time?: string;
                                            expiration_time?: string;
                                            code?: string;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            tree_order?: string;
                                            list_order?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        effective_time: string;
                                        expiration_time?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        cost_center_id?: string;
                                        staffing_model?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/departments`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/patch document }
                 *
                 * 更新部门
                 *
                 * 更新部门
                 */
                patch: async (
                    payload?: {
                        data: {
                            id?: string;
                            sub_type?: { enum_name: string };
                            manager?: string;
                            is_confidential?: boolean;
                            hiberarchy_common?: {
                                parent_id?: string;
                                name?: Array<{ lang: string; value: string }>;
                                type?: { enum_name: string };
                                active?: boolean;
                                effective_time?: string;
                                expiration_time?: string;
                                code?: string;
                                description?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            };
                            effective_time: string;
                            expiration_time?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            cost_center_id?: string;
                            staffing_model?: { enum_name: string };
                        };
                        params?: {
                            client_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                        path: { department_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    department?: {
                                        id?: string;
                                        sub_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        manager?: string;
                                        is_confidential?: boolean;
                                        hiberarchy_common: {
                                            parent_id?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            active: boolean;
                                            effective_time?: string;
                                            expiration_time?: string;
                                            code?: string;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            tree_order?: string;
                                            list_order?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        effective_time: string;
                                        expiration_time?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        cost_center_id?: string;
                                        staffing_model?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/departments/:department_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 人员类型
             */
            employeeType: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee_type&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/create document }
                 *
                 * 创建人员类型
                 *
                 * 创建人员类型
                 */
                create: async (
                    payload?: {
                        data: {
                            name: Array<{ lang: string; value: string }>;
                            default_employee_type: boolean;
                            active: boolean;
                            code?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        };
                        params?: { client_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    employee_type?: {
                                        id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        default_employee_type: boolean;
                                        active: boolean;
                                        code?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/employee_types`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee_type&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/delete document }
                 *
                 * 删除人员类型
                 *
                 * 删除人员类型
                 */
                delete: async (
                    payload?: {
                        path: { employee_type_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/employee_types/:employee_type_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee_type&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/get document }
                 *
                 * 查询单个人员类型
                 *
                 * 根据 ID 查询单个人员类型
                 */
                get: async (
                    payload?: {
                        path: { employee_type_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    employee_type?: {
                                        id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        default_employee_type: boolean;
                                        active: boolean;
                                        code?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/employee_types/:employee_type_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee_type&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/list document }
                 *
                 * 批量查询人员类型
                 *
                 * 批量查询人员类型
                 */
                list: async (
                    payload?: {
                        params: { page_token?: string; page_size: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        default_employee_type: boolean;
                                        active: boolean;
                                        code?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/employee_types`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee_type&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/patch document }
                 *
                 * 更新人员类型数据
                 *
                 * 更新人员类型数据
                 */
                patch: async (
                    payload?: {
                        data?: {
                            name?: Array<{ lang: string; value: string }>;
                            default_employee_type?: boolean;
                            active?: boolean;
                            code?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        };
                        params?: { client_token?: string };
                        path: { employee_type_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    employee_type?: {
                                        id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        default_employee_type: boolean;
                                        active: boolean;
                                        code?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/employee_types/:employee_type_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 雇佣信息
             */
            employment: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employment&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employment/create document }
                 *
                 * 创建雇佣信息
                 *
                 * 创建人员的雇佣信息
                 */
                create: async (
                    payload?: {
                        data: {
                            seniority_date?: string;
                            employee_number?: string;
                            effective_time: string;
                            expiration_time?: string;
                            employment_type: { enum_name: string };
                            person_id: string;
                            primary_employment: boolean;
                            employment_status: { enum_name: string };
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            work_email_list?: Array<{
                                email: string;
                                is_primary?: boolean;
                                is_public?: boolean;
                                email_usage?: { enum_name: string };
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            reason_for_offboarding?: { enum_name: string };
                            ats_application_id?: string;
                            rehire?: { enum_name: string };
                            rehire_employment_id?: string;
                        };
                        params?: { client_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    employment?: {
                                        prehire_id?: string;
                                        employee_type_id?: string;
                                        tenure?: string;
                                        department_id?: string;
                                        job_level_id?: string;
                                        work_location_id?: string;
                                        job_family_id?: string;
                                        job_id?: string;
                                        company_id?: string;
                                        working_hours_type_id?: string;
                                        id?: string;
                                        seniority_date?: string;
                                        employee_number?: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        employment_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        person_id: string;
                                        probation_period?: number;
                                        on_probation?: string;
                                        probation_end_date?: string;
                                        primary_employment: boolean;
                                        employment_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        work_email_list?: Array<{
                                            email: string;
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                            email_usage?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        email_address?: string;
                                        reason_for_offboarding?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        cost_center_list?: Array<{
                                            cost_center_id?: string;
                                            rate?: number;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        ats_application_id?: string;
                                        rehire?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        rehire_employment_id?: string;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/employments`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employment&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employment/delete document }
                 *
                 * 删除雇佣信息
                 *
                 * 删除人员的雇佣信息
                 */
                delete: async (
                    payload?: {
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                        path: { employment_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/employments/:employment_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employment&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employment/patch document }
                 *
                 * 更新雇佣信息
                 *
                 * 更新雇佣信息
                 */
                patch: async (
                    payload?: {
                        data?: {
                            seniority_date?: string;
                            employee_number?: string;
                            employment_type?: { enum_name: string };
                            person_id?: string;
                            primary_employment?: boolean;
                            condition_worker?: boolean;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            work_email_list?: Array<{
                                email: string;
                                is_primary?: boolean;
                                is_public?: boolean;
                                email_usage?: { enum_name: string };
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            reason_for_offboarding?: { enum_name: string };
                            ats_application_id?: string;
                        };
                        params?: {
                            client_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                        path: { employment_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    employment?: {
                                        prehire_id?: string;
                                        employee_type_id?: string;
                                        tenure?: string;
                                        department_id?: string;
                                        job_level_id?: string;
                                        work_location_id?: string;
                                        job_family_id?: string;
                                        job_id?: string;
                                        company_id?: string;
                                        working_hours_type_id?: string;
                                        id?: string;
                                        seniority_date?: string;
                                        employee_number?: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        employment_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        person_id: string;
                                        probation_period?: number;
                                        on_probation?: string;
                                        probation_end_date?: string;
                                        primary_employment: boolean;
                                        condition_worker?: boolean;
                                        employment_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        work_email_list?: Array<{
                                            email: string;
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                            email_usage?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        email_address?: string;
                                        reason_for_offboarding?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        cost_center_list?: Array<{
                                            cost_center_id?: string;
                                            rate?: number;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        ats_application_id?: string;
                                        service_company?: string;
                                        compensation_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        work_shift?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/employments/:employment_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * file
             */
            file: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=file&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=corehr&resource=file&version=v1 document }
                 */
                get: async (
                    payload?: {
                        path?: { id?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/files/:id`,
                                path
                            ),
                            method: "GET",
                            headers,
                            data,
                            params,
                            responseType: "stream",
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });

                    const checkIsReadable = () => {
                        const consumedError =
                            "The stream has already been consumed";
                        if (!res.readable) {
                            this.logger.error(consumedError);
                            throw new Error(consumedError);
                        }
                    };

                    return {
                        writeFile: async (filePath: string) => {
                            checkIsReadable();
                            return new Promise((resolve, reject) => {
                                const writableStream =
                                    fs.createWriteStream(filePath);
                                writableStream.on("finish", () => {
                                    resolve(filePath);
                                });
                                writableStream.on("error", (e) => {
                                    reject(e);
                                });
                                res.pipe(writableStream);
                            });
                        },
                        getReadableStream: () => {
                            checkIsReadable();
                            return res as Readable;
                        },
                    };
                },
            },
            /**
             * 职务
             */
            job: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/create document }
                 *
                 * 创建职务
                 *
                 * 创建职务
                 */
                create: async (
                    payload?: {
                        data: {
                            code?: string;
                            name: Array<{ lang: string; value: string }>;
                            description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            active: boolean;
                            job_title?: Array<{ lang: string; value: string }>;
                            pathway_id?: string;
                            job_family_id_list?: Array<string>;
                            job_level_id_list?: Array<string>;
                            working_hours_type_id?: string;
                            effective_time: string;
                            expiration_time?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        };
                        params?: { client_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job?: {
                                        id?: string;
                                        code?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        job_title?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        pathway_id?: string;
                                        job_family_id_list?: Array<string>;
                                        job_level_id_list?: Array<string>;
                                        working_hours_type_id?: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/jobs`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/delete document }
                 *
                 * 删除职务
                 *
                 * 删除职务
                 */
                delete: async (
                    payload?: {
                        path: { job_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/jobs/:job_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/get document }
                 *
                 * 查询单个职务
                 *
                 * 根据 ID 查询单个职务
                 */
                get: async (
                    payload?: {
                        path: { job_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job?: {
                                        id?: string;
                                        code?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        job_title?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        pathway_id?: string;
                                        job_family_id_list?: Array<string>;
                                        job_level_id_list?: Array<string>;
                                        working_hours_type_id?: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/jobs/:job_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/list document }
                 *
                 * 批量查询职务
                 *
                 * 批量查询职务
                 */
                list: async (
                    payload?: {
                        params: {
                            page_token?: string;
                            page_size: string;
                            name?: string;
                            query_language?: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        code?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        job_title?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        pathway_id?: string;
                                        job_family_id_list?: Array<string>;
                                        job_level_id_list?: Array<string>;
                                        working_hours_type_id?: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/jobs`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/patch document }
                 *
                 * 更新职务
                 *
                 * 更新职务
                 */
                patch: async (
                    payload?: {
                        data?: {
                            code?: string;
                            name?: Array<{ lang: string; value: string }>;
                            description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            active?: boolean;
                            job_title?: Array<{ lang: string; value: string }>;
                            pathway_id?: string;
                            job_family_id_list?: Array<string>;
                            job_level_id_list?: Array<string>;
                            working_hours_type_id?: string;
                            effective_time?: string;
                            expiration_time?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        };
                        params?: { client_token?: string };
                        path: { job_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job?: {
                                        id?: string;
                                        code?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        job_title?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        pathway_id?: string;
                                        job_family_id_list?: Array<string>;
                                        job_level_id_list?: Array<string>;
                                        working_hours_type_id?: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/jobs/:job_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 异动信息
             */
            jobChange: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_change&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_change/create document }
                 *
                 * 发起员工异动
                 *
                 * 创建员工异动信息
                 */
                create: async (
                    payload?: {
                        data: {
                            transfer_mode: number;
                            employment_id: string;
                            transfer_type_unique_identifier: string;
                            flow_id?: string;
                            effective_date: string;
                            transfer_info: {
                                remark?: string;
                                offer_info?: string;
                                target_dotted_manager_clean?: boolean;
                                probation_exist?: boolean;
                                original_department?: string;
                                target_department?: string;
                                original_work_location?: string;
                                target_work_location?: string;
                                original_direct_manager?: string;
                                target_direct_manager?: string;
                                original_dotted_manager?: string;
                                target_dotted_manager?: string;
                                original_job?: string;
                                target_job?: string;
                                original_job_family?: string;
                                target_job_family?: string;
                                original_job_level?: string;
                                target_job_level?: string;
                                original_workforce_type?: string;
                                target_workforce_type?: string;
                                original_employee_subtype?: string;
                                target_employee_subtype?: string;
                                original_company?: string;
                                target_company?: string;
                                original_contract_number?: string;
                                target_contract_number?: string;
                                original_contract_type?: string;
                                target_contract_type?: string;
                                original_duration_type?: string;
                                target_duration_type?: string;
                                original_signing_type?: string;
                                target_signing_type?: string;
                                original_contract_start_date?: string;
                                target_contract_start_date?: string;
                                original_contract_end_date?: string;
                                target_contract_end_date?: string;
                                original_working_hours_type?: string;
                                target_working_hours_type?: string;
                                original_working_calendar?: string;
                                target_working_calendar?: string;
                                original_probation_end_date?: string;
                                target_probation_end_date?: string;
                                original_weekly_working_hours?: string;
                                target_weekly_working_hours?: string;
                                original_work_shift?: string;
                                target_work_shift?: string;
                                original_cost_center_rate?: Array<{
                                    cost_center_id?: string;
                                    rate?: number;
                                }>;
                                target_cost_center_rate?: Array<{
                                    cost_center_id?: string;
                                    rate?: number;
                                }>;
                                original_employment_change?: {
                                    regular_employee_start_date?: string;
                                    seniority_date?: string;
                                    employee_number?: string;
                                    custom_fields?: Array<{
                                        custom_api_name: string;
                                        value: string;
                                    }>;
                                };
                                target_employment_change?: {
                                    regular_employee_start_date?: string;
                                    seniority_date?: string;
                                    employee_number?: string;
                                    custom_fields?: Array<{
                                        custom_api_name: string;
                                        value: string;
                                    }>;
                                };
                                original_job_grade?: string;
                                target_job_grade?: string;
                                original_compensation_type?: string;
                                target_compensation_type?: string;
                                original_service_company?: string;
                                target_service_company?: string;
                                original_position?: string;
                                target_position?: string;
                                original_pathway?: string;
                                target_pathway?: string;
                            };
                            transfer_key?: string;
                            initiator_id?: string;
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_admin_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job_change_id?: string;
                                    employment_id?: string;
                                    status?: number;
                                    transfer_type_unique_identifier?: string;
                                    transfer_reason_unique_identifier?: string;
                                    process_id?: string;
                                    effective_date?: string;
                                    created_time?: string;
                                    transfer_info?: {
                                        remark?: string;
                                        offer_info?: string;
                                        target_dotted_manager_clean?: boolean;
                                        probation_exist?: boolean;
                                        original_department?: string;
                                        target_department?: string;
                                        original_work_location?: string;
                                        target_work_location?: string;
                                        original_direct_manager?: string;
                                        target_direct_manager?: string;
                                        original_dotted_manager?: string;
                                        target_dotted_manager?: string;
                                        original_job?: string;
                                        target_job?: string;
                                        original_job_family?: string;
                                        target_job_family?: string;
                                        original_job_level?: string;
                                        target_job_level?: string;
                                        original_workforce_type?: string;
                                        target_workforce_type?: string;
                                        original_employee_subtype?: string;
                                        target_employee_subtype?: string;
                                        original_company?: string;
                                        target_company?: string;
                                        original_contract_number?: string;
                                        target_contract_number?: string;
                                        original_contract_type?: string;
                                        target_contract_type?: string;
                                        original_duration_type?: string;
                                        target_duration_type?: string;
                                        original_signing_type?: string;
                                        target_signing_type?: string;
                                        original_contract_start_date?: string;
                                        target_contract_start_date?: string;
                                        original_contract_end_date?: string;
                                        target_contract_end_date?: string;
                                        original_working_hours_type?: string;
                                        target_working_hours_type?: string;
                                        original_working_calendar?: string;
                                        target_working_calendar?: string;
                                        original_probation_end_date?: string;
                                        target_probation_end_date?: string;
                                        original_weekly_working_hours?: string;
                                        target_weekly_working_hours?: string;
                                        original_work_shift?: string;
                                        target_work_shift?: string;
                                        original_cost_center_rate?: Array<{
                                            cost_center_id?: string;
                                            rate?: number;
                                        }>;
                                        target_cost_center_rate?: Array<{
                                            cost_center_id?: string;
                                            rate?: number;
                                        }>;
                                        original_employment_change?: {
                                            regular_employee_start_date?: string;
                                            seniority_date?: string;
                                            employee_number?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        };
                                        target_employment_change?: {
                                            regular_employee_start_date?: string;
                                            seniority_date?: string;
                                            employee_number?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        };
                                        original_job_grade?: string;
                                        target_job_grade?: string;
                                        original_compensation_type?: string;
                                        target_compensation_type?: string;
                                        original_service_company?: string;
                                        target_service_company?: string;
                                        original_position?: string;
                                        target_position?: string;
                                        original_pathway?: string;
                                        target_pathway?: string;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/job_changes`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 任职信息
             */
            jobData: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_data&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/create document }
                 *
                 * 创建任职信息
                 *
                 * 在系统中第一次创建员工任职数据，通常在员工入职或者做数据批量导入的时候使用，【任职原因】只支持填写“入职”
                 */
                create: async (
                    payload?: {
                        data: {
                            job_level_id?: string;
                            job_grade_id?: string;
                            employee_type_id: string;
                            working_hours_type_id?: string;
                            work_location_id?: string;
                            department_id: string;
                            job_id?: string;
                            probation_start_date?: string;
                            probation_end_date?: string;
                            primary_job_data: boolean;
                            employment_id: string;
                            effective_time: string;
                            expiration_time?: string;
                            job_family_id?: string;
                            assignment_start_reason: { enum_name: string };
                            probation_expected_end_date?: string;
                            direct_manager_id?: string;
                            dotted_line_manager_id_list?: Array<string>;
                            second_direct_manager_id?: string;
                            cost_center_rate?: Array<{
                                cost_center_id?: string;
                                rate?: number;
                            }>;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            work_shift?: { enum_name: string };
                            compensation_type?: { enum_name: string };
                            service_company?: string;
                            position_id?: string;
                            pathway_id?: string;
                        };
                        params?: {
                            client_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job_data?: {
                                        id?: string;
                                        version_id?: string;
                                        job_level_id?: string;
                                        job_grade_id?: string;
                                        employee_type_id: string;
                                        working_hours_type_id?: string;
                                        work_location_id?: string;
                                        department_id?: string;
                                        job_id?: string;
                                        probation_start_date?: string;
                                        probation_end_date?: string;
                                        primary_job_data: boolean;
                                        employment_id: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        job_family_id?: string;
                                        assignment_start_reason?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        probation_expected_end_date?: string;
                                        weekly_working_hours?: number;
                                        direct_manager_id?: string;
                                        dotted_line_manager_id_list?: Array<string>;
                                        second_direct_manager_id?: string;
                                        cost_center_rate?: Array<{
                                            cost_center_id?: string;
                                            rate?: number;
                                        }>;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        weekly_working_hours_v2?: number;
                                        work_shift?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        compensation_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        service_company?: string;
                                        pathway_id?: string;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/job_datas`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_data&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/delete document }
                 *
                 * 删除任职信息
                 *
                 * 删除人员的任职信息
                 */
                delete: async (
                    payload?: {
                        params?: { version_id?: string };
                        path: { job_data_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/job_datas/:job_data_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_data&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/get document }
                 *
                 * 查询单个任职信息
                 *
                 * 根据 ID 查询单任职信息
                 */
                get: async (
                    payload?: {
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                        path: { job_data_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job_data?: {
                                        id?: string;
                                        version_id?: string;
                                        job_level_id?: string;
                                        job_grade_id?: string;
                                        employee_type_id: string;
                                        working_hours_type_id?: string;
                                        work_location_id?: string;
                                        department_id?: string;
                                        job_id?: string;
                                        probation_start_date?: string;
                                        probation_end_date?: string;
                                        primary_job_data: boolean;
                                        employment_id: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        job_family_id?: string;
                                        assignment_start_reason?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        probation_expected_end_date?: string;
                                        weekly_working_hours?: number;
                                        direct_manager_id?: string;
                                        dotted_line_manager_id_list?: Array<string>;
                                        second_direct_manager_id?: string;
                                        cost_center_rate?: Array<{
                                            cost_center_id?: string;
                                            rate?: number;
                                        }>;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        weekly_working_hours_v2?: number;
                                        work_shift?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        compensation_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        service_company?: string;
                                        employee_subtype_id?: string;
                                        position_id?: string;
                                        pathway_id?: string;
                                        job_data_reason?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/job_datas/:job_data_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_data&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/list document }
                 *
                 * 批量查询任职信息
                 *
                 * 批量查询人员的任职信息
                 */
                list: async (
                    payload?: {
                        params: {
                            page_token?: string;
                            page_size: string;
                            employment_id?: string;
                            job_data_id_list?: Array<string>;
                            department_id?: string;
                            job_id?: string;
                            get_all_version?: boolean;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        version_id?: string;
                                        job_level_id?: string;
                                        job_grade_id?: string;
                                        employee_type_id: string;
                                        working_hours_type_id?: string;
                                        work_location_id?: string;
                                        department_id?: string;
                                        job_id?: string;
                                        probation_start_date?: string;
                                        probation_end_date?: string;
                                        primary_job_data: boolean;
                                        employment_id: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        job_family_id?: string;
                                        assignment_start_reason?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        probation_expected_end_date?: string;
                                        probation_outcome?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        weekly_working_hours?: number;
                                        direct_manager_id?: string;
                                        dotted_line_manager_id_list?: Array<string>;
                                        second_direct_manager_id?: string;
                                        cost_center_rate?: Array<{
                                            cost_center_id?: string;
                                            rate?: number;
                                        }>;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        weekly_working_hours_v2?: number;
                                        work_shift?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        compensation_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        service_company?: string;
                                        employee_subtype_id?: string;
                                        position_id?: string;
                                        pathway_id?: string;
                                        job_data_reason?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/job_datas`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_data&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/patch document }
                 *
                 * 更新任职信息
                 *
                 * 更新任职信息
                 */
                patch: async (
                    payload?: {
                        data?: {
                            version_id?: string;
                            job_level_id?: string;
                            job_grade_id?: string;
                            employee_type_id?: string;
                            working_hours_type_id?: string;
                            work_location_id?: string;
                            department_id?: string;
                            job_id?: string;
                            probation_start_date?: string;
                            probation_end_date?: string;
                            primary_job_data?: boolean;
                            effective_time?: string;
                            expiration_time?: string;
                            job_family_id?: string;
                            assignment_start_reason?: { enum_name: string };
                            probation_expected_end_date?: string;
                            direct_manager_id?: string;
                            dotted_line_manager_id_list?: Array<string>;
                            second_direct_manager_id?: string;
                            cost_center_rate?: Array<{
                                cost_center_id?: string;
                                rate?: number;
                            }>;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            work_shift?: { enum_name: string };
                            compensation_type?: { enum_name: string };
                            service_company?: string;
                            pathway_id?: string;
                        };
                        params?: {
                            client_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                            strict_verify?: string;
                        };
                        path: { job_data_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job_data?: {
                                        id?: string;
                                        version_id?: string;
                                        job_level_id?: string;
                                        job_grade_id?: string;
                                        employee_type_id: string;
                                        working_hours_type_id?: string;
                                        work_location_id?: string;
                                        department_id?: string;
                                        job_id?: string;
                                        probation_start_date?: string;
                                        probation_end_date?: string;
                                        primary_job_data: boolean;
                                        employment_id: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        job_family_id?: string;
                                        assignment_start_reason?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        probation_expected_end_date?: string;
                                        weekly_working_hours?: number;
                                        direct_manager_id?: string;
                                        dotted_line_manager_id_list?: Array<string>;
                                        second_direct_manager_id?: string;
                                        cost_center_rate?: Array<{
                                            cost_center_id?: string;
                                            rate?: number;
                                        }>;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        weekly_working_hours_v2?: number;
                                        work_shift?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        compensation_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        service_company?: string;
                                        pathway_id?: string;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/job_datas/:job_data_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 职务序列
             */
            jobFamily: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_family&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/create document }
                 *
                 * 创建职务序列
                 *
                 * 创建职务序列
                 */
                create: async (
                    payload?: {
                        data: {
                            name: Array<{ lang: string; value: string }>;
                            active: boolean;
                            selectable?: boolean;
                            parent_id?: string;
                            pathway_ids?: Array<string>;
                            effective_time: string;
                            expiration_time?: string;
                            code?: string;
                            description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        };
                        params?: { client_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job_family?: {
                                        id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        selectable?: boolean;
                                        parent_id?: string;
                                        pathway_ids?: Array<string>;
                                        effective_time: string;
                                        expiration_time?: string;
                                        code?: string;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/job_families`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_family&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/delete document }
                 *
                 * 删除职务序列
                 *
                 * 删除职务序列
                 */
                delete: async (
                    payload?: {
                        path: { job_family_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/job_families/:job_family_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_family&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/get document }
                 *
                 * 查询单个职务序列
                 *
                 * 根据 ID 查询单个职务序列
                 */
                get: async (
                    payload?: {
                        path: { job_family_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job_family?: {
                                        id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        selectable?: boolean;
                                        parent_id?: string;
                                        pathway_ids?: Array<string>;
                                        effective_time: string;
                                        expiration_time?: string;
                                        code?: string;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/job_families/:job_family_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_family&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/list document }
                 *
                 * 批量查询职务序列
                 *
                 * 批量查询职务序列
                 */
                list: async (
                    payload?: {
                        params: { page_token?: string; page_size: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        selectable?: boolean;
                                        parent_id?: string;
                                        pathway_ids?: Array<string>;
                                        effective_time: string;
                                        expiration_time?: string;
                                        code?: string;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/job_families`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_family&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/patch document }
                 *
                 * 更新职务序列
                 *
                 * 更新职务序列
                 */
                patch: async (
                    payload?: {
                        data?: {
                            name?: Array<{ lang: string; value: string }>;
                            active?: boolean;
                            selectable?: boolean;
                            parent_id?: string;
                            pathway_ids?: Array<string>;
                            effective_time?: string;
                            expiration_time?: string;
                            code?: string;
                            description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        };
                        params?: { client_token?: string };
                        path: { job_family_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job_family?: {
                                        id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        selectable?: boolean;
                                        parent_id?: string;
                                        pathway_ids?: Array<string>;
                                        effective_time: string;
                                        expiration_time?: string;
                                        code?: string;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/job_families/:job_family_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 职务级别
             */
            jobLevel: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_level&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/create document }
                 *
                 * 创建职务级别
                 *
                 * 创建职务级别
                 */
                create: async (
                    payload?: {
                        data: {
                            level_order: number;
                            code?: string;
                            name: Array<{ lang: string; value: string }>;
                            description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            active: boolean;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            job_grade?: Array<string>;
                            pathway_ids?: Array<string>;
                        };
                        params?: { client_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job_level?: {
                                        id?: string;
                                        level_order: number;
                                        code?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        job_grade?: Array<string>;
                                        pathway_ids?: Array<string>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/job_levels`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_level&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/delete document }
                 *
                 * 删除职务级别
                 *
                 * 删除职务级别
                 */
                delete: async (
                    payload?: {
                        path: { job_level_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/job_levels/:job_level_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_level&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/get document }
                 *
                 * 查询单个职务级别
                 *
                 * 根据 ID 查询单个职务级别
                 */
                get: async (
                    payload?: {
                        path: { job_level_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job_level?: {
                                        id?: string;
                                        level_order: number;
                                        code?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        job_grade?: Array<string>;
                                        pathway_ids?: Array<string>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/job_levels/:job_level_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_level&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/list document }
                 *
                 * 批量查询职务级别
                 *
                 * 批量查询职务级别
                 */
                list: async (
                    payload?: {
                        params: { page_token?: string; page_size: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        level_order: number;
                                        code?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        job_grade?: Array<string>;
                                        pathway_ids?: Array<string>;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/job_levels`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_level&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/patch document }
                 *
                 * 更新职务级别
                 *
                 * 更新职务级别
                 */
                patch: async (
                    payload?: {
                        data?: {
                            level_order?: number;
                            code?: string;
                            name?: Array<{ lang: string; value: string }>;
                            description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            active?: boolean;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            job_grade?: Array<string>;
                            pathway_ids?: Array<string>;
                        };
                        params?: { client_token?: string };
                        path: { job_level_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job_level?: {
                                        id?: string;
                                        level_order: number;
                                        code?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        job_grade?: Array<string>;
                                        pathway_ids?: Array<string>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/job_levels/:job_level_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 休假管理
             */
            leave: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave&apiName=calendar_by_scope&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=calendar_by_scope&project=corehr&resource=leave&version=v1 document }
                 */
                calendarByScope: async (
                    payload?: {
                        params?: {
                            wk_department_id?: string;
                            wk_country_region_id?: string;
                            wk_employee_type_id?: string;
                            wk_work_location_id?: string;
                            wk_working_hours_type_id?: string;
                            wk_job_family_id?: string;
                            wk_company_id?: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { calendar_wk_id?: string };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/leaves/calendar_by_scope`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave&apiName=leave_balances&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave/leave_balances document }
                 *
                 * 批量查询员工假期余额
                 *
                 * 批量获取员工各个假期的余额数据
                 */
                leaveBalances: async (
                    payload?: {
                        params: {
                            page_token?: string;
                            page_size: string;
                            as_of_date?: string;
                            employment_id_list?: Array<string>;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            time_zone?: string;
                            include_offboard?: boolean;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    employment_leave_balance_list?: Array<{
                                        employment_id: string;
                                        employment_name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        as_of_date: string;
                                        leave_balance_list: Array<{
                                            leave_type_id: string;
                                            leave_type_name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            historical_cycles_left?: string;
                                            this_cycle_total?: string;
                                            this_cycle_taken: string;
                                            leave_balance: string;
                                            leave_duration_unit: number;
                                            history_cycle_accrual?: string;
                                            balance_in_current_cycle?: string;
                                            taken?: string;
                                            taken_history_cycle?: string;
                                            offboarding_balance?: string;
                                            taken_current_date?: string;
                                            offboarding_granted?: string;
                                        }>;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/leaves/leave_balances`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave&apiName=leave_request_history&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave/leave_request_history document }
                 *
                 * 批量查询员工请假记录
                 *
                 * 批量获取员工的请假记录数据
                 */
                leaveRequestHistory: async (
                    payload?: {
                        params: {
                            page_token?: string;
                            page_size: string;
                            employment_id_list?: Array<string>;
                            initiator_id_list?: Array<string>;
                            leave_request_status?: Array<string>;
                            leave_type_id_list?: Array<string>;
                            leave_start_date_min?: string;
                            leave_start_date_max?: string;
                            leave_end_date_min?: string;
                            leave_end_date_max?: string;
                            leave_submit_date_min?: string;
                            leave_submit_date_max?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            leave_update_time_min?: string;
                            leave_update_time_max?: string;
                            return_detail?: boolean;
                            leave_term_type?: number;
                            time_zone?: string;
                            data_source?: number;
                            db_update_time_min?: string;
                            db_update_time_max?: string;
                            wd_need_amount_zero_records?: boolean;
                            wd_need_denied_and_canceled_record?: boolean;
                            wd_paid_type?: number;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    leave_request_list?: Array<{
                                        leave_request_id: string;
                                        employment_id: string;
                                        employment_name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        leave_type_id: string;
                                        leave_type_name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        start_time: string;
                                        end_time: string;
                                        leave_duration: string;
                                        leave_duration_unit: number;
                                        leave_request_status: number;
                                        grant_source: string;
                                        return_time: string;
                                        submitted_at: string;
                                        submitted_by: string;
                                        notes: string;
                                        approval_date?: string;
                                        is_deducted?: boolean;
                                        details?: Array<{
                                            leave_request_id: string;
                                            leave_date: string;
                                            leave_duration: string;
                                            leave_duration_unit: number;
                                            paid_type: number;
                                        }>;
                                        leave_type_code?: string;
                                        actual_end_date?: string;
                                        estimated_end_date?: string;
                                        time_zone?: string;
                                        data_source?: number;
                                        leave_process_id?: Array<string>;
                                        leave_correct_process_id?: Array<string>;
                                        leave_cancel_process_id?: Array<string>;
                                        leave_return_process_id?: Array<string>;
                                        wd_paid_type?: number;
                                        leave_correct_process_info?: Array<{
                                            process_id: string;
                                            process_status: string;
                                            process_apply_time: string;
                                        }>;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/leaves/leave_request_history`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave&apiName=leave_types&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave/leave_types document }
                 *
                 * 获取假期类型列表
                 *
                 * 获取休假设置后台配置的假期类型列表（比如年假、事假、婚假等）
                 */
                leaveTypes: async (
                    payload?: {
                        params: {
                            page_token?: string;
                            page_size: string;
                            status?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    leave_type_list?: Array<{
                                        leave_type_id: string;
                                        leave_type_name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        status: number;
                                        leave_subtype_list?: Array<{
                                            leave_type_id: string;
                                            leave_type_name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        created_at: string;
                                        created_by: string;
                                        updated_at: string;
                                        updated_by: string;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/leaves/leave_types`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave&apiName=work_calendar&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=work_calendar&project=corehr&resource=leave&version=v1 document }
                 */
                workCalendar: async (
                    payload?: {
                        data: {
                            wk_calendar_ids: Array<string>;
                            wk_calendar_id_gt?: string;
                            wk_option?: {
                                count?: boolean;
                                offset?: number;
                                limit: number;
                                sort_options?: Array<{
                                    sort_field?: string;
                                    sort_order?: number;
                                    sort_i18n?: number;
                                    sort_by_strand_length?: boolean;
                                    sort_by_pinyin?: boolean;
                                    sort_by_enum_value_order?: boolean;
                                }>;
                            };
                            only_enable?: boolean;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    work_calendars?: Array<{
                                        calendar_id: string;
                                        calendar_name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        enable: boolean;
                                    }>;
                                    count?: number;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/leaves/work_calendar`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave&apiName=work_calendar_date&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=work_calendar_date&project=corehr&resource=leave&version=v1 document }
                 */
                workCalendarDate: async (
                    payload?: {
                        data: {
                            wk_calendar_ids: Array<string>;
                            dates?: Array<string>;
                            begin_date?: string;
                            end_date?: string;
                            offset?: number;
                            limit?: number;
                            ids?: Array<string>;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    calendar_dates?: Array<{
                                        calendar_id?: string;
                                        date?: string;
                                        date_type?:
                                            | "day_off"
                                            | "public_holiday"
                                            | "workday";
                                        id?: string;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/leaves/work_calendar_date`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * leave_granting_record
             */
            leaveGrantingRecord: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave_granting_record&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave_granting_record/create document }
                 *
                 * 创建假期授予记录
                 *
                 * 向飞书人事休假系统写入假期授予记录
                 */
                create: async (
                    payload?: {
                        data: {
                            leave_type_id: string;
                            employment_id: string;
                            granting_quantity: string;
                            granting_unit: number;
                            effective_date: string;
                            expiration_date?: string;
                            section_type?: number;
                            reason: Array<{ lang: string; value: string }>;
                            external_id?: string;
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    leave_granting_record?: {
                                        id: string;
                                        employment_id: string;
                                        leave_type_id: string;
                                        granting_quantity: string;
                                        granting_unit: number;
                                        effective_date: string;
                                        expiration_date: string;
                                        granted_by: number;
                                        reason: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        created_at: string;
                                        created_by: string;
                                        updated_at: string;
                                        updated_by: string;
                                        section_type?: number;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/leave_granting_records`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave_granting_record&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave_granting_record/delete document }
                 *
                 * 删除假期授予记录
                 *
                 * 删除飞书人事休假系统中的假期授予记录（仅支持删除授予来源是「手动授予」或「外部系统授予」的记录）
                 */
                delete: async (
                    payload?: {
                        path: { leave_granting_record_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/leave_granting_records/:leave_granting_record_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 地点
             */
            location: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/create document }
                 *
                 * 创建地点
                 *
                 * 创建地点
                 */
                create: async (
                    payload?: {
                        data: {
                            hiberarchy_common: {
                                parent_id?: string;
                                name: Array<{ lang: string; value: string }>;
                                type?: { enum_name: string };
                                active: boolean;
                                expiration_time?: string;
                                code?: string;
                                description?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            };
                            location_usage_list?: Array<{ enum_name: string }>;
                            address?: Array<{
                                country_region_id: string;
                                region_id?: string;
                                city_id?: string;
                                distinct_id?: string;
                                address_line1?: string;
                                address_line2?: string;
                                address_line3?: string;
                                address_line4?: string;
                                address_line5?: string;
                                address_line6?: string;
                                address_line7?: string;
                                address_line8?: string;
                                address_line9?: string;
                                local_address_line1?: string;
                                local_address_line2?: string;
                                local_address_line3?: string;
                                local_address_line4?: string;
                                local_address_line5?: string;
                                local_address_line6?: string;
                                local_address_line7?: string;
                                local_address_line8?: string;
                                local_address_line9?: string;
                                postal_code?: string;
                                address_type_list?: Array<{
                                    enum_name: string;
                                }>;
                                is_primary?: boolean;
                                is_public?: boolean;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            working_hours_type_id?: string;
                            effective_time: string;
                            expiration_time?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            locale?: { enum_name: string };
                            time_zone_id?: string;
                            display_language_id?: string;
                        };
                        params?: { client_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    location?: {
                                        id?: string;
                                        hiberarchy_common: {
                                            parent_id?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            active: boolean;
                                            effective_time?: string;
                                            expiration_time?: string;
                                            code?: string;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            tree_order?: string;
                                            list_order?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        location_usage_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        address?: Array<{
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            address_type_list?: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        working_hours_type_id?: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        locale?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        time_zone_id?: string;
                                        display_language_id?: string;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/locations`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/delete document }
                 *
                 * 删除地点
                 *
                 * 删除地点
                 */
                delete: async (
                    payload?: {
                        path: { location_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/locations/:location_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/get document }
                 *
                 * 查询单个地点
                 *
                 * 根据 ID 查询单个地点
                 */
                get: async (
                    payload?: {
                        path: { location_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    location?: {
                                        id?: string;
                                        hiberarchy_common: {
                                            parent_id?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            active: boolean;
                                            effective_time?: string;
                                            expiration_time?: string;
                                            code?: string;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            tree_order?: string;
                                            list_order?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        location_usage_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        address?: Array<{
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            address_type_list?: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        working_hours_type_id?: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        locale?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        time_zone_id?: string;
                                        display_language_id?: string;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/locations/:location_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/list document }
                 *
                 * 批量查询地点
                 *
                 * 批量查询地点
                 */
                list: async (
                    payload?: {
                        params: { page_token?: string; page_size: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        hiberarchy_common: {
                                            parent_id?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            active: boolean;
                                            effective_time?: string;
                                            expiration_time?: string;
                                            code?: string;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            tree_order?: string;
                                            list_order?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        location_usage_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        address?: Array<{
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            address_type_list?: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        working_hours_type_id?: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        locale?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        time_zone_id?: string;
                                        display_language_id?: string;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/locations`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 国家证件类型
             */
            nationalIdType: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=national_id_type&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/national_id_type/create document }
                 *
                 * 创建国家证件类型
                 *
                 * 创建国家证件类型
                 */
                create: async (
                    payload?: {
                        data: {
                            country_region_id: string;
                            name: Array<{ lang: string; value: string }>;
                            active: boolean;
                            validation_rule: string;
                            validation_rule_description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            code: string;
                            identification_type: { enum_name: string };
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        };
                        params?: { client_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    national_id_type?: {
                                        id?: string;
                                        country_region_id: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        validation_rule: string;
                                        validation_rule_description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        code: string;
                                        identification_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/national_id_types`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=national_id_type&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/national_id_type/delete document }
                 *
                 * 删除国家证件类型
                 *
                 * 删除国家证件类型
                 */
                delete: async (
                    payload?: {
                        path: { national_id_type_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/national_id_types/:national_id_type_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=national_id_type&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/national_id_type/get document }
                 *
                 * 查询单个国家证件类型
                 *
                 * 根据 ID 查询单个国家证件类型
                 */
                get: async (
                    payload?: {
                        path: { national_id_type_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    national_id_type?: {
                                        id?: string;
                                        country_region_id: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        validation_rule: string;
                                        validation_rule_description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        code: string;
                                        identification_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/national_id_types/:national_id_type_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=national_id_type&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/national_id_type/list document }
                 *
                 * 批量查询国家证件类型
                 *
                 * 批量查询国家证件类型
                 */
                list: async (
                    payload?: {
                        params: {
                            page_token?: string;
                            page_size: string;
                            identification_type?: string;
                            code?: string;
                            country_region_id?: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        country_region_id: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        validation_rule: string;
                                        validation_rule_description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        code: string;
                                        identification_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/national_id_types`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=national_id_type&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/national_id_type/patch document }
                 *
                 * 更新国家证件类型
                 *
                 * 更新国家证件类型
                 */
                patch: async (
                    payload?: {
                        data?: {
                            country_region_id?: string;
                            name?: Array<{ lang: string; value: string }>;
                            active?: boolean;
                            validation_rule?: string;
                            validation_rule_description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            code?: string;
                            identification_type?: { enum_name: string };
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        };
                        params?: { client_token?: string };
                        path: { national_id_type_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    national_id_type?: {
                                        id?: string;
                                        country_region_id: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        validation_rule: string;
                                        validation_rule_description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        code: string;
                                        identification_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/national_id_types/:national_id_type_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 员工离职
             */
            offboarding: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=offboarding&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/offboarding/query document }
                 *
                 * 查询员工离职原因列表
                 *
                 * 查询「飞书人事」-「离职设置」中的离职原因
                 */
                query: async (
                    payload?: {
                        data?: {
                            active?: boolean;
                            offboarding_reason_unique_identifier?: Array<string>;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        offboarding_reason_unique_identifier?: string;
                                        name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active?: boolean;
                                        parent_offboarding_reason_unique_identifier?: string;
                                        created_time?: string;
                                        updated_time?: string;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/offboardings/query`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                searchWithIterator: async (
                    payload?: {
                        data?: {
                            employment_ids?: Array<string>;
                            apply_initiating_time_start?: string;
                            apply_initiating_time_end?: string;
                            apply_finished_time_start?: string;
                            apply_finished_time_end?: string;
                            expected_offboarding_date_start?: string;
                            expected_offboarding_date_end?: string;
                            offboarding_date_start?: string;
                            offboarding_date_end?: string;
                            statuses?: Array<
                                | "Approving"
                                | "Approved"
                                | "Offboarded"
                                | "Rejected"
                                | "Withdrawn"
                                | "NoNeedApproval"
                            >;
                            reasons?: Array<string>;
                            employee_reasons?: Array<string>;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v1/offboardings/search`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        initiating_type?: string;
                                                        status?:
                                                            | "Approving"
                                                            | "Approved"
                                                            | "Offboarded"
                                                            | "Rejected"
                                                            | "Withdrawn"
                                                            | "NoNeedApproval";
                                                        application_info?: {
                                                            apply_initiator_id?: string;
                                                            apply_initiating_time?: string;
                                                            apply_finish_time?: string;
                                                            process_id?: string;
                                                        };
                                                        offboarding_info?: {
                                                            employment_id?: string;
                                                            hrbp_id?: Array<string>;
                                                            expected_offboarding_date?: string;
                                                            offboarding_date?: string;
                                                            reason?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            reason_explanation?: string;
                                                            employee_reason?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            employee_reason_explanation?: string;
                                                            add_block_list?: string;
                                                            block_reason?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            block_reason_explanation?: string;
                                                            custom_fields?: Array<{
                                                                custom_api_name: string;
                                                                name?: {
                                                                    zh_cn?: string;
                                                                    en_us?: string;
                                                                };
                                                                type?: number;
                                                                value: string;
                                                            }>;
                                                            retain_account?: boolean;
                                                            social_insurance_end_date?: string;
                                                            provident_fund_end_date?: string;
                                                            enforce_noncompete_agreement?: boolean;
                                                            noncompete_agreement_id?: string;
                                                            noncompete_agreement_company?: string;
                                                            noncompete_agreement_start_date?: string;
                                                            noncompete_agreement_end_date?: string;
                                                            sign_type?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            signature_file?: string;
                                                            last_attendance_date?: string;
                                                            is_transfer_with_workforce?: boolean;
                                                        };
                                                        offboarding_checklist?: {
                                                            checklist_status?: string;
                                                            checklist_start_time?: string;
                                                            checklist_finish_time?: string;
                                                            checklist_process_id?: string;
                                                        };
                                                        offboarding_id?: string;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=offboarding&apiName=search&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=offboarding&version=v1 document }
                 *
                 * 根据 雇佣 ID 查询员工离职信息
                 */
                search: async (
                    payload?: {
                        data?: {
                            employment_ids?: Array<string>;
                            apply_initiating_time_start?: string;
                            apply_initiating_time_end?: string;
                            apply_finished_time_start?: string;
                            apply_finished_time_end?: string;
                            expected_offboarding_date_start?: string;
                            expected_offboarding_date_end?: string;
                            offboarding_date_start?: string;
                            offboarding_date_end?: string;
                            statuses?: Array<
                                | "Approving"
                                | "Approved"
                                | "Offboarded"
                                | "Rejected"
                                | "Withdrawn"
                                | "NoNeedApproval"
                            >;
                            reasons?: Array<string>;
                            employee_reasons?: Array<string>;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        initiating_type?: string;
                                        status?:
                                            | "Approving"
                                            | "Approved"
                                            | "Offboarded"
                                            | "Rejected"
                                            | "Withdrawn"
                                            | "NoNeedApproval";
                                        application_info?: {
                                            apply_initiator_id?: string;
                                            apply_initiating_time?: string;
                                            apply_finish_time?: string;
                                            process_id?: string;
                                        };
                                        offboarding_info?: {
                                            employment_id?: string;
                                            hrbp_id?: Array<string>;
                                            expected_offboarding_date?: string;
                                            offboarding_date?: string;
                                            reason?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            reason_explanation?: string;
                                            employee_reason?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            employee_reason_explanation?: string;
                                            add_block_list?: string;
                                            block_reason?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            block_reason_explanation?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                            retain_account?: boolean;
                                            social_insurance_end_date?: string;
                                            provident_fund_end_date?: string;
                                            enforce_noncompete_agreement?: boolean;
                                            noncompete_agreement_id?: string;
                                            noncompete_agreement_company?: string;
                                            noncompete_agreement_start_date?: string;
                                            noncompete_agreement_end_date?: string;
                                            sign_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            signature_file?: string;
                                            last_attendance_date?: string;
                                            is_transfer_with_workforce?: boolean;
                                        };
                                        offboarding_checklist?: {
                                            checklist_status?: string;
                                            checklist_start_time?: string;
                                            checklist_finish_time?: string;
                                            checklist_process_id?: string;
                                        };
                                        offboarding_id?: string;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/offboardings/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=offboarding&apiName=submit&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/offboarding/submit document }
                 *
                 * 操作员工离职
                 *
                 * 操作员工直接离职
                 */
                submit: async (
                    payload?: {
                        data: {
                            offboarding_mode: number;
                            employment_id: string;
                            offboarding_date: string;
                            offboarding_reason_unique_identifier: string;
                            offboarding_reason_explanation?: string;
                            initiator_id?: string;
                            add_block_list?: boolean;
                            block_reason?: string;
                            block_reason_explanation?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    offboarding_id?: string;
                                    employment_id?: string;
                                    offboarding_reason_unique_identifier?: string;
                                    offboarding_date?: string;
                                    offboarding_reason_explanation?: string;
                                    add_block_list?: boolean;
                                    block_reason?: string;
                                    block_reason_explanation?: string;
                                    created_time?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/offboardings/submit`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 个人信息
             */
            person: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=person&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/person/create document }
                 *
                 * 创建个人信息
                 *
                 * 创建人员的个人信息
                 */
                create: async (
                    payload?: {
                        data: {
                            name_list: Array<{
                                local_primary?: string;
                                local_first_name?: string;
                                country_region_id: string;
                                name_type: { enum_name: string };
                                local_first_name_2?: string;
                                local_primary_2?: string;
                                additional_name_type?: { enum_name: string };
                                first_name?: string;
                                full_name?: string;
                                hereditary?: string;
                                custom_name?: string;
                                custom_local_name?: string;
                                middle_name?: string;
                                name_primary?: string;
                                secondary?: string;
                                social?: { enum_name: string };
                                tertiary?: string;
                                title?: { enum_name: string };
                                local_middle_name?: string;
                                local_secondary?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            gender?: { enum_name: string };
                            date_of_birth?: string;
                            nationality_id?: string;
                            race?: { enum_name: string };
                            marital_status?: { enum_name: string };
                            phone_list?: Array<{
                                international_area_code?: { enum_name: string };
                                phone_number: string;
                                device_type?: { enum_name: string };
                                phone_usage?: { enum_name: string };
                                is_primary?: boolean;
                                is_public?: boolean;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            address_list?: Array<{
                                country_region_id: string;
                                region_id?: string;
                                city_id?: string;
                                distinct_id?: string;
                                address_line1?: string;
                                address_line2?: string;
                                address_line3?: string;
                                address_line4?: string;
                                address_line5?: string;
                                address_line6?: string;
                                address_line7?: string;
                                address_line8?: string;
                                address_line9?: string;
                                local_address_line1?: string;
                                local_address_line2?: string;
                                local_address_line3?: string;
                                local_address_line4?: string;
                                local_address_line5?: string;
                                local_address_line6?: string;
                                local_address_line7?: string;
                                local_address_line8?: string;
                                local_address_line9?: string;
                                postal_code?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            email_list?: Array<{
                                email: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            work_experience_list?: Array<{
                                company_organization?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                department?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                job?: Array<{ lang: string; value: string }>;
                                description?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                start_date?: string;
                                end_date?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            education_list?: Array<{
                                school: Array<{ lang: string; value: string }>;
                                level_of_education?: { enum_name: string };
                                start_date?: string;
                                end_date?: string;
                                field_of_study?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                degree?: { enum_name: string };
                                school_name?: { enum_name: string };
                                field_of_study_name?: { enum_name: string };
                                country_region_id?: string;
                                expected_end_date?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            bank_account_list?: Array<{
                                bank_name?: string;
                                bank_account_number: string;
                                account_holder: string;
                                bank?: { enum_name: string };
                                bank_identification_code?: string;
                                branch_name?: string;
                                bank_id?: string;
                                branch_id?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                                country_region_id?: string;
                                bank_account_usage?: Array<{
                                    enum_name: string;
                                }>;
                                bank_account_type?: { enum_name: string };
                                currency_id?: string;
                            }>;
                            national_id_list?: Array<{
                                national_id_type_id: string;
                                national_id_number: string;
                                issue_date?: string;
                                expiration_date?: string;
                                country_region_id: string;
                                issued_by?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            dependent_list?: Array<{
                                name?: {
                                    local_primary?: string;
                                    local_first_name?: string;
                                    country_region_id: string;
                                    name_type: { enum_name: string };
                                    local_first_name_2?: string;
                                    local_primary_2?: string;
                                    additional_name_type?: {
                                        enum_name: string;
                                    };
                                    first_name?: string;
                                    full_name?: string;
                                    hereditary?: string;
                                    custom_name?: string;
                                    custom_local_name?: string;
                                    middle_name?: string;
                                    name_primary?: string;
                                    secondary?: string;
                                    social?: { enum_name: string };
                                    tertiary?: string;
                                    title?: { enum_name: string };
                                    local_middle_name?: string;
                                    local_secondary?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                                relationship: { enum_name: string };
                                gender?: { enum_name: string };
                                date_of_birth?: string;
                                nationality_id?: string;
                                national_id_list?: Array<{
                                    national_id_type_id: string;
                                    national_id_number: string;
                                    issue_date?: string;
                                    expiration_date?: string;
                                    country_region_id: string;
                                    issued_by?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                spouses_working_status?: { enum_name: string };
                                is_this_person_covered_by_health_insurance?: boolean;
                                is_this_person_allowed_for_tax_deduction?: boolean;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                                dependent_name?: string;
                                employer?: string;
                                job?: string;
                                phone?: {
                                    international_area_code?: {
                                        enum_name: string;
                                    };
                                    phone_number: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                                address?: {
                                    id?: string;
                                    country_region_id: string;
                                    region_id?: string;
                                    city_id?: string;
                                    distinct_id?: string;
                                    address_line1?: string;
                                    address_line2?: string;
                                    address_line3?: string;
                                    address_line4?: string;
                                    address_line5?: string;
                                    address_line6?: string;
                                    address_line7?: string;
                                    address_line8?: string;
                                    address_line9?: string;
                                    local_address_line1?: string;
                                    local_address_line2?: string;
                                    local_address_line3?: string;
                                    local_address_line4?: string;
                                    local_address_line5?: string;
                                    local_address_line6?: string;
                                    local_address_line7?: string;
                                    local_address_line8?: string;
                                    local_address_line9?: string;
                                    postal_code?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                                birth_certificate_of_child?: Array<{
                                    id?: string;
                                }>;
                            }>;
                            emergency_contact_list?: Array<{
                                name?: {
                                    local_primary?: string;
                                    local_first_name?: string;
                                    country_region_id: string;
                                    name_type: { enum_name: string };
                                    local_first_name_2?: string;
                                    local_primary_2?: string;
                                    additional_name_type?: {
                                        enum_name: string;
                                    };
                                    first_name?: string;
                                    full_name?: string;
                                    hereditary?: string;
                                    custom_name?: string;
                                    custom_local_name?: string;
                                    middle_name?: string;
                                    name_primary?: string;
                                    secondary?: string;
                                    social?: { enum_name: string };
                                    tertiary?: string;
                                    title?: { enum_name: string };
                                    local_middle_name?: string;
                                    local_secondary?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                                relationship?: { enum_name: string };
                                phone_ist?: Array<{
                                    international_area_code?: {
                                        enum_name: string;
                                    };
                                    phone_number: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                                legal_name?: string;
                            }>;
                            date_entered_workforce?: string;
                            profile_image_id?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            resident_tax_id_list?: Array<string>;
                            age?: number;
                            personal_profile?: Array<{
                                personal_profile_type?: { enum_name: string };
                                files?: Array<{ id?: string }>;
                            }>;
                        };
                        params?: { client_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    person?: {
                                        phone_number?: string;
                                        legal_name?: string;
                                        preferred_name?: string;
                                        id?: string;
                                        name_list: Array<{
                                            local_primary?: string;
                                            local_first_name?: string;
                                            country_region_id: string;
                                            name_type: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_first_name_2?: string;
                                            local_primary_2?: string;
                                            additional_name_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            first_name?: string;
                                            full_name?: string;
                                            hereditary?: string;
                                            middle_name?: string;
                                            name_primary?: string;
                                            secondary?: string;
                                            social?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            tertiary?: string;
                                            title?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_middle_name?: string;
                                            local_secondary?: string;
                                            display_name_local_and_western_script?: string;
                                            display_name_local_script?: string;
                                            display_name_western_script?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        gender?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        date_of_birth?: string;
                                        nationality_id?: string;
                                        race?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        marital_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_list?: Array<{
                                            international_area_code?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                            formatted_phone_number?: string;
                                            device_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_usage?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        address_list?: Array<{
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        email_list?: Array<{
                                            email: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        work_experience_list?: Array<{
                                            company_organization?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            department?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            job?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            start_date?: string;
                                            end_date?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        education_list?: Array<{
                                            school: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            level_of_education?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            start_date?: string;
                                            end_date?: string;
                                            field_of_study?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            degree?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            school_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            field_of_study_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            country_region_id?: string;
                                            expected_end_date?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        bank_account_list?: Array<{
                                            bank_name?: string;
                                            bank_account_number: string;
                                            account_holder: string;
                                            bank?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            bank_identification_code?: string;
                                            branch_name?: string;
                                            bank_id?: string;
                                            branch_id?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                            country_region_id?: string;
                                            bank_account_usage?: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            bank_account_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            currency_id?: string;
                                        }>;
                                        national_id_list?: Array<{
                                            national_id_type_id: string;
                                            national_id_number: string;
                                            issue_date?: string;
                                            expiration_date?: string;
                                            country_region_id: string;
                                            issued_by?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        dependent_list?: Array<{
                                            name?: {
                                                local_primary?: string;
                                                local_first_name?: string;
                                                country_region_id: string;
                                                name_type: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_first_name_2?: string;
                                                local_primary_2?: string;
                                                additional_name_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                first_name?: string;
                                                full_name?: string;
                                                hereditary?: string;
                                                custom_name?: string;
                                                custom_local_name?: string;
                                                middle_name?: string;
                                                name_primary?: string;
                                                secondary?: string;
                                                social?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                tertiary?: string;
                                                title?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_middle_name?: string;
                                                local_secondary?: string;
                                                display_name_local_and_western_script?: string;
                                                display_name_local_script?: string;
                                                display_name_western_script?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            };
                                            relationship: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            gender?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            date_of_birth?: string;
                                            nationality_id?: string;
                                            national_id_list?: Array<{
                                                national_id_type_id: string;
                                                national_id_number: string;
                                                issue_date?: string;
                                                expiration_date?: string;
                                                country_region_id: string;
                                                issued_by?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            spouses_working_status?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            is_this_person_covered_by_health_insurance?: boolean;
                                            is_this_person_allowed_for_tax_deduction?: boolean;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                            dependent_name?: string;
                                            employer?: string;
                                            job?: string;
                                            phone?: {
                                                international_area_code?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_number: string;
                                                formatted_phone_number?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            };
                                            address?: {
                                                full_address_local_script?: string;
                                                full_address_western_script?: string;
                                                id?: string;
                                                country_region_id: string;
                                                region_id?: string;
                                                city_id?: string;
                                                distinct_id?: string;
                                                address_line1?: string;
                                                address_line2?: string;
                                                address_line3?: string;
                                                address_line4?: string;
                                                address_line5?: string;
                                                address_line6?: string;
                                                address_line7?: string;
                                                address_line8?: string;
                                                address_line9?: string;
                                                local_address_line1?: string;
                                                local_address_line2?: string;
                                                local_address_line3?: string;
                                                local_address_line4?: string;
                                                local_address_line5?: string;
                                                local_address_line6?: string;
                                                local_address_line7?: string;
                                                local_address_line8?: string;
                                                local_address_line9?: string;
                                                postal_code?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            };
                                            birth_certificate_of_child?: Array<{
                                                id?: string;
                                            }>;
                                        }>;
                                        emergency_contact_list?: Array<{
                                            name?: {
                                                local_primary?: string;
                                                local_first_name?: string;
                                                country_region_id: string;
                                                name_type: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_first_name_2?: string;
                                                local_primary_2?: string;
                                                additional_name_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                first_name?: string;
                                                full_name?: string;
                                                hereditary?: string;
                                                custom_name?: string;
                                                custom_local_name?: string;
                                                middle_name?: string;
                                                name_primary?: string;
                                                secondary?: string;
                                                social?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                tertiary?: string;
                                                title?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_middle_name?: string;
                                                local_secondary?: string;
                                                display_name_local_and_western_script?: string;
                                                display_name_local_script?: string;
                                                display_name_western_script?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            };
                                            relationship?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_ist?: Array<{
                                                international_area_code?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_number: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                            legal_name?: string;
                                        }>;
                                        date_entered_workforce?: string;
                                        profile_image_id?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        email_address?: string;
                                        resident_tax_id_list?: Array<string>;
                                        age?: number;
                                        highest_level_of_education?: {
                                            school: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            level_of_education?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            start_date?: string;
                                            end_date?: string;
                                            field_of_study?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            degree?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            school_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            field_of_study_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            country_region_id?: string;
                                            expected_end_date?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        highest_degree_of_education?: {
                                            school: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            level_of_education?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            start_date?: string;
                                            end_date?: string;
                                            field_of_study?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            degree?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            school_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            field_of_study_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            country_region_id?: string;
                                            expected_end_date?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        personal_profile?: Array<{
                                            personal_profile_id?: string;
                                            personal_profile_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            files?: Array<{ id?: string }>;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/persons`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=person&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/person/delete document }
                 *
                 * 删除个人信息
                 *
                 * 删除人员的个人信息
                 */
                delete: async (
                    payload?: {
                        path: { person_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/persons/:person_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=person&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/person/get document }
                 *
                 * 查询单个个人信息
                 *
                 * 根据 ID 查询单个人员的个人信息
                 */
                get: async (
                    payload?: {
                        params?: { user_id_type?: "people_employee_id" };
                        path: { person_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    person?: {
                                        phone_number?: string;
                                        legal_name?: string;
                                        preferred_name?: string;
                                        id?: string;
                                        name_list: Array<{
                                            local_primary?: string;
                                            local_first_name?: string;
                                            country_region_id: string;
                                            name_type: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_first_name_2?: string;
                                            local_primary_2?: string;
                                            additional_name_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            first_name?: string;
                                            full_name?: string;
                                            hereditary?: string;
                                            middle_name?: string;
                                            name_primary?: string;
                                            secondary?: string;
                                            social?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            tertiary?: string;
                                            title?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_middle_name?: string;
                                            local_secondary?: string;
                                            display_name_local_and_western_script?: string;
                                            display_name_local_script?: string;
                                            display_name_western_script?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        gender?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        date_of_birth?: string;
                                        nationality_id?: string;
                                        nationality_id_v2?: string;
                                        race?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        marital_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_list?: Array<{
                                            international_area_code?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                            formatted_phone_number?: string;
                                            device_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_usage?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        address_list?: Array<{
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            city_id_v2?: string;
                                            district_id_v2?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            address_type_list?: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        email_list?: Array<{
                                            email: string;
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                            email_usage?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        work_experience_list?: Array<{
                                            company_organization?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            department?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            job?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            start_date?: string;
                                            end_date?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        education_list?: Array<{
                                            school: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            level_of_education?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            start_date?: string;
                                            end_date?: string;
                                            field_of_study?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            degree?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            school_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            field_of_study_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            country_region_id?: string;
                                            expected_end_date?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        bank_account_list?: Array<{
                                            bank_name?: string;
                                            bank_account_number: string;
                                            account_holder: string;
                                            bank?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            bank_identification_code?: string;
                                            branch_name?: string;
                                            bank_id?: string;
                                            branch_id?: string;
                                            bank_id_v2?: string;
                                            branch_id_v2?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                            country_region_id?: string;
                                            bank_account_usage?: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            bank_account_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            currency_id?: string;
                                        }>;
                                        national_id_list?: Array<{
                                            national_id_type_id: string;
                                            national_id_number: string;
                                            issue_date?: string;
                                            expiration_date?: string;
                                            country_region_id: string;
                                            issued_by?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        dependent_list?: Array<{
                                            name?: {
                                                local_primary?: string;
                                                local_first_name?: string;
                                                country_region_id: string;
                                                name_type: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_first_name_2?: string;
                                                local_primary_2?: string;
                                                additional_name_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                first_name?: string;
                                                full_name?: string;
                                                hereditary?: string;
                                                custom_name?: string;
                                                custom_local_name?: string;
                                                middle_name?: string;
                                                name_primary?: string;
                                                secondary?: string;
                                                social?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                tertiary?: string;
                                                title?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_middle_name?: string;
                                                local_secondary?: string;
                                                display_name_local_and_western_script?: string;
                                                display_name_local_script?: string;
                                                display_name_western_script?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            };
                                            relationship: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            gender?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            date_of_birth?: string;
                                            nationality_id?: string;
                                            nationality_id_v2?: string;
                                            national_id_list?: Array<{
                                                national_id_type_id: string;
                                                national_id_number: string;
                                                issue_date?: string;
                                                expiration_date?: string;
                                                country_region_id: string;
                                                issued_by?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            spouses_working_status?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            is_this_person_covered_by_health_insurance?: boolean;
                                            is_this_person_allowed_for_tax_deduction?: boolean;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                            dependent_name?: string;
                                            employer?: string;
                                            job?: string;
                                            phone?: {
                                                international_area_code?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_number: string;
                                                formatted_phone_number?: string;
                                                device_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_usage?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                is_primary?: boolean;
                                                is_public?: boolean;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            };
                                            address?: {
                                                full_address_local_script?: string;
                                                full_address_western_script?: string;
                                                id?: string;
                                                country_region_id: string;
                                                region_id?: string;
                                                city_id?: string;
                                                distinct_id?: string;
                                                city_id_v2?: string;
                                                district_id_v2?: string;
                                                address_line1?: string;
                                                address_line2?: string;
                                                address_line3?: string;
                                                address_line4?: string;
                                                address_line5?: string;
                                                address_line6?: string;
                                                address_line7?: string;
                                                address_line8?: string;
                                                address_line9?: string;
                                                local_address_line1?: string;
                                                local_address_line2?: string;
                                                local_address_line3?: string;
                                                local_address_line4?: string;
                                                local_address_line5?: string;
                                                local_address_line6?: string;
                                                local_address_line7?: string;
                                                local_address_line8?: string;
                                                local_address_line9?: string;
                                                postal_code?: string;
                                                address_type_list?: Array<{
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                }>;
                                                is_primary?: boolean;
                                                is_public?: boolean;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            };
                                            birth_certificate_of_child?: Array<{
                                                id?: string;
                                            }>;
                                        }>;
                                        emergency_contact_list?: Array<{
                                            name?: {
                                                local_primary?: string;
                                                local_first_name?: string;
                                                country_region_id: string;
                                                name_type: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_first_name_2?: string;
                                                local_primary_2?: string;
                                                additional_name_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                first_name?: string;
                                                full_name?: string;
                                                hereditary?: string;
                                                custom_name?: string;
                                                custom_local_name?: string;
                                                middle_name?: string;
                                                name_primary?: string;
                                                secondary?: string;
                                                social?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                tertiary?: string;
                                                title?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_middle_name?: string;
                                                local_secondary?: string;
                                                display_name_local_and_western_script?: string;
                                                display_name_local_script?: string;
                                                display_name_western_script?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            };
                                            relationship?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_ist?: Array<{
                                                international_area_code?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_number: string;
                                                formatted_phone_number?: string;
                                                device_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_usage?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                is_primary?: boolean;
                                                is_public?: boolean;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                            legal_name?: string;
                                        }>;
                                        date_entered_workforce?: string;
                                        profile_image_id?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        email_address?: string;
                                        resident_tax_id_list?: Array<string>;
                                        age?: number;
                                        highest_level_of_education?: {
                                            school: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            level_of_education?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            start_date?: string;
                                            end_date?: string;
                                            field_of_study?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            degree?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            school_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            field_of_study_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            country_region_id?: string;
                                            expected_end_date?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        highest_degree_of_education?: {
                                            school: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            level_of_education?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            start_date?: string;
                                            end_date?: string;
                                            field_of_study?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            degree?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            school_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            field_of_study_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            country_region_id?: string;
                                            expected_end_date?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        personal_profile?: Array<{
                                            personal_profile_id?: string;
                                            personal_profile_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            files?: Array<{ id?: string }>;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/persons/:person_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=person&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/person/patch document }
                 *
                 * 更新个人信息
                 *
                 * 更新个人信息
                 */
                patch: async (
                    payload?: {
                        data?: {
                            name_list?: Array<{
                                local_primary?: string;
                                local_first_name?: string;
                                country_region_id: string;
                                name_type: { enum_name: string };
                                local_first_name_2?: string;
                                local_primary_2?: string;
                                additional_name_type?: { enum_name: string };
                                first_name?: string;
                                full_name?: string;
                                hereditary?: string;
                                custom_name?: string;
                                custom_local_name?: string;
                                middle_name?: string;
                                name_primary?: string;
                                secondary?: string;
                                social?: { enum_name: string };
                                tertiary?: string;
                                title?: { enum_name: string };
                                local_middle_name?: string;
                                local_secondary?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            gender?: { enum_name: string };
                            date_of_birth?: string;
                            nationality_id?: string;
                            race?: { enum_name: string };
                            marital_status?: { enum_name: string };
                            phone_list?: Array<{
                                international_area_code?: { enum_name: string };
                                phone_number: string;
                                device_type?: { enum_name: string };
                                phone_usage?: { enum_name: string };
                                is_primary?: boolean;
                                is_public?: boolean;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            address_list?: Array<{
                                country_region_id: string;
                                region_id?: string;
                                city_id?: string;
                                distinct_id?: string;
                                address_line1?: string;
                                address_line2?: string;
                                address_line3?: string;
                                address_line4?: string;
                                address_line5?: string;
                                address_line6?: string;
                                address_line7?: string;
                                address_line8?: string;
                                address_line9?: string;
                                local_address_line1?: string;
                                local_address_line2?: string;
                                local_address_line3?: string;
                                local_address_line4?: string;
                                local_address_line5?: string;
                                local_address_line6?: string;
                                local_address_line7?: string;
                                local_address_line8?: string;
                                local_address_line9?: string;
                                postal_code?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            email_list?: Array<{
                                email: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            work_experience_list?: Array<{
                                company_organization?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                department?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                job?: Array<{ lang: string; value: string }>;
                                description?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                start_date?: string;
                                end_date?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            education_list?: Array<{
                                school: Array<{ lang: string; value: string }>;
                                level_of_education?: { enum_name: string };
                                start_date?: string;
                                end_date?: string;
                                field_of_study?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                degree?: { enum_name: string };
                                school_name?: { enum_name: string };
                                field_of_study_name?: { enum_name: string };
                                country_region_id?: string;
                                expected_end_date?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            bank_account_list?: Array<{
                                bank_name?: string;
                                bank_account_number: string;
                                account_holder: string;
                                bank?: { enum_name: string };
                                bank_identification_code?: string;
                                branch_name?: string;
                                bank_id?: string;
                                branch_id?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                                country_region_id?: string;
                                bank_account_usage?: Array<{
                                    enum_name: string;
                                }>;
                                bank_account_type?: { enum_name: string };
                                currency_id?: string;
                            }>;
                            national_id_list?: Array<{
                                national_id_type_id: string;
                                national_id_number: string;
                                issue_date?: string;
                                expiration_date?: string;
                                country_region_id: string;
                                issued_by?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            dependent_list?: Array<{
                                name?: {
                                    local_primary?: string;
                                    local_first_name?: string;
                                    country_region_id: string;
                                    name_type: { enum_name: string };
                                    local_first_name_2?: string;
                                    local_primary_2?: string;
                                    additional_name_type?: {
                                        enum_name: string;
                                    };
                                    first_name?: string;
                                    full_name?: string;
                                    hereditary?: string;
                                    custom_name?: string;
                                    custom_local_name?: string;
                                    middle_name?: string;
                                    name_primary?: string;
                                    secondary?: string;
                                    social?: { enum_name: string };
                                    tertiary?: string;
                                    title?: { enum_name: string };
                                    local_middle_name?: string;
                                    local_secondary?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                                relationship: { enum_name: string };
                                gender?: { enum_name: string };
                                date_of_birth?: string;
                                nationality_id?: string;
                                national_id_list?: Array<{
                                    national_id_type_id: string;
                                    national_id_number: string;
                                    issue_date?: string;
                                    expiration_date?: string;
                                    country_region_id: string;
                                    issued_by?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                spouses_working_status?: { enum_name: string };
                                is_this_person_covered_by_health_insurance?: boolean;
                                is_this_person_allowed_for_tax_deduction?: boolean;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                                dependent_name?: string;
                                employer?: string;
                                job?: string;
                                phone?: {
                                    international_area_code?: {
                                        enum_name: string;
                                    };
                                    phone_number: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                                address?: {
                                    id?: string;
                                    country_region_id: string;
                                    region_id?: string;
                                    city_id?: string;
                                    distinct_id?: string;
                                    address_line1?: string;
                                    address_line2?: string;
                                    address_line3?: string;
                                    address_line4?: string;
                                    address_line5?: string;
                                    address_line6?: string;
                                    address_line7?: string;
                                    address_line8?: string;
                                    address_line9?: string;
                                    local_address_line1?: string;
                                    local_address_line2?: string;
                                    local_address_line3?: string;
                                    local_address_line4?: string;
                                    local_address_line5?: string;
                                    local_address_line6?: string;
                                    local_address_line7?: string;
                                    local_address_line8?: string;
                                    local_address_line9?: string;
                                    postal_code?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                                birth_certificate_of_child?: Array<{
                                    id?: string;
                                }>;
                            }>;
                            emergency_contact_list?: Array<{
                                name?: {
                                    local_primary?: string;
                                    local_first_name?: string;
                                    country_region_id: string;
                                    name_type: { enum_name: string };
                                    local_first_name_2?: string;
                                    local_primary_2?: string;
                                    additional_name_type?: {
                                        enum_name: string;
                                    };
                                    first_name?: string;
                                    full_name?: string;
                                    hereditary?: string;
                                    custom_name?: string;
                                    custom_local_name?: string;
                                    middle_name?: string;
                                    name_primary?: string;
                                    secondary?: string;
                                    social?: { enum_name: string };
                                    tertiary?: string;
                                    title?: { enum_name: string };
                                    local_middle_name?: string;
                                    local_secondary?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                                relationship?: { enum_name: string };
                                phone_ist?: Array<{
                                    international_area_code?: {
                                        enum_name: string;
                                    };
                                    phone_number: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                                legal_name?: string;
                            }>;
                            date_entered_workforce?: string;
                            profile_image_id?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            resident_tax_id_list?: Array<string>;
                            age?: number;
                            personal_profile?: Array<{
                                personal_profile_type?: { enum_name: string };
                                files?: Array<{ id?: string }>;
                            }>;
                        };
                        params?: { client_token?: string };
                        path: { person_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    person?: {
                                        phone_number?: string;
                                        legal_name?: string;
                                        preferred_name?: string;
                                        id?: string;
                                        name_list: Array<{
                                            local_primary?: string;
                                            local_first_name?: string;
                                            country_region_id: string;
                                            name_type: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_first_name_2?: string;
                                            local_primary_2?: string;
                                            additional_name_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            first_name?: string;
                                            full_name?: string;
                                            hereditary?: string;
                                            middle_name?: string;
                                            name_primary?: string;
                                            secondary?: string;
                                            social?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            tertiary?: string;
                                            title?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_middle_name?: string;
                                            local_secondary?: string;
                                            display_name_local_and_western_script?: string;
                                            display_name_local_script?: string;
                                            display_name_western_script?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        gender?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        date_of_birth?: string;
                                        nationality_id?: string;
                                        race?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        marital_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_list?: Array<{
                                            international_area_code?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                            formatted_phone_number?: string;
                                            device_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_usage?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        address_list?: Array<{
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        email_list?: Array<{
                                            email: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        work_experience_list?: Array<{
                                            company_organization?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            department?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            job?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            start_date?: string;
                                            end_date?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        education_list?: Array<{
                                            school: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            level_of_education?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            start_date?: string;
                                            end_date?: string;
                                            field_of_study?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            degree?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            school_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            field_of_study_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            country_region_id?: string;
                                            expected_end_date?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        bank_account_list?: Array<{
                                            bank_name?: string;
                                            bank_account_number: string;
                                            account_holder: string;
                                            bank?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            bank_identification_code?: string;
                                            branch_name?: string;
                                            bank_id?: string;
                                            branch_id?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                            country_region_id?: string;
                                            bank_account_usage?: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            bank_account_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            currency_id?: string;
                                        }>;
                                        national_id_list?: Array<{
                                            national_id_type_id: string;
                                            national_id_number: string;
                                            issue_date?: string;
                                            expiration_date?: string;
                                            country_region_id: string;
                                            issued_by?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        dependent_list?: Array<{
                                            name?: {
                                                local_primary?: string;
                                                local_first_name?: string;
                                                country_region_id: string;
                                                name_type: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_first_name_2?: string;
                                                local_primary_2?: string;
                                                additional_name_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                first_name?: string;
                                                full_name?: string;
                                                hereditary?: string;
                                                custom_name?: string;
                                                custom_local_name?: string;
                                                middle_name?: string;
                                                name_primary?: string;
                                                secondary?: string;
                                                social?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                tertiary?: string;
                                                title?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_middle_name?: string;
                                                local_secondary?: string;
                                                display_name_local_and_western_script?: string;
                                                display_name_local_script?: string;
                                                display_name_western_script?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            };
                                            relationship: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            gender?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            date_of_birth?: string;
                                            nationality_id?: string;
                                            national_id_list?: Array<{
                                                national_id_type_id: string;
                                                national_id_number: string;
                                                issue_date?: string;
                                                expiration_date?: string;
                                                country_region_id: string;
                                                issued_by?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            spouses_working_status?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            is_this_person_covered_by_health_insurance?: boolean;
                                            is_this_person_allowed_for_tax_deduction?: boolean;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                            dependent_name?: string;
                                            employer?: string;
                                            job?: string;
                                            phone?: {
                                                international_area_code?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_number: string;
                                                formatted_phone_number?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            };
                                            address?: {
                                                full_address_local_script?: string;
                                                full_address_western_script?: string;
                                                id?: string;
                                                country_region_id: string;
                                                region_id?: string;
                                                city_id?: string;
                                                distinct_id?: string;
                                                address_line1?: string;
                                                address_line2?: string;
                                                address_line3?: string;
                                                address_line4?: string;
                                                address_line5?: string;
                                                address_line6?: string;
                                                address_line7?: string;
                                                address_line8?: string;
                                                address_line9?: string;
                                                local_address_line1?: string;
                                                local_address_line2?: string;
                                                local_address_line3?: string;
                                                local_address_line4?: string;
                                                local_address_line5?: string;
                                                local_address_line6?: string;
                                                local_address_line7?: string;
                                                local_address_line8?: string;
                                                local_address_line9?: string;
                                                postal_code?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            };
                                            birth_certificate_of_child?: Array<{
                                                id?: string;
                                            }>;
                                        }>;
                                        emergency_contact_list?: Array<{
                                            name?: {
                                                local_primary?: string;
                                                local_first_name?: string;
                                                country_region_id: string;
                                                name_type: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_first_name_2?: string;
                                                local_primary_2?: string;
                                                additional_name_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                first_name?: string;
                                                full_name?: string;
                                                hereditary?: string;
                                                custom_name?: string;
                                                custom_local_name?: string;
                                                middle_name?: string;
                                                name_primary?: string;
                                                secondary?: string;
                                                social?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                tertiary?: string;
                                                title?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_middle_name?: string;
                                                local_secondary?: string;
                                                display_name_local_and_western_script?: string;
                                                display_name_local_script?: string;
                                                display_name_western_script?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            };
                                            relationship?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_ist?: Array<{
                                                international_area_code?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_number: string;
                                                formatted_phone_number?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                            legal_name?: string;
                                        }>;
                                        date_entered_workforce?: string;
                                        profile_image_id?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        email_address?: string;
                                        resident_tax_id_list?: Array<string>;
                                        age?: number;
                                        highest_level_of_education?: {
                                            school: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            level_of_education?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            start_date?: string;
                                            end_date?: string;
                                            field_of_study?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            degree?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            school_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            field_of_study_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            country_region_id?: string;
                                            expected_end_date?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        highest_degree_of_education?: {
                                            school: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            level_of_education?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            start_date?: string;
                                            end_date?: string;
                                            field_of_study?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            degree?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            school_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            field_of_study_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            country_region_id?: string;
                                            expected_end_date?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        personal_profile?: Array<{
                                            personal_profile_id?: string;
                                            personal_profile_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            files?: Array<{ id?: string }>;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/persons/:person_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=person&apiName=upload&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/person/upload document }
                 *
                 * 上传文件
                 *
                 * 上传文件
                 */
                upload: async (
                    payload?: {
                        data: {
                            file_content: Buffer | fs.ReadStream;
                            file_name: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const res = await this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { id?: string };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/persons/upload`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers: {
                                ...headers,
                                "Content-Type": "multipart/form-data",
                            },
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                    return res?.data || null;
                },
            },
            /**
             * 待入职
             */
            preHire: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/pre_hire/delete document }
                 *
                 * 删除待入职人员
                 *
                 * 删除待入职人员
                 */
                delete: async (
                    payload?: {
                        path: { pre_hire_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/pre_hires/:pre_hire_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/pre_hire/get document }
                 *
                 * 查询单个待入职人员
                 *
                 * 根据 ID 查询单个待入职人员
                 */
                get: async (
                    payload?: {
                        path: { pre_hire_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    pre_hire?: {
                                        ats_application_id?: string;
                                        id?: string;
                                        hire_date?: string;
                                        employee_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        worker_id?: string;
                                        employee_type_id: string;
                                        person_id: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        cost_center_rate?: Array<{
                                            cost_center_id?: string;
                                            rate?: number;
                                        }>;
                                        onboarding_status: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/pre_hires/:pre_hire_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/pre_hire/list document }
                 *
                 * 批量查询待入职人员
                 *
                 * 批量查询待入职人员
                 */
                list: async (
                    payload?: {
                        params: {
                            page_token?: string;
                            page_size: string;
                            pre_hire_ids?: Array<string>;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        ats_application_id?: string;
                                        id?: string;
                                        hire_date?: string;
                                        employee_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        worker_id?: string;
                                        employee_type_id: string;
                                        person_id: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        onboarding_status: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        cost_center_rate?: Array<{
                                            cost_center_id?: string;
                                            rate?: number;
                                        }>;
                                        work_email_list?: Array<{
                                            email: string;
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                            email_usage?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        department_id?: string;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/pre_hires`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/pre_hire/patch document }
                 *
                 * 更新待入职数据
                 *
                 * 更新待入职数据
                 */
                patch: async (
                    payload?: {
                        data: {
                            ats_application_id?: string;
                            hire_date?: string;
                            employee_type?: { enum_name: string };
                            worker_id?: string;
                            employee_type_id?: string;
                            person_id?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            cost_center_rate?: Array<{
                                cost_center_id?: string;
                                rate?: number;
                            }>;
                            onboarding_status: { enum_name: string };
                        };
                        params?: { client_token?: string };
                        path: { pre_hire_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    pre_hire?: {
                                        ats_application_id?: string;
                                        id?: string;
                                        hire_date?: string;
                                        employee_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        worker_id?: string;
                                        employee_type_id: string;
                                        person_id: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                        cost_center_rate?: Array<{
                                            cost_center_id?: string;
                                            rate?: number;
                                        }>;
                                        onboarding_status: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/pre_hires/:pre_hire_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 流程管理
             */
            processFormVariableData: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=process.form_variable_data&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/process-form_variable_data/get document }
                 *
                 * 获取流程表单数据
                 *
                 * 获取流程表单数据
                 */
                get: async (
                    payload?: {
                        path: { process_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    field_variable_values?: Array<{
                                        variable_api_name?: string;
                                        variable_name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        variable_value?: {
                                            text_value?: { value?: string };
                                            number_value?: { value?: string };
                                            date_value?: { value?: number };
                                            employment_value?: {
                                                value?: string;
                                                user_id?: string;
                                            };
                                            date_time_value?: {
                                                value?: number;
                                                zone?: string;
                                            };
                                            enum_value?: {
                                                value?: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                desc?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                            };
                                            null_value?: {};
                                            bool_value?: { value?: boolean };
                                            department_value?: {
                                                value?: string;
                                            };
                                            file_value?: {
                                                source_type?: number;
                                                file_id?: string;
                                                file_name?: string;
                                                length?: number;
                                                mime_type?: string;
                                            };
                                            i18n_value?: {
                                                value?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                            };
                                            object_value?: {
                                                value?: string;
                                                wk_api_name?: string;
                                            };
                                            list_value?: {
                                                values?: Array<{
                                                    text_value?: {
                                                        value?: string;
                                                    };
                                                    number_value?: {
                                                        value?: string;
                                                    };
                                                    date_value?: {
                                                        value?: number;
                                                    };
                                                    employment_value?: {
                                                        value?: string;
                                                        user_id?: string;
                                                    };
                                                    date_time_value?: {
                                                        value?: number;
                                                        zone?: string;
                                                    };
                                                    enum_value?: {
                                                        value?: string;
                                                        name?: {
                                                            zh_cn?: string;
                                                            en_us?: string;
                                                        };
                                                        desc?: {
                                                            zh_cn?: string;
                                                            en_us?: string;
                                                        };
                                                    };
                                                    null_value?: {};
                                                    bool_value?: {
                                                        value?: boolean;
                                                    };
                                                    department_value?: {
                                                        value?: string;
                                                    };
                                                    file_value?: {
                                                        source_type?: number;
                                                        file_id?: string;
                                                        file_name?: string;
                                                        length?: number;
                                                        mime_type?: string;
                                                    };
                                                    i18n_value?: {
                                                        value?: {
                                                            zh_cn?: string;
                                                            en_us?: string;
                                                        };
                                                    };
                                                    object_value?: {
                                                        value?: string;
                                                        wk_api_name?: string;
                                                    };
                                                    record_value?: {
                                                        values?: {
                                                            country_region?: {
                                                                object_value?: {
                                                                    value?: string;
                                                                    wk_api_name?: string;
                                                                };
                                                            };
                                                        };
                                                    };
                                                }>;
                                            };
                                            record_value?: {
                                                values?: {
                                                    country_region?: {
                                                        object_value?: {
                                                            value?: string;
                                                            wk_api_name?: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/processes/:process_id/form_variable_data`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * security_group
             */
            securityGroup: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=security_group&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/security_group/list document }
                 *
                 * 批量获取角色列表
                 *
                 * 批量查询「飞书人事」-「权限设置」-「角色设置」中的角色列表
                 */
                list: async (
                    payload?: {
                        params: { page_token?: string; page_size: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id: string;
                                        code: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        active_status: number;
                                        description?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        group_type: number;
                                        created_by: string;
                                        update_time: string;
                                        org_truncation?: Array<{
                                            org_key?: string;
                                            type?: number;
                                            depth?: number;
                                        }>;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/security_groups`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=security_group&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/security_group/query document }
                 *
                 * HRBP/属地 BP 查询
                 *
                 * 通过部门或工作地点，查询对应的 HRBP/属地 BP
                 */
                query: async (
                    payload?: {
                        data: {
                            item_list: Array<{
                                role_key: string;
                                department_id: string;
                                work_location_id?: string;
                            }>;
                            updated_at_gte?: string;
                            updated_at_lte?: string;
                        };
                        params?: {
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    hrbp_list?: Array<{
                                        employment_id_list: Array<string>;
                                        department_id?: string;
                                        work_location_id?: string;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/security_groups/query`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 地理库信息
             */
            subdivision: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=subdivision&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/subdivision/get document }
                 *
                 * 查询单条省份/行政区信息
                 *
                 * 查询单条省份/行政区信息
                 */
                get: async (
                    payload?: {
                        path: { subdivision_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    subdivision?: {
                                        id: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        country_region_id: string;
                                        subdivision_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/subdivisions/:subdivision_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=subdivision&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/subdivision/list document }
                 *
                 * 批量查询省份/行政区信息
                 *
                 * 批量查询省份/行政区信息
                 */
                list: async (
                    payload?: {
                        params: {
                            page_token?: string;
                            page_size: string;
                            country_region_id?: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        country_region_id: string;
                                        subdivision_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/subdivisions`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 地理库信息
             */
            subregion: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=subregion&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/subregion/get document }
                 *
                 * 查询单条城市/区域信息
                 *
                 * 查询单条城市/区域信息
                 */
                get: async (
                    payload?: {
                        path: { subregion_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    subregion?: {
                                        id: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        subdivision_id: string;
                                        superior_subregion_id?: string;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/subregions/:subregion_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=subregion&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/subregion/list document }
                 *
                 * 批量查询城市/区域信息
                 *
                 * 批量查询城市/区域信息
                 */
                list: async (
                    payload?: {
                        params: {
                            page_token?: string;
                            page_size: string;
                            subdivision_id?: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        subdivision_id: string;
                                        superior_subregion_id?: string;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/subregions`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 异动原因
             */
            transferReason: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=transfer_reason&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/transfer_reason/query document }
                 *
                 * 获取异动原因列表
                 *
                 * 获取异动原因列表
                 */
                query: async (
                    payload?: {
                        params?: {
                            active?: boolean;
                            transfer_reason_unique_identifier?: Array<string>;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        transfer_reason_unique_identifier?: string;
                                        name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active?: boolean;
                                        parent_transfer_reason_unique_identifier?: string;
                                        created_time?: string;
                                        updated_time?: string;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/transfer_reasons/query`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 异动类型
             */
            transferType: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=transfer_type&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/transfer_type/query document }
                 *
                 * 获取异动类型列表
                 *
                 * 获取异动类型列表
                 */
                query: async (
                    payload?: {
                        params?: {
                            active?: boolean;
                            transfer_type_unique_identifier?: Array<string>;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        transfer_type_unique_identifier?: string;
                                        name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active?: boolean;
                                        flow_id?: string;
                                        flow_name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        created_time?: string;
                                        updated_time?: string;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/transfer_types/query`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 工时制度
             */
            workingHoursType: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=working_hours_type&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/create document }
                 *
                 * 创建工时制度
                 *
                 * 创建工时制度
                 */
                create: async (
                    payload?: {
                        data: {
                            code?: string;
                            name: Array<{ lang: string; value: string }>;
                            country_region_id_list?: Array<string>;
                            default_for_job: boolean;
                            active: boolean;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        };
                        params?: { client_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    working_hours_type?: {
                                        id?: string;
                                        code?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        country_region_id_list?: Array<string>;
                                        default_for_job: boolean;
                                        active: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/working_hours_types`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=working_hours_type&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/delete document }
                 *
                 * 删除工时制度
                 *
                 * 删除工时制度
                 */
                delete: async (
                    payload?: {
                        path: { working_hours_type_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/working_hours_types/:working_hours_type_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=working_hours_type&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/get document }
                 *
                 * 查询单个工时制度
                 *
                 * 根据 ID 查询单个工时制度
                 */
                get: async (
                    payload?: {
                        path: { working_hours_type_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    working_hours_type?: {
                                        id?: string;
                                        code?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        country_region_id_list?: Array<string>;
                                        default_for_job: boolean;
                                        active: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/working_hours_types/:working_hours_type_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=working_hours_type&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/list document }
                 *
                 * 批量查询工时制度
                 *
                 * 批量查询工时制度
                 */
                list: async (
                    payload?: {
                        params: { page_token?: string; page_size: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        code?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        country_region_id_list?: Array<string>;
                                        default_for_job: boolean;
                                        active: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/working_hours_types`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=working_hours_type&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/patch document }
                 *
                 * 更新工时制度
                 *
                 * 更新工时制度
                 */
                patch: async (
                    payload?: {
                        data?: {
                            code?: string;
                            name?: Array<{ lang: string; value: string }>;
                            country_region_id_list?: Array<string>;
                            default_for_job?: boolean;
                            active?: boolean;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        };
                        params?: { client_token?: string };
                        path: { working_hours_type_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    working_hours_type?: {
                                        id?: string;
                                        code?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        country_region_id_list?: Array<string>;
                                        default_for_job: boolean;
                                        active: boolean;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v1/working_hours_types/:working_hours_type_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
        },
        v2: {
            /**
             * approval_groups
             */
            approvalGroups: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=approval_groups&apiName=get&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=corehr&resource=approval_groups&version=v2 document }
                 *
                 * 获取审批组信息
                 */
                get: async (
                    payload?: {
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                        path: { process_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    approval_group?: {
                                        approval_group_id?: string;
                                        process_id?: string;
                                        approval_group_status?:
                                            | "0"
                                            | "1"
                                            | "2"
                                            | "3"
                                            | "4"
                                            | "5";
                                        approval_group_status_v2?: number;
                                        topic?: string;
                                        adjust_reason?: string;
                                        effective_date?: string;
                                        created_by?: string;
                                        draft_id?: string;
                                        draft_status?: "0" | "1" | "2" | "3";
                                        department_changes?: Array<string>;
                                        job_changes?: Array<string>;
                                        position_changes?: Array<string>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/approval_groups/:process_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=approval_groups&apiName=open_query_department_change_list_by_ids&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=open_query_department_change_list_by_ids&project=corehr&resource=approval_groups&version=v2 document }
                 *
                 * 获取部门调整信息详情
                 */
                openQueryDepartmentChangeListByIds: async (
                    payload?: {
                        data?: {
                            department_change_ids?: Array<string>;
                            need_department_path?: boolean;
                        };
                        params: {
                            process_id: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    department_changes?: Array<{
                                        department_change_id?: string;
                                        department_id?: string;
                                        draft_department_id?: string;
                                        department_change_type?:
                                            | "Unknown"
                                            | "Create"
                                            | "Modify"
                                            | "Inactive";
                                        department_change_status?: number;
                                        reorganization_info?: {
                                            original_department_names?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            target_department_names?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            original_department_code?: string;
                                            target_department_code?: string;
                                            original_sub_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            target_sub_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            original_department_manager?: string;
                                            target_department_manager?: string;
                                            original_descriptions?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            target_descriptions?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            original_cost_center?: {
                                                cost_center_id?: string;
                                                cost_center_version_id?: string;
                                                name: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                code?: string;
                                                parent_cost_center_id?: string;
                                                managers?: Array<string>;
                                                description?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                effective_time: string;
                                                expiration_time?: string;
                                                active?: boolean;
                                                operation_reason?: string;
                                            };
                                            target_cost_center?: {
                                                cost_center_id?: string;
                                                cost_center_version_id?: string;
                                                name: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                code?: string;
                                                parent_cost_center_id?: string;
                                                managers?: Array<string>;
                                                description?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                effective_time: string;
                                                expiration_time?: string;
                                                active?: boolean;
                                                operation_reason?: string;
                                            };
                                            original_is_confidential?: boolean;
                                            target_is_confidential?: boolean;
                                            original_staffing_model?: boolean;
                                            target_staffing_model?: boolean;
                                            original_staffing_mode_option?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            target_staffing_mode_option?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            original_parent_department_id?: string;
                                            target_parent_department_id?: string;
                                            draft_target_parent_department_id?: string;
                                            original_department_id_path?: Array<{
                                                department_id?: string;
                                                draft_department_id?: string;
                                            }>;
                                            target_department_id_path?: Array<{
                                                department_id?: string;
                                                draft_department_id?: string;
                                            }>;
                                            custom_fields?: Array<{
                                                origin_value?: {
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                };
                                                target_value?: {
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                };
                                            }>;
                                        };
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/approval_groups/open_query_department_change_list_by_ids`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=approval_groups&apiName=open_query_job_change_list_by_ids&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=open_query_job_change_list_by_ids&project=corehr&resource=approval_groups&version=v2 document }
                 */
                openQueryJobChangeListByIds: async (
                    payload?: {
                        data?: {
                            job_change_ids?: Array<string>;
                            need_department_path?: boolean;
                        };
                        params: {
                            process_id: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job_changes?: Array<{
                                        job_change_id?: string;
                                        employment_id?: string;
                                        transfer_info?: {
                                            original_department?: string;
                                            target_department?: string;
                                            target_draft_department?: string;
                                            original_department_id_path?: Array<{
                                                department_id?: string;
                                                draft_department_id?: string;
                                            }>;
                                            target_department_id_path?: Array<{
                                                department_id?: string;
                                                draft_department_id?: string;
                                            }>;
                                            original_direct_manager?: string;
                                            target_direct_manager?: string;
                                            original_job?: string;
                                            target_job?: string;
                                            original_job_family?: string;
                                            target_job_family?: string;
                                            original_job_level?: string;
                                            target_job_level?: string;
                                            original_cost_center_rate?: Array<{
                                                cost_center_id?: string;
                                                rate?: number;
                                                new_rate?: number;
                                            }>;
                                            target_cost_center_rate?: Array<{
                                                cost_center_id?: string;
                                                rate?: number;
                                                new_rate?: number;
                                            }>;
                                            target_allocation_expiration_time?: string;
                                            original_allocation_expiration_time?: string;
                                            target_allocation_effective_time?: string;
                                            original_allocation_effective_time?: string;
                                            original_default_cost_center?: string;
                                            target_default_cost_center?: string;
                                            original_is_default_cost_center_inherited?: boolean;
                                            target_is_default_cost_center_inherited?: boolean;
                                            original_job_grade?: string;
                                            target_job_grade?: string;
                                            original_position?: string;
                                            target_position?: string;
                                            target_draft_position?: string;
                                        };
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/approval_groups/open_query_job_change_list_by_ids`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * approver
             */
            approver: {
                listWithIterator: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            user_id: string;
                            approver_status?: number;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/approvers`,
                                    path
                                ),
                                method: "GET",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                    approver_list?: Array<{
                                                        approver_id?: string;
                                                        process_id?: string;
                                                        approver_status?: number;
                                                    }>;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=approver&apiName=list&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=corehr&resource=approver&version=v2 document }
                 */
                list: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            user_id: string;
                            approver_status?: number;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    page_token?: string;
                                    has_more?: boolean;
                                    approver_list?: Array<{
                                        approver_id?: string;
                                        process_id?: string;
                                        approver_status?: number;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/approvers`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * basic_info.bank
             */
            basicInfoBank: {
                searchWithIterator: async (
                    payload?: {
                        data?: {
                            bank_id_list?: Array<string>;
                            bank_name_list?: Array<string>;
                            status_list?: Array<number>;
                            update_start_time?: string;
                            update_end_time?: string;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/basic_info/banks/search`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        bank_id?: string;
                                                        bank_name?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                        bank_code?: string;
                                                        country_region_id?: string;
                                                        status?: number;
                                                        create_time?: string;
                                                        update_time?: string;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=basic_info.bank&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.bank&version=v2 document }
                 */
                search: async (
                    payload?: {
                        data?: {
                            bank_id_list?: Array<string>;
                            bank_name_list?: Array<string>;
                            status_list?: Array<number>;
                            update_start_time?: string;
                            update_end_time?: string;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        bank_id?: string;
                                        bank_name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        bank_code?: string;
                                        country_region_id?: string;
                                        status?: number;
                                        create_time?: string;
                                        update_time?: string;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/basic_info/banks/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * basic_info.bank_branch
             */
            basicInfoBankBranch: {
                searchWithIterator: async (
                    payload?: {
                        data?: {
                            bank_id_list?: Array<string>;
                            bank_branch_id_list?: Array<string>;
                            bank_branch_name_list?: Array<string>;
                            code_list?: Array<string>;
                            status_list?: Array<number>;
                            update_start_time?: string;
                            update_end_time?: string;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/basic_info/bank_branchs/search`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        bank_branch_id?: string;
                                                        bank_branch_name?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                        bank_id?: string;
                                                        code?: string;
                                                        swift_code?: string;
                                                        status?: number;
                                                        bank_branch_code?: string;
                                                        register_place?: string;
                                                        bank_address?: string;
                                                        create_time?: string;
                                                        update_time?: string;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=basic_info.bank_branch&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.bank_branch&version=v2 document }
                 */
                search: async (
                    payload?: {
                        data?: {
                            bank_id_list?: Array<string>;
                            bank_branch_id_list?: Array<string>;
                            bank_branch_name_list?: Array<string>;
                            code_list?: Array<string>;
                            status_list?: Array<number>;
                            update_start_time?: string;
                            update_end_time?: string;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        bank_branch_id?: string;
                                        bank_branch_name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        bank_id?: string;
                                        code?: string;
                                        swift_code?: string;
                                        status?: number;
                                        bank_branch_code?: string;
                                        register_place?: string;
                                        bank_address?: string;
                                        create_time?: string;
                                        update_time?: string;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/basic_info/bank_branchs/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * basic_info.city
             */
            basicInfoCity: {
                searchWithIterator: async (
                    payload?: {
                        data?: {
                            country_region_subdivision_id_list?: Array<string>;
                            city_id_list?: Array<string>;
                            status_list?: Array<number>;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/basic_info/cities/search`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        city_id?: string;
                                                        name?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                        country_region_subdivision_id?: string;
                                                        code?: string;
                                                        subregion_code?: string;
                                                        status?: number;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=basic_info.city&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.city&version=v2 document }
                 */
                search: async (
                    payload?: {
                        data?: {
                            country_region_subdivision_id_list?: Array<string>;
                            city_id_list?: Array<string>;
                            status_list?: Array<number>;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        city_id?: string;
                                        name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        country_region_subdivision_id?: string;
                                        code?: string;
                                        subregion_code?: string;
                                        status?: number;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/basic_info/cities/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * basic_info.country_region
             */
            basicInfoCountryRegion: {
                searchWithIterator: async (
                    payload?: {
                        data?: {
                            country_region_id_list?: Array<string>;
                            status_list?: Array<number>;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/basic_info/country_regions/search`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        country_region_id?: string;
                                                        name?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                        full_name?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                        alpha_2_code?: string;
                                                        alpha_3_code?: string;
                                                        global_code?: string;
                                                        status?: number;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=basic_info.country_region&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.country_region&version=v2 document }
                 */
                search: async (
                    payload?: {
                        data?: {
                            country_region_id_list?: Array<string>;
                            status_list?: Array<number>;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        country_region_id?: string;
                                        name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        full_name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        alpha_2_code?: string;
                                        alpha_3_code?: string;
                                        global_code?: string;
                                        status?: number;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/basic_info/country_regions/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * basic_info.country_region_subdivision
             */
            basicInfoCountryRegionSubdivision: {
                searchWithIterator: async (
                    payload?: {
                        data?: {
                            country_region_id_list?: Array<string>;
                            country_region_subdivision_id_list?: Array<string>;
                            status_list?: Array<number>;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/basic_info/country_region_subdivisions/search`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        country_region_subdivision_id?: string;
                                                        name?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                        country_region_id?: string;
                                                        subdivision_type?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        iso_code?: string;
                                                        status?: number;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=basic_info.country_region_subdivision&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.country_region_subdivision&version=v2 document }
                 */
                search: async (
                    payload?: {
                        data?: {
                            country_region_id_list?: Array<string>;
                            country_region_subdivision_id_list?: Array<string>;
                            status_list?: Array<number>;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        country_region_subdivision_id?: string;
                                        name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        country_region_id?: string;
                                        subdivision_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        iso_code?: string;
                                        status?: number;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/basic_info/country_region_subdivisions/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * basic_info.currency
             */
            basicInfoCurrency: {
                searchWithIterator: async (
                    payload?: {
                        data?: {
                            currency_id_list?: Array<string>;
                            status_list?: Array<number>;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/basic_info/currencies/search`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        currency_id?: string;
                                                        country_region_id_list?: Array<string>;
                                                        currency_name?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                        numeric_code?: number;
                                                        currency_alpha_3_code?: string;
                                                        status?: number;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=basic_info.currency&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.currency&version=v2 document }
                 */
                search: async (
                    payload?: {
                        data?: {
                            currency_id_list?: Array<string>;
                            status_list?: Array<number>;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        currency_id?: string;
                                        country_region_id_list?: Array<string>;
                                        currency_name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        numeric_code?: number;
                                        currency_alpha_3_code?: string;
                                        status?: number;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/basic_info/currencies/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * basic_info.district
             */
            basicInfoDistrict: {
                searchWithIterator: async (
                    payload?: {
                        data?: {
                            city_id_list?: Array<string>;
                            district_id_list?: Array<string>;
                            status_list?: Array<number>;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/basic_info/districts/search`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        district_id?: string;
                                                        name?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                        city_id?: string;
                                                        subregion_code?: string;
                                                        status?: number;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=basic_info.district&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.district&version=v2 document }
                 */
                search: async (
                    payload?: {
                        data?: {
                            city_id_list?: Array<string>;
                            district_id_list?: Array<string>;
                            status_list?: Array<number>;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        district_id?: string;
                                        name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        city_id?: string;
                                        subregion_code?: string;
                                        status?: number;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/basic_info/districts/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * basic_info.language
             */
            basicInfoLanguage: {
                searchWithIterator: async (
                    payload?: {
                        data?: {
                            language_id_list?: Array<string>;
                            status_list?: Array<number>;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/basic_info/languages/search`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        language_id?: string;
                                                        name?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                        ietf_language_tag?: string;
                                                        status?: number;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=basic_info.language&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.language&version=v2 document }
                 */
                search: async (
                    payload?: {
                        data?: {
                            language_id_list?: Array<string>;
                            status_list?: Array<number>;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        language_id?: string;
                                        name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        ietf_language_tag?: string;
                                        status?: number;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/basic_info/languages/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * basic_info.nationality
             */
            basicInfoNationality: {
                searchWithIterator: async (
                    payload?: {
                        data?: {
                            nationality_id_list?: Array<string>;
                            country_region_id_list?: Array<string>;
                            status_list?: Array<number>;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/basic_info/nationalities/search`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        nationality_id?: string;
                                                        name?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                        alpha_2_code?: string;
                                                        alpha_3_code?: string;
                                                        numeric_code?: number;
                                                        country_region_id?: string;
                                                        status?: number;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=basic_info.nationality&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.nationality&version=v2 document }
                 */
                search: async (
                    payload?: {
                        data?: {
                            nationality_id_list?: Array<string>;
                            country_region_id_list?: Array<string>;
                            status_list?: Array<number>;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        nationality_id?: string;
                                        name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        alpha_2_code?: string;
                                        alpha_3_code?: string;
                                        numeric_code?: number;
                                        country_region_id?: string;
                                        status?: number;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/basic_info/nationalities/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * basic_info.time_zone
             */
            basicInfoTimeZone: {
                searchWithIterator: async (
                    payload?: {
                        data?: {
                            time_zone_id_list?: Array<string>;
                            status_list?: Array<number>;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/basic_info/time_zones/search`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        time_zone_id?: string;
                                                        name?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                        time_zone_code?: string;
                                                        utc_offset?: string;
                                                        status?: number;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=basic_info.time_zone&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.time_zone&version=v2 document }
                 */
                search: async (
                    payload?: {
                        data?: {
                            time_zone_id_list?: Array<string>;
                            status_list?: Array<number>;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        time_zone_id?: string;
                                        name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        time_zone_code?: string;
                                        utc_offset?: string;
                                        status?: number;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/basic_info/time_zones/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * bp
             */
            bp: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=bp&apiName=get_by_department&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get_by_department&project=corehr&resource=bp&version=v2 document }
                 */
                getByDepartment: async (
                    payload?: {
                        data: { department_id: string };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        department_id?: string;
                                        hrbp_ids?: Array<string>;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/bps/get_by_department`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                listWithIterator: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/bps`,
                                    path
                                ),
                                method: "GET",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        department_id?: string;
                                                        hrbp_id?: string;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=bp&apiName=list&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=corehr&resource=bp&version=v2 document }
                 *
                 * 待补充
                 */
                list: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        department_id?: string;
                                        hrbp_id?: string;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/bps`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * company
             */
            company: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=company&apiName=active&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=active&project=corehr&resource=company&version=v2 document }
                 */
                active: async (
                    payload?: {
                        data: {
                            company_id: string;
                            effective_time: string;
                            active: boolean;
                            operation_reason: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/companies/active`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=company&apiName=batch_get&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_get&project=corehr&resource=company&version=v2 document }
                 *
                 * 通过公司 ID 批量获取公司信息
                 */
                batchGet: async (
                    payload?: {
                        data: { company_ids: Array<string> };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        company_id?: string;
                                        hiberarchy_common: {
                                            parent_id?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            type: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            active: boolean;
                                            effective_time?: string;
                                            expiration_time?: string;
                                            code?: string;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            tree_order?: string;
                                            list_order?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        industry_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        legal_representative?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        post_code?: string;
                                        tax_payer_id?: string;
                                        confidential?: boolean;
                                        sub_type_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        branch_company?: boolean;
                                        primary_manager?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        currency?: {
                                            currency_id?: string;
                                            country_region_id_list?: Array<string>;
                                            currency_name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            numeric_code?: number;
                                            currency_alpha_3_code?: string;
                                            status?: number;
                                        };
                                        phone?: {
                                            area_code: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                        };
                                        fax?: {
                                            area_code: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                        };
                                        registered_office_address?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        office_address?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        registered_office_address_info?: {
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            address_id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            city_id_v2?: string;
                                            district_id_v2?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            address_type_list: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            is_primary: boolean;
                                            is_public: boolean;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        };
                                        office_address_info?: {
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            address_id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            city_id_v2?: string;
                                            district_id_v2?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            address_type_list: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            is_primary: boolean;
                                            is_public: boolean;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        };
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/companies/batch_get`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                queryRecentChangeWithIterator: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            start_date: string;
                            end_date: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/companies/query_recent_change`,
                                    path
                                ),
                                method: "GET",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    company_ids?: Array<string>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                    deleted_company_ids?: Array<string>;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=company&apiName=query_recent_change&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query_recent_change&project=corehr&resource=company&version=v2 document }
                 */
                queryRecentChange: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            start_date: string;
                            end_date: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    company_ids?: Array<string>;
                                    page_token?: string;
                                    has_more?: boolean;
                                    deleted_company_ids?: Array<string>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/companies/query_recent_change`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * contract
             */
            contract: {
                searchWithIterator: async (
                    payload?: {
                        data?: {
                            employment_id_list?: Array<string>;
                            contract_id_list?: Array<string>;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/contracts/search`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        id?: string;
                                                        effective_time?: string;
                                                        contract_end_date?: string;
                                                        expiration_time?: string;
                                                        employment_id?: string;
                                                        contract_type?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        first_party_company_id?: string;
                                                        person_id?: string;
                                                        duration_type?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        contract_number?: string;
                                                        signing_type?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        contract_status?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        renewal_status?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        signing_times?: number;
                                                        original_contract?: string;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=contract&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=contract&version=v2 document }
                 *
                 * 根据合同 ID 、雇佣 ID 查询合同信息
                 */
                search: async (
                    payload?: {
                        data?: {
                            employment_id_list?: Array<string>;
                            contract_id_list?: Array<string>;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        effective_time?: string;
                                        contract_end_date?: string;
                                        expiration_time?: string;
                                        employment_id?: string;
                                        contract_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        first_party_company_id?: string;
                                        person_id?: string;
                                        duration_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        contract_number?: string;
                                        signing_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        contract_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        renewal_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        signing_times?: number;
                                        original_contract?: string;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/contracts/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * cost_allocation
             */
            costAllocation: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=cost_allocation&apiName=batch_query&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_query&project=corehr&resource=cost_allocation&version=v2 document }
                 *
                 * 通过员工ID批量获取通道信息
                 */
                batchQuery: async (
                    payload?: {
                        data: { employment_ids: Array<string> };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        employment_id?: string;
                                        cost_allocations?: Array<{
                                            wk_id?: string;
                                            effective_time?: string;
                                            expiration_time?: string;
                                            job_data_cost_center_id?: Array<{
                                                cost_center_id?: string;
                                                rate?: number;
                                                new_rate?: number;
                                            }>;
                                            job_data_id?: { wk_id?: string };
                                            reason?: string;
                                        }>;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/cost_allocations/batch_query`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=cost_allocation&apiName=create_version&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create_version&project=corehr&resource=cost_allocation&version=v2 document }
                 *
                 * 创建成本分摊
                 */
                createVersion: async (
                    payload?: {
                        data: {
                            employment_id: string;
                            cost_allocation?: {
                                effective_time: string;
                                expiration_time?: string;
                                job_data_cost_center_id?: Array<{
                                    cost_center_id: string;
                                    new_rate: number;
                                }>;
                                reason?: string;
                            };
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            client_token?: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { cost_allocation_id?: string };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/cost_allocations/create_version`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=cost_allocation&apiName=remove_version&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=remove_version&project=corehr&resource=cost_allocation&version=v2 document }
                 *
                 * 删除成本分摊
                 */
                removeVersion: async (
                    payload?: {
                        data: {
                            employment_id: string;
                            cost_allocation?: { wk_id: string };
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            client_token?: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/cost_allocations/remove_version`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=cost_allocation&apiName=update_version&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=update_version&project=corehr&resource=cost_allocation&version=v2 document }
                 *
                 * 更新成本分摊
                 */
                updateVersion: async (
                    payload?: {
                        data: {
                            employment_id: string;
                            cost_allocation?: {
                                wk_id: string;
                                effective_time?: string;
                                expiration_time?: string;
                                job_data_cost_center_id?: Array<{
                                    cost_center_id?: string;
                                    new_rate?: number;
                                }>;
                                reason?: string;
                            };
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            client_token?: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/cost_allocations/update_version`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * cost_center
             */
            costCenter: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=cost_center&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=corehr&resource=cost_center&version=v2 document }
                 *
                 * 创建成本中心
                 */
                create: async (
                    payload?: {
                        data: {
                            name: Array<{ lang: string; value: string }>;
                            code?: string;
                            parent_cost_center_id?: string;
                            managers?: Array<string>;
                            description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            effective_time: string;
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    cost_center?: {
                                        cost_center_id?: string;
                                        cost_center_version_id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        code?: string;
                                        parent_cost_center_id?: string;
                                        managers?: Array<string>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        effective_time: string;
                                        expiration_time?: string;
                                        active?: boolean;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/cost_centers`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=cost_center&apiName=delete&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=delete&project=corehr&resource=cost_center&version=v2 document }
                 */
                delete: async (
                    payload?: {
                        data: { operation_reason: string };
                        path?: { cost_center_id?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/cost_centers/:cost_center_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=cost_center&apiName=patch&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=corehr&resource=cost_center&version=v2 document }
                 *
                 * 创建成本中心版本
                 */
                patch: async (
                    payload?: {
                        data: {
                            effective_time: string;
                            active: boolean;
                            operation_reason: string;
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                        path?: { cost_center_id?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    cost_center?: {
                                        cost_center_id?: string;
                                        cost_center_version_id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        code?: string;
                                        parent_cost_center_id?: string;
                                        managers?: Array<string>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        effective_time: string;
                                        expiration_time?: string;
                                        active?: boolean;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/cost_centers/:cost_center_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                queryRecentChangeWithIterator: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            start_date: string;
                            end_date: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/cost_centers/query_recent_change`,
                                    path
                                ),
                                method: "GET",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    cost_center_ids?: Array<string>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                    deleted_cost_center_ids?: Array<string>;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=cost_center&apiName=query_recent_change&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query_recent_change&project=corehr&resource=cost_center&version=v2 document }
                 */
                queryRecentChange: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            start_date: string;
                            end_date: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    cost_center_ids?: Array<string>;
                                    page_token?: string;
                                    has_more?: boolean;
                                    deleted_cost_center_ids?: Array<string>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/cost_centers/query_recent_change`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=cost_center&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=cost_center&version=v2 document }
                 *
                 * 查询成本中心信息
                 */
                search: async (
                    payload?: {
                        data?: {
                            cost_center_id_list?: Array<string>;
                            name_list?: Array<string>;
                            code?: string;
                            parent_cost_center_id?: string;
                            get_all_version?: boolean;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        cost_center_id?: string;
                                        version_id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        code?: string;
                                        parent_cost_center_id?: string;
                                        managers?: Array<string>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        effective_time: string;
                                        expiration_time?: string;
                                        active?: boolean;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/cost_centers/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * cost_center.version
             */
            costCenterVersion: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=cost_center.version&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=corehr&resource=cost_center.version&version=v2 document }
                 *
                 * 创建成本中心版本
                 */
                create: async (
                    payload?: {
                        data: {
                            name: Array<{ lang: string; value: string }>;
                            parent_cost_center_id?: string;
                            managers?: Array<string>;
                            description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            effective_time: string;
                            operation_reason: string;
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                        path?: { cost_center_id?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    version?: {
                                        cost_center_id?: string;
                                        version_id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        code?: string;
                                        parent_cost_center_id?: string;
                                        managers?: Array<string>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        effective_time: string;
                                        expiration_time?: string;
                                        active?: boolean;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/cost_centers/:cost_center_id/versions`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=cost_center.version&apiName=delete&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=delete&project=corehr&resource=cost_center.version&version=v2 document }
                 *
                 * 撤销成本中心版本
                 */
                delete: async (
                    payload?: {
                        data: { operation_reason: string };
                        path?: { cost_center_id?: string; version_id?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/cost_centers/:cost_center_id/versions/:version_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=cost_center.version&apiName=patch&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=corehr&resource=cost_center.version&version=v2 document }
                 *
                 * 创建成本中心版本
                 */
                patch: async (
                    payload?: {
                        data: {
                            name?: Array<{ lang: string; value: string }>;
                            parent_cost_center_id?: string;
                            managers?: Array<string>;
                            description?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            effective_time: string;
                            operation_reason: string;
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                        path?: { cost_center_id?: string; version_id?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    version?: {
                                        cost_center_id?: string;
                                        version_id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        code?: string;
                                        parent_cost_center_id?: string;
                                        managers?: Array<string>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        effective_time: string;
                                        expiration_time?: string;
                                        active?: boolean;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/cost_centers/:cost_center_id/versions/:version_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * default_cost_center
             */
            defaultCostCenter: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=default_cost_center&apiName=batch_query&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_query&project=corehr&resource=default_cost_center&version=v2 document }
                 */
                batchQuery: async (
                    payload?: {
                        data: { employment_ids: Array<string> };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        employment_id?: string;
                                        default_cost_centers?: Array<{
                                            wk_id?: string;
                                            wk_tid?: string;
                                            effective_time?: string;
                                            cost_center_id?: string;
                                            job_data_id?: string;
                                            is_inherit?: boolean;
                                            inherit_source?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            reason?: string;
                                        }>;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/default_cost_centers/batch_query`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=default_cost_center&apiName=create_version&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create_version&project=corehr&resource=default_cost_center&version=v2 document }
                 */
                createVersion: async (
                    payload?: {
                        data: {
                            employment_id: string;
                            default_cost_center?: {
                                effective_time: string;
                                cost_center_id?: string;
                                is_inherit?: boolean;
                                reason?: string;
                            };
                        };
                        params?: {
                            client_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { wk_id?: string; wk_tid?: string };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/default_cost_centers/create_version`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=default_cost_center&apiName=remove_version&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=remove_version&project=corehr&resource=default_cost_center&version=v2 document }
                 */
                removeVersion: async (
                    payload?: {
                        data: {
                            employment_id: string;
                            default_cost_center?: {
                                wk_id: string;
                                wk_tid: string;
                            };
                        };
                        params?: {
                            client_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/default_cost_centers/remove_version`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=default_cost_center&apiName=update_version&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=update_version&project=corehr&resource=default_cost_center&version=v2 document }
                 */
                updateVersion: async (
                    payload?: {
                        data: {
                            employment_id: string;
                            default_cost_center?: {
                                wk_id: string;
                                wk_tid: string;
                                effective_time?: string;
                                cost_center_id?: string;
                                is_inherit?: boolean;
                                reason?: string;
                            };
                        };
                        params?: {
                            client_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/default_cost_centers/update_version`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * department
             */
            department: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=batch_get&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_get&project=corehr&resource=department&version=v2 document }
                 */
                batchGet: async (
                    payload?: {
                        data?: {
                            department_id_list?: Array<string>;
                            fields?: Array<string>;
                            department_name_list?: Array<string>;
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        version_id?: string;
                                        department_name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        sub_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        parent_department_id?: string;
                                        manager?: string;
                                        tree_order?: string;
                                        list_order?: string;
                                        code?: string;
                                        is_root: boolean;
                                        is_confidential: boolean;
                                        effective_date: string;
                                        expiration_date?: string;
                                        active: boolean;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                        staffing_model?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        cost_center_id?: string;
                                        created_time?: string;
                                        updated_time?: string;
                                        created_by?: string;
                                        updated_by?: string;
                                        record_created_time?: string;
                                        record_updated_time?: string;
                                        record_created_by?: string;
                                        record_updated_by?: string;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/departments/batch_get`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=delete&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=delete&project=corehr&resource=department&version=v2 document }
                 *
                 * 删除部门数据
                 */
                delete: async (
                    payload?: {
                        params?: {
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                        path: { department_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/departments/:department_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=parents&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=parents&project=corehr&resource=department&version=v2 document }
                 */
                parents: async (
                    payload?: {
                        data: { department_id_list: Array<string> };
                        params?: {
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        department_id?: string;
                                        parent_department_list?: Array<{
                                            department_id?: string;
                                            department_name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            parent_department_id?: string;
                                            active?: boolean;
                                            is_root?: boolean;
                                        }>;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/departments/parents`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=patch&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=corehr&resource=department&version=v2 document }
                 *
                 * 更新部门数据
                 */
                patch: async (
                    payload?: {
                        data: {
                            id?: string;
                            sub_type?: { enum_name: string };
                            manager?: string;
                            is_confidential?: boolean;
                            hiberarchy_common?: {
                                parent_id?: string;
                                name?: Array<{ lang: string; value: string }>;
                                active?: boolean;
                                code?: string;
                                description?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                            };
                            effective_time: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            cost_center_id?: string;
                            staffing_model?: { enum_name: string };
                        };
                        params?: {
                            client_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                        path: { department_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/departments/:department_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=query_multi_timeline&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query_multi_timeline&project=corehr&resource=department&version=v2 document }
                 *
                 * 查询任意日期部门信息
                 */
                queryMultiTimeline: async (
                    payload?: {
                        data: {
                            department_ids: Array<string>;
                            effective_date_start?: string;
                            effective_date_end?: string;
                            fields?: Array<string>;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        version_id?: string;
                                        names?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        sub_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        parent_department_id?: string;
                                        manager?: string;
                                        code?: string;
                                        effective_date?: string;
                                        active?: boolean;
                                        descriptions?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/departments/query_multi_timeline`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                queryOperationLogsWithIterator: async (
                    payload?: {
                        data: {
                            department_ids: Array<string>;
                            start_date: string;
                            end_date: string;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/departments/query_operation_logs`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    op_logs?: Array<{
                                                        object_id?: string;
                                                        changes?: Array<{
                                                            field?: string;
                                                            before?: string;
                                                            after?: string;
                                                        }>;
                                                        operator?: string;
                                                        operation_type?: number;
                                                        operation_time?: string;
                                                        effective_time?: string;
                                                        operation_reason?: string;
                                                        change_reasons?: Array<string>;
                                                    }>;
                                                    next_page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=query_operation_logs&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query_operation_logs&project=corehr&resource=department&version=v2 document }
                 *
                 * 查询操作日志
                 */
                queryOperationLogs: async (
                    payload?: {
                        data: {
                            department_ids: Array<string>;
                            start_date: string;
                            end_date: string;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    op_logs?: Array<{
                                        object_id?: string;
                                        changes?: Array<{
                                            field?: string;
                                            before?: string;
                                            after?: string;
                                        }>;
                                        operator?: string;
                                        operation_type?: number;
                                        operation_time?: string;
                                        effective_time?: string;
                                        operation_reason?: string;
                                        change_reasons?: Array<string>;
                                    }>;
                                    next_page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/departments/query_operation_logs`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                queryRecentChangeWithIterator: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            start_date: string;
                            end_date: string;
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/departments/query_recent_change`,
                                    path
                                ),
                                method: "GET",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    department_ids?: Array<string>;
                                                    deleted_department_ids?: Array<string>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=query_recent_change&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query_recent_change&project=corehr&resource=department&version=v2 document }
                 */
                queryRecentChange: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            start_date: string;
                            end_date: string;
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    department_ids?: Array<string>;
                                    deleted_department_ids?: Array<string>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/departments/query_recent_change`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=query_timeline&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query_timeline&project=corehr&resource=department&version=v2 document }
                 *
                 * 查询任意日期部门信息
                 */
                queryTimeline: async (
                    payload?: {
                        data: {
                            department_ids: Array<string>;
                            effective_date: string;
                            fields?: Array<string>;
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        version_id?: string;
                                        names?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        sub_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        parent_department_id?: string;
                                        manager?: string;
                                        code?: string;
                                        effective_date?: string;
                                        active?: boolean;
                                        descriptions?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/departments/query_timeline`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                searchWithIterator: async (
                    payload?: {
                        data?: {
                            active?: boolean;
                            get_all_children?: boolean;
                            manager_list?: Array<string>;
                            department_id_list?: Array<string>;
                            name_list?: Array<string>;
                            parent_department_id?: string;
                            code_list?: Array<string>;
                            get_all_version?: boolean;
                            fields?: Array<string>;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/departments/search`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        id?: string;
                                                        version_id?: string;
                                                        department_name?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                        sub_type?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        parent_department_id?: string;
                                                        manager?: string;
                                                        tree_order?: string;
                                                        list_order?: string;
                                                        code?: string;
                                                        is_root: boolean;
                                                        is_confidential: boolean;
                                                        effective_date: string;
                                                        expiration_date?: string;
                                                        active: boolean;
                                                        description?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                        custom_fields?: Array<{
                                                            custom_api_name: string;
                                                            name?: {
                                                                zh_cn?: string;
                                                                en_us?: string;
                                                            };
                                                            type?: number;
                                                            value: string;
                                                        }>;
                                                        staffing_model?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        cost_center_id?: string;
                                                        created_time?: string;
                                                        updated_time?: string;
                                                        created_by?: string;
                                                        updated_by?: string;
                                                        record_created_time?: string;
                                                        record_updated_time?: string;
                                                        record_created_by?: string;
                                                        record_updated_by?: string;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=department&version=v2 document }
                 *
                 * 根据部门 ID，上级部门查询部门列表
                 */
                search: async (
                    payload?: {
                        data?: {
                            active?: boolean;
                            get_all_children?: boolean;
                            manager_list?: Array<string>;
                            department_id_list?: Array<string>;
                            name_list?: Array<string>;
                            parent_department_id?: string;
                            code_list?: Array<string>;
                            get_all_version?: boolean;
                            fields?: Array<string>;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        version_id?: string;
                                        department_name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        sub_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        parent_department_id?: string;
                                        manager?: string;
                                        tree_order?: string;
                                        list_order?: string;
                                        code?: string;
                                        is_root: boolean;
                                        is_confidential: boolean;
                                        effective_date: string;
                                        expiration_date?: string;
                                        active: boolean;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                        staffing_model?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        cost_center_id?: string;
                                        created_time?: string;
                                        updated_time?: string;
                                        created_by?: string;
                                        updated_by?: string;
                                        record_created_time?: string;
                                        record_updated_time?: string;
                                        record_created_by?: string;
                                        record_updated_by?: string;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/departments/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=tree&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=tree&project=corehr&resource=department&version=v2 document }
                 */
                tree: async (
                    payload?: {
                        data?: {
                            department_id?: string;
                            need_inactive?: boolean;
                            effective_date?: string;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        level?: number;
                                        children?: Array<string>;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/departments/tree`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * employee
             */
            employee: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee&apiName=batch_get&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_get&project=corehr&resource=employee&version=v2 document }
                 *
                 * 通过员工 ID 批量获取员工信息
                 */
                batchGet: async (
                    payload?: {
                        data?: {
                            fields?: Array<string>;
                            employment_ids?: Array<string>;
                            person_ids?: Array<string>;
                            work_emails?: Array<string>;
                            user_names?: Array<string>;
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        employment_id?: string;
                                        employment_id_v2?: string;
                                        ats_application_id?: string;
                                        prehire_id?: string;
                                        employee_number?: string;
                                        employee_type_id?: string;
                                        employee_subtype_id?: string;
                                        department_id?: string;
                                        department_id_v2?: string;
                                        job_level_id?: string;
                                        job_level?: {
                                            id?: string;
                                            level_order: number;
                                            code?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            active: boolean;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        };
                                        pathway_id?: string;
                                        pathway?: {
                                            id?: string;
                                            code?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            active: boolean;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        };
                                        job_grade_id?: string;
                                        work_location_id?: string;
                                        job_family_id?: string;
                                        job_family?: {
                                            id?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            active: boolean;
                                            parent_id?: string;
                                            effective_time: string;
                                            expiration_time?: string;
                                            code?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        };
                                        position_id?: string;
                                        position?: {
                                            position_id?: string;
                                            code?: string;
                                            names?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            descriptions?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            active: boolean;
                                        };
                                        job_id?: string;
                                        job?: {
                                            id?: string;
                                            code?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            active: boolean;
                                            job_title?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            pathway_id?: string;
                                            job_family_id_list?: Array<string>;
                                            job_level_id_list?: Array<string>;
                                            working_hours_type_id?: string;
                                            effective_time: string;
                                            expiration_time?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        company_id?: string;
                                        working_hours_type_id?: string;
                                        tenure?: string;
                                        seniority_date?: string;
                                        effective_date: string;
                                        primary_employment: boolean;
                                        probation_period?: number;
                                        on_probation?: boolean;
                                        probation_end_date?: string;
                                        direct_manager_id?: string;
                                        dotted_line_manager_id?: string;
                                        direct_manager_id_v2?: string;
                                        dotted_line_manager_id_v2?: string;
                                        employment_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        employment_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        expiration_date?: string;
                                        reason_for_offboarding?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        email_address?: string;
                                        user_name?: string;
                                        work_email_list?: Array<{
                                            email: string;
                                            email_usage?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                        }>;
                                        cost_center_list?: Array<{
                                            cost_center_id?: string;
                                            rate?: number;
                                            new_rate?: number;
                                        }>;
                                        rehire?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        rehire_employment_id?: string;
                                        person_info?: {
                                            person_id?: string;
                                            phone_number?: string;
                                            legal_name?: string;
                                            preferred_name?: string;
                                            preferred_local_full_name?: string;
                                            preferred_english_full_name?: string;
                                            name_list?: Array<{
                                                local_primary?: string;
                                                local_first_name?: string;
                                                country_region_id: string;
                                                name_type: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_first_name_2?: string;
                                                local_primary_2?: string;
                                                additional_name?: string;
                                                additional_name_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                first_name?: string;
                                                full_name?: string;
                                                hereditary?: string;
                                                custom_name?: string;
                                                custom_local_name?: string;
                                                middle_name?: string;
                                                name_primary?: string;
                                                secondary?: string;
                                                tertiary?: string;
                                                social?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                title?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_middle_name?: string;
                                                local_secondary?: string;
                                                display_name_local_and_western_script?: string;
                                                display_name_local_script?: string;
                                                display_name_western_script?: string;
                                            }>;
                                            gender?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            date_of_birth?: string;
                                            nationality_id?: string;
                                            nationality_id_v2?: string;
                                            additional_nationalities?: Array<{
                                                nationality_id?: string;
                                                name?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                alpha_2_code?: string;
                                                alpha_3_code?: string;
                                                numeric_code?: number;
                                                country_region_id?: string;
                                                status?: number;
                                            }>;
                                            citizenship_status?: Array<{
                                                id?: string;
                                                country_region_id?: string;
                                                active?: boolean;
                                                name?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                citizenship_status?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                view_order?: string;
                                            }>;
                                            race?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            marital_status?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_list?: Array<{
                                                international_area_code?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_number: string;
                                                formatted_phone_number?: string;
                                                device_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_usage?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                is_primary?: boolean;
                                                is_public?: boolean;
                                            }>;
                                            address_list?: Array<{
                                                full_address_local_script?: string;
                                                full_address_western_script?: string;
                                                address_id?: string;
                                                country_region_id: string;
                                                region_id?: string;
                                                city_id?: string;
                                                distinct_id?: string;
                                                city_id_v2?: string;
                                                district_id_v2?: string;
                                                address_line1?: string;
                                                address_line2?: string;
                                                address_line3?: string;
                                                address_line4?: string;
                                                address_line5?: string;
                                                address_line6?: string;
                                                address_line7?: string;
                                                address_line8?: string;
                                                address_line9?: string;
                                                local_address_line1?: string;
                                                local_address_line2?: string;
                                                local_address_line3?: string;
                                                local_address_line4?: string;
                                                local_address_line5?: string;
                                                local_address_line6?: string;
                                                local_address_line7?: string;
                                                local_address_line8?: string;
                                                local_address_line9?: string;
                                                postal_code?: string;
                                                address_type_list: Array<{
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                }>;
                                                is_primary: boolean;
                                                is_public: boolean;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                                city_subdivision_1?: string;
                                                city_subdivision_2?: string;
                                                region_subdivision_1?: string;
                                                region_subdivision_2?: string;
                                            }>;
                                            email_list?: Array<{
                                                email: string;
                                                is_primary?: boolean;
                                                is_public?: boolean;
                                                email_usage?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                            }>;
                                            work_experience_list?: Array<{
                                                company_organization?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                department?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                job?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                description?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                start_date?: string;
                                                end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            education_list?: Array<{
                                                school: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                level_of_education?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                start_date?: string;
                                                end_date?: string;
                                                field_of_study?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                degree?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                school_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                field_of_study_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                country_region_id?: string;
                                                expected_end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            bank_account_list?: Array<{
                                                bank_name?: string;
                                                bank_account_number: string;
                                                account_holder: string;
                                                bank?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                bank_identification_code?: string;
                                                branch_name?: string;
                                                bank_id?: string;
                                                branch_id?: string;
                                                bank_id_v2?: string;
                                                branch_id_v2?: string;
                                                country_region_id?: string;
                                                bank_account_usage?: Array<{
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                }>;
                                                bank_account_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                payment_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                payment_rate?: string;
                                                payment_amount?: string;
                                                priority?: number;
                                                currency_id?: string;
                                                IBAN?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            national_id_list?: Array<{
                                                national_id_type_id: string;
                                                national_id_number: string;
                                                issue_date?: string;
                                                expiration_date?: string;
                                                country_region_id: string;
                                                issued_by?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            dependent_list?: Array<{
                                                id?: string;
                                                name?: {
                                                    local_primary?: string;
                                                    local_first_name?: string;
                                                    country_region_id: string;
                                                    name_type: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    local_first_name_2?: string;
                                                    local_primary_2?: string;
                                                    additional_name?: string;
                                                    additional_name_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    first_name?: string;
                                                    full_name?: string;
                                                    hereditary?: string;
                                                    custom_name?: string;
                                                    custom_local_name?: string;
                                                    middle_name?: string;
                                                    name_primary?: string;
                                                    secondary?: string;
                                                    tertiary?: string;
                                                    social?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    title?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    local_middle_name?: string;
                                                    local_secondary?: string;
                                                    display_name_local_and_western_script?: string;
                                                    display_name_local_script?: string;
                                                    display_name_western_script?: string;
                                                };
                                                relationship: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                gender?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                date_of_birth?: string;
                                                nationality_id?: string;
                                                nationality_id_v2?: string;
                                                national_id_list?: Array<{
                                                    national_id_type_id: string;
                                                    national_id_number: string;
                                                    issue_date?: string;
                                                    expiration_date?: string;
                                                    country_region_id: string;
                                                    issued_by?: string;
                                                    custom_fields?: Array<{
                                                        custom_api_name: string;
                                                        name?: {
                                                            zh_cn?: string;
                                                            en_us?: string;
                                                        };
                                                        type?: number;
                                                        value: string;
                                                    }>;
                                                }>;
                                                spouses_working_status?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                is_this_person_covered_by_health_insurance?: boolean;
                                                is_this_person_allowed_for_tax_deduction?: boolean;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                                dependent_name?: string;
                                                employer?: string;
                                                job?: string;
                                                phone?: {
                                                    international_area_code?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_number: string;
                                                    formatted_phone_number?: string;
                                                    device_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_usage?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    is_primary?: boolean;
                                                    is_public?: boolean;
                                                };
                                                address?: {
                                                    full_address_local_script?: string;
                                                    full_address_western_script?: string;
                                                    address_id?: string;
                                                    country_region_id: string;
                                                    region_id?: string;
                                                    city_id?: string;
                                                    distinct_id?: string;
                                                    city_id_v2?: string;
                                                    district_id_v2?: string;
                                                    address_line1?: string;
                                                    address_line2?: string;
                                                    address_line3?: string;
                                                    address_line4?: string;
                                                    address_line5?: string;
                                                    address_line6?: string;
                                                    address_line7?: string;
                                                    address_line8?: string;
                                                    address_line9?: string;
                                                    local_address_line1?: string;
                                                    local_address_line2?: string;
                                                    local_address_line3?: string;
                                                    local_address_line4?: string;
                                                    local_address_line5?: string;
                                                    local_address_line6?: string;
                                                    local_address_line7?: string;
                                                    local_address_line8?: string;
                                                    local_address_line9?: string;
                                                    postal_code?: string;
                                                    address_type_list: Array<{
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    }>;
                                                    is_primary: boolean;
                                                    is_public: boolean;
                                                    custom_fields?: Array<{
                                                        custom_api_name: string;
                                                        name?: {
                                                            zh_cn?: string;
                                                            en_us?: string;
                                                        };
                                                        type?: number;
                                                        value: string;
                                                    }>;
                                                };
                                                birth_certificate_of_child?: Array<{
                                                    id?: string;
                                                    name?: string;
                                                }>;
                                            }>;
                                            emergency_contact_list?: Array<{
                                                id?: string;
                                                name?: {
                                                    local_primary?: string;
                                                    local_first_name?: string;
                                                    country_region_id: string;
                                                    name_type: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    local_first_name_2?: string;
                                                    local_primary_2?: string;
                                                    additional_name?: string;
                                                    additional_name_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    first_name?: string;
                                                    full_name?: string;
                                                    hereditary?: string;
                                                    custom_name?: string;
                                                    custom_local_name?: string;
                                                    middle_name?: string;
                                                    name_primary?: string;
                                                    secondary?: string;
                                                    tertiary?: string;
                                                    social?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    title?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    local_middle_name?: string;
                                                    local_secondary?: string;
                                                    display_name_local_and_western_script?: string;
                                                    display_name_local_script?: string;
                                                    display_name_western_script?: string;
                                                };
                                                relationship?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_ist?: Array<{
                                                    international_area_code?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_number: string;
                                                    formatted_phone_number?: string;
                                                    device_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_usage?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    is_primary?: boolean;
                                                    is_public?: boolean;
                                                }>;
                                                phone_list?: Array<{
                                                    international_area_code?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_number: string;
                                                    formatted_phone_number?: string;
                                                    device_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_usage?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    is_primary?: boolean;
                                                    is_public?: boolean;
                                                }>;
                                                legal_name?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                                address?: {
                                                    full_address_local_script?: string;
                                                    full_address_western_script?: string;
                                                    address_id?: string;
                                                    country_region_id: string;
                                                    region_id?: string;
                                                    city_id?: string;
                                                    distinct_id?: string;
                                                    city_id_v2?: string;
                                                    district_id_v2?: string;
                                                    address_line1?: string;
                                                    address_line2?: string;
                                                    address_line3?: string;
                                                    address_line4?: string;
                                                    address_line5?: string;
                                                    address_line6?: string;
                                                    address_line7?: string;
                                                    address_line8?: string;
                                                    address_line9?: string;
                                                    local_address_line1?: string;
                                                    local_address_line2?: string;
                                                    local_address_line3?: string;
                                                    local_address_line4?: string;
                                                    local_address_line5?: string;
                                                    local_address_line6?: string;
                                                    local_address_line7?: string;
                                                    local_address_line8?: string;
                                                    local_address_line9?: string;
                                                    postal_code?: string;
                                                    address_type_list: Array<{
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    }>;
                                                    is_primary: boolean;
                                                    is_public: boolean;
                                                    custom_fields?: Array<{
                                                        custom_api_name: string;
                                                        name?: {
                                                            zh_cn?: string;
                                                            en_us?: string;
                                                        };
                                                        type?: number;
                                                        value: string;
                                                    }>;
                                                };
                                            }>;
                                            date_entered_workforce?: string;
                                            working_years?: number;
                                            profile_image_id?: string;
                                            email_address?: string;
                                            age?: number;
                                            highest_level_of_education?: {
                                                school: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                level_of_education?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                start_date?: string;
                                                end_date?: string;
                                                field_of_study?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                degree?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                school_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                field_of_study_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                country_region_id?: string;
                                                expected_end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            };
                                            highest_degree_of_education?: {
                                                school: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                level_of_education?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                start_date?: string;
                                                end_date?: string;
                                                field_of_study?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                degree?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                school_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                field_of_study_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                country_region_id?: string;
                                                expected_end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            };
                                            personal_profile?: Array<{
                                                personal_profile_id?: string;
                                                personal_profile_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                files?: Array<{
                                                    id?: string;
                                                    name?: string;
                                                }>;
                                            }>;
                                            native_region?: string;
                                            hukou_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            hukou_location?: string;
                                            political_affiliations?: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            talent_id?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                            national_id_number?: string;
                                            family_address?: string;
                                            born_country_region?: string;
                                            is_disabled?: boolean;
                                            disable_card_number?: string;
                                            is_martyr_family?: boolean;
                                            martyr_card_number?: string;
                                            is_old_alone?: boolean;
                                            resident_taxes?: Array<{
                                                year_resident_tax: string;
                                                resident_status?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                tax_country_region_id?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            first_entry_time?: string;
                                            leave_time?: string;
                                            religion?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            working_years_v2?: number;
                                        };
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                        noncompete_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        past_offboarding?: boolean;
                                        regular_employee_start_date?: string;
                                        external_id?: string;
                                        times_employed?: number;
                                        recruitment_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        avatar_url?: string;
                                        primary_contract_id?: string;
                                        contract_start_date?: string;
                                        contract_end_date?: string;
                                        contract_expected_end_date?: string;
                                        pay_group_id?: string;
                                        assignment_pay_group_id?: string;
                                        international_assignment?: boolean;
                                        work_calendar_id?: string;
                                        department?: {
                                            id?: string;
                                            id_v2?: string;
                                            department_name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        direct_manager?: {
                                            employment_id?: string;
                                            employment_id_v2?: string;
                                            employee_number?: string;
                                            email_address?: string;
                                            person_info?: {
                                                person_id?: string;
                                                preferred_name?: string;
                                                preferred_local_full_name?: string;
                                                preferred_english_full_name?: string;
                                            };
                                        };
                                        dotted_line_manager?: {
                                            employment_id?: string;
                                            employment_id_v2?: string;
                                            employee_number?: string;
                                            email_address?: string;
                                            person_info?: {
                                                person_id?: string;
                                                preferred_name?: string;
                                                preferred_local_full_name?: string;
                                                preferred_english_full_name?: string;
                                            };
                                        };
                                        time_zone?: string;
                                        primary_international_assignment?: {
                                            id?: string;
                                            assignment_city_id?: string;
                                            assignment_company_id?: string;
                                            assignment_country_id?: string;
                                            assignment_reason?: {
                                                lang: string;
                                                value: string;
                                            };
                                            effective_time?: string;
                                            start_assignment_process_id?: string;
                                            end_assignment_process_id?: string;
                                            expiration_time?: string;
                                            international_assignment_status?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            international_assignment_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                        };
                                        service_company?: string;
                                        compensation_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        work_shift?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        talent_pool_id_list?: Array<string>;
                                        custom_org?: string;
                                        seniority_adjust_information_list?: Array<{
                                            seniority_adjustment_type: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            start_date?: string;
                                            end_date?: string;
                                            seniority_adjustment: number;
                                            reasons_for_seniority_adjustment?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        }>;
                                        employment_direct_bps?: {
                                            hrbp_ids?: Array<string>;
                                            location_bp_ids?: Array<string>;
                                        };
                                        employment_all_bps?: {
                                            hrbp_ids?: Array<string>;
                                            location_bp_ids?: Array<string>;
                                        };
                                        contract_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        archive_cpst_plan_id?: string;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/employees/batch_get`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=corehr&resource=employee&version=v2 document }
                 */
                create: async (
                    payload?: {
                        data?: {
                            personal_info?: {
                                personal_basic_info?: {
                                    legal_name?: {
                                        additional_name_type?: string;
                                        country_region?: string;
                                        full_name?: string;
                                        hereditary?: string;
                                        middle_name?: string;
                                        secondary?: string;
                                        social?: string;
                                        tertiary?: string;
                                        local_first_name_2?: string;
                                        local_middle_name?: string;
                                        local_primary?: string;
                                        local_primary_2?: string;
                                        local_secondary?: string;
                                        title?: string;
                                        local_first_name?: string;
                                        custom_local_name?: string;
                                        custom_western_name?: string;
                                        first_name?: string;
                                        name_primary?: string;
                                    };
                                    preferred_name?: {
                                        additional_name_type?: string;
                                        country_region?: string;
                                        full_name?: string;
                                        hereditary?: string;
                                        middle_name?: string;
                                        secondary?: string;
                                        social?: string;
                                        tertiary?: string;
                                        local_first_name_2?: string;
                                        local_middle_name?: string;
                                        local_primary?: string;
                                        local_primary_2?: string;
                                        local_secondary?: string;
                                        title?: string;
                                        local_first_name?: string;
                                        custom_local_name?: string;
                                        custom_western_name?: string;
                                        first_name?: string;
                                        name_primary?: string;
                                    };
                                    additional_name?: string;
                                    gender?: string;
                                    nationality_v2?: string;
                                    ethnicity_race?: string;
                                    phone?: {
                                        international_area_code?: string;
                                        phone_number?: string;
                                    };
                                    email?: string;
                                    date_of_birth?: string;
                                    marital_status?: string;
                                    is_disabled?: boolean;
                                    disable_card_number?: string;
                                    is_martyr_family?: boolean;
                                    martyr_card_number?: string;
                                    is_old_alone?: boolean;
                                    born_country_region?: string;
                                    political_affiliation?: string;
                                    native_region?: string;
                                    date_entered_workforce?: string;
                                    first_entry_time?: string;
                                    leave_time?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value?: string;
                                    }>;
                                    additional_nationalities?: Array<string>;
                                };
                                emergency_contacts?: Array<{
                                    legal_name?: string;
                                    relationship?: string;
                                    is_primary?: boolean;
                                    phone?: {
                                        international_area_code?: string;
                                        phone_number?: string;
                                    };
                                    email?: string;
                                    address?: {
                                        address_type?: string;
                                        country_region?: string;
                                        region?: string;
                                        region_subdivision_1?: string;
                                        region_subdivision_2?: string;
                                        city_v2?: string;
                                        city_text?: string;
                                        local_city_text?: string;
                                        city_subdivision_1?: string;
                                        city_subdivision_2?: string;
                                        district_v2?: string;
                                        postal_code?: string;
                                        address_line_1?: string;
                                        local_address_line_1?: string;
                                        address_line_2?: string;
                                        local_address_line_2?: string;
                                        address_line_3?: string;
                                        local_address_line_3?: string;
                                        address_line_4?: string;
                                        local_address_line_5?: string;
                                        address_line_6?: string;
                                        local_address_line_6?: string;
                                        address_line_7?: string;
                                        local_address_line_7?: string;
                                        address_line_8?: string;
                                        local_address_line_8?: string;
                                        address_line_9?: string;
                                        local_address_line_9?: string;
                                        local_address_line_4?: string;
                                        address_line_5?: string;
                                    };
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value?: string;
                                    }>;
                                }>;
                                bank_accounts?: Array<{
                                    country_region?: string;
                                    bank_name?: string;
                                    branch_name?: string;
                                    account_holder?: string;
                                    bank_account_number?: string;
                                    bank_account_usages?: Array<string>;
                                    bank_account_type?: string;
                                    bank_id?: string;
                                    branch_id?: string;
                                    payment_type?:
                                        | "percent"
                                        | "amount"
                                        | "balance";
                                    payment_rate?: string;
                                    payment_amount?: string;
                                    priority?: string;
                                }>;
                                nationals?: Array<{
                                    country_region?: string;
                                    national_id_type?: string;
                                    national_id_number?: string;
                                    issued_date?: string;
                                    issued_by?: string;
                                    expiration_date?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value?: string;
                                    }>;
                                }>;
                                resident_taxes?: Array<{
                                    year_resident_tax?: string;
                                    tax_country_region?: string;
                                    resident_status?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value?: string;
                                    }>;
                                }>;
                                dependents?: Array<{
                                    legal_name?: string;
                                    date_of_birth?: string;
                                    relationship_with_dependent?: string;
                                    gender?: string;
                                    phone?: {
                                        international_area_code?: string;
                                        phone_number?: string;
                                    };
                                    job?: string;
                                    child_birth_certificates?: Array<{
                                        file_id?: string;
                                        mime_type?: string;
                                        name?: string;
                                        size?: string;
                                        token?: string;
                                    }>;
                                    employer?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value?: string;
                                    }>;
                                    address?: {
                                        address_type?: string;
                                        country_region?: string;
                                        region?: string;
                                        region_subdivision_1?: string;
                                        region_subdivision_2?: string;
                                        city_v2?: string;
                                        city_text?: string;
                                        local_city_text?: string;
                                        city_subdivision_1?: string;
                                        city_subdivision_2?: string;
                                        district_v2?: string;
                                        postal_code?: string;
                                        address_line_1?: string;
                                        local_address_line_1?: string;
                                        address_line_2?: string;
                                        local_address_line_2?: string;
                                        address_line_3?: string;
                                        local_address_line_3?: string;
                                        address_line_4?: string;
                                        local_address_line_5?: string;
                                        address_line_6?: string;
                                        local_address_line_6?: string;
                                        address_line_7?: string;
                                        local_address_line_7?: string;
                                        address_line_8?: string;
                                        local_address_line_8?: string;
                                        address_line_9?: string;
                                        local_address_line_9?: string;
                                        local_address_line_4?: string;
                                        address_line_5?: string;
                                    };
                                }>;
                                hukou?: {
                                    hukou_type?: string;
                                    hukou_location?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value?: string;
                                    }>;
                                };
                                contact_addresses?: Array<{
                                    address_type?: string;
                                    country_region?: string;
                                    region?: string;
                                    region_subdivision_1?: string;
                                    region_subdivision_2?: string;
                                    city_v2?: string;
                                    city_text?: string;
                                    local_city_text?: string;
                                    city_subdivision_1?: string;
                                    city_subdivision_2?: string;
                                    district_v2?: string;
                                    postal_code?: string;
                                    address_line_1?: string;
                                    local_address_line_1?: string;
                                    address_line_2?: string;
                                    local_address_line_2?: string;
                                    address_line_3?: string;
                                    local_address_line_3?: string;
                                    address_line_4?: string;
                                    local_address_line_5?: string;
                                    address_line_6?: string;
                                    local_address_line_6?: string;
                                    address_line_7?: string;
                                    local_address_line_7?: string;
                                    address_line_8?: string;
                                    local_address_line_8?: string;
                                    address_line_9?: string;
                                    local_address_line_9?: string;
                                    local_address_line_4?: string;
                                    address_line_5?: string;
                                }>;
                                custom_groups?: Array<{
                                    group_name?: string;
                                    items?: Array<{
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value?: string;
                                        }>;
                                    }>;
                                }>;
                                citizenship_statuses?: Array<{
                                    country_region?: string;
                                    citizenship_status?: string;
                                }>;
                            };
                            employment_info?: {
                                basic_info?: {
                                    employee_number?: string;
                                    rehire?: boolean;
                                    employment_info_before_rehire?: string;
                                    effective_time?: string;
                                    regular_employee_start_date?: string;
                                    seniority_date?: string;
                                    work_email?: string;
                                    phone?: {
                                        international_area_code?: string;
                                        phone_number?: string;
                                    };
                                    user_geo?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value?: string;
                                    }>;
                                };
                                probation_info?: {
                                    probation_start_date?: string;
                                    probation_expected_end_date?: string;
                                    actual_probation_end_date?: string;
                                };
                                employment_record?: {
                                    employee_type?: string;
                                    department?: string;
                                    direct_manager?: string;
                                    working_hours_type?: string;
                                    cost_centers?: Array<{
                                        id?: string;
                                        rate?: number;
                                    }>;
                                    direct_manager_effective_time?: string;
                                    dotted_line_manager?: string;
                                    dotted_line_manager_effective_time?: string;
                                    job?: string;
                                    job_family?: string;
                                    job_level?: string;
                                    job_grade?: string;
                                    work_location?: string;
                                    weekly_working_hours?: number;
                                    position?: string;
                                    pathway?: string;
                                };
                                emp_contract_record?: {
                                    contract_number?: string;
                                    contract_type?: string;
                                    first_party?: string;
                                    effective_time?: string;
                                    duration_type?: string;
                                    contract_end_date?: string;
                                };
                                custom_groups?: Array<{
                                    group_name?: string;
                                    items?: Array<{
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value?: string;
                                        }>;
                                    }>;
                                }>;
                                custom_org_groups?: Array<{
                                    effective_time: string;
                                    start_reason?: string;
                                    custom_org_with_rates: Array<{
                                        id: string;
                                        rate?: number;
                                    }>;
                                    object_api_name: string;
                                }>;
                                seniority_adjust_informations?: Array<{
                                    seniority_adjustment_type:
                                        | "increase"
                                        | "decrease";
                                    start_date?: string;
                                    end_date?: string;
                                    reasons_for_seniority_adjustment?: string;
                                    seniority_adjustment: number;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value?: string;
                                    }>;
                                }>;
                                default_cost_center?: {
                                    reason?: string;
                                    is_inherit?: boolean;
                                    cost_center_id?: { wk_id?: string };
                                };
                                cost_allocation?: {
                                    effective_time?: string;
                                    expiration_time?: string;
                                    cost_center_rates?: Array<{
                                        cost_center_id?: string;
                                        rate?: number;
                                        new_rate?: number;
                                    }>;
                                };
                            };
                            career?: {
                                educations?: Array<{
                                    school?: string;
                                    school_enum?: string;
                                    start_date?: string;
                                    end_date?: string;
                                    level_of_education?: string;
                                    field_of_study?: string;
                                    degree?: string;
                                    field_of_study_enum?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value?: string;
                                    }>;
                                }>;
                                work_experiences?: Array<{
                                    company_organization?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                    };
                                    department?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                    };
                                    start_date?: string;
                                    end_date?: string;
                                    job?: { zh_cn?: string; en_us?: string };
                                    description?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                    };
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value?: string;
                                    }>;
                                }>;
                                custom_groups?: Array<{
                                    group_name?: string;
                                    items?: Array<{
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value?: string;
                                        }>;
                                    }>;
                                }>;
                            };
                            data_attachment?: {
                                personal_records?: Array<{
                                    profile_type?: string;
                                    files?: Array<{
                                        file_id?: string;
                                        mime_type?: string;
                                        name?: string;
                                        size?: string;
                                        token?: string;
                                    }>;
                                }>;
                                custom_groups?: Array<{
                                    group_name?: string;
                                    items?: Array<{
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value?: string;
                                        }>;
                                    }>;
                                }>;
                            };
                        };
                        params?: {
                            client_token?: string;
                            rehire?: boolean;
                            rehire_employment_id?: string;
                            force_submit?: boolean;
                            ignore_working_hours_type_rule?: boolean;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    employment_id?: string;
                                    contract_id?: string;
                                    job_data_id?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/employees`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                searchWithIterator: async (
                    payload?: {
                        data?: {
                            fields?: Array<string>;
                            employment_id_list?: Array<string>;
                            employee_number_list?: Array<string>;
                            work_email?: string;
                            phone_number?: string;
                            key_word?: string;
                            employment_status?: "hired" | "terminated";
                            employee_type_id?: string;
                            department_id_list?: Array<string>;
                            direct_manager_id_list?: Array<string>;
                            dotted_line_manager_id_list?: Array<string>;
                            regular_employee_start_date_start?: string;
                            regular_employee_start_date_end?: string;
                            effective_time_start?: string;
                            effective_time_end?: string;
                            work_location_id_list_include_sub?: Array<string>;
                            preferred_english_full_name_list?: Array<string>;
                            preferred_local_full_name_list?: Array<string>;
                            national_id_number_list?: Array<string>;
                            phone_number_list?: Array<string>;
                            email_address_list?: Array<string>;
                            user_name?: string;
                            department_id_list_include_sub?: Array<string>;
                            additional_national_id_number_list?: Array<string>;
                            citizenship_status_list?: Array<string>;
                            cost_center_id_list?: Array<string>;
                            service_company_list?: Array<string>;
                            service_company_list_include_sub?: Array<string>;
                            job_family_id_list?: Array<string>;
                            job_family_id_list_include_sub?: Array<string>;
                            job_level_id_list?: Array<string>;
                            job_grade_id_list?: Array<string>;
                            job_id_list?: Array<string>;
                            position_id_list?: Array<string>;
                            position_id_list_include_sub?: Array<string>;
                            working_hours_type_id_list?: Array<string>;
                            nationality_id_list?: Array<string>;
                            pay_group_id_list?: Array<string>;
                            assignment_pay_group_id_list?: Array<string>;
                            contract_type_list?: Array<string>;
                            archive_cpst_plan_id_list?: Array<string>;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/employees/search`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        employment_id?: string;
                                                        employment_id_v2?: string;
                                                        ats_application_id?: string;
                                                        prehire_id?: string;
                                                        employee_number?: string;
                                                        employee_type_id?: string;
                                                        employee_subtype_id?: string;
                                                        department_id?: string;
                                                        department_id_v2?: string;
                                                        job_level_id?: string;
                                                        job_level?: {
                                                            id?: string;
                                                            level_order: number;
                                                            code?: string;
                                                            name: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                            description?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                            active: boolean;
                                                            custom_fields?: Array<{
                                                                custom_api_name: string;
                                                                name?: {
                                                                    zh_cn?: string;
                                                                    en_us?: string;
                                                                };
                                                                type?: number;
                                                                value: string;
                                                            }>;
                                                        };
                                                        pathway_id?: string;
                                                        pathway?: {
                                                            id?: string;
                                                            code?: string;
                                                            name: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                            description?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                            active: boolean;
                                                            custom_fields?: Array<{
                                                                custom_api_name: string;
                                                                name?: {
                                                                    zh_cn?: string;
                                                                    en_us?: string;
                                                                };
                                                                type?: number;
                                                                value: string;
                                                            }>;
                                                        };
                                                        job_grade_id?: string;
                                                        work_location_id?: string;
                                                        job_family_id?: string;
                                                        job_family?: {
                                                            id?: string;
                                                            name: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                            active: boolean;
                                                            parent_id?: string;
                                                            effective_time: string;
                                                            expiration_time?: string;
                                                            code?: string;
                                                            custom_fields?: Array<{
                                                                custom_api_name: string;
                                                                name?: {
                                                                    zh_cn?: string;
                                                                    en_us?: string;
                                                                };
                                                                type?: number;
                                                                value: string;
                                                            }>;
                                                        };
                                                        position_id?: string;
                                                        position?: {
                                                            position_id?: string;
                                                            code?: string;
                                                            names?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                            descriptions?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                            active: boolean;
                                                        };
                                                        job_id?: string;
                                                        job?: {
                                                            id?: string;
                                                            code?: string;
                                                            name: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                            description?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                            active: boolean;
                                                            job_title?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                            pathway_id?: string;
                                                            job_family_id_list?: Array<string>;
                                                            job_level_id_list?: Array<string>;
                                                            working_hours_type_id?: string;
                                                            effective_time: string;
                                                            expiration_time?: string;
                                                            custom_fields?: Array<{
                                                                field_name: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        company_id?: string;
                                                        working_hours_type_id?: string;
                                                        tenure?: string;
                                                        seniority_date?: string;
                                                        effective_date: string;
                                                        primary_employment: boolean;
                                                        probation_period?: number;
                                                        on_probation?: boolean;
                                                        probation_end_date?: string;
                                                        direct_manager_id?: string;
                                                        dotted_line_manager_id?: string;
                                                        direct_manager_id_v2?: string;
                                                        dotted_line_manager_id_v2?: string;
                                                        employment_type: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        employment_status?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        expiration_date?: string;
                                                        reason_for_offboarding?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        email_address?: string;
                                                        user_name?: string;
                                                        work_email_list?: Array<{
                                                            email: string;
                                                            email_usage?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                        }>;
                                                        cost_center_list?: Array<{
                                                            cost_center_id?: string;
                                                            rate?: number;
                                                            new_rate?: number;
                                                        }>;
                                                        rehire?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        rehire_employment_id?: string;
                                                        person_info?: {
                                                            person_id?: string;
                                                            phone_number?: string;
                                                            legal_name?: string;
                                                            preferred_name?: string;
                                                            additional_name?: string;
                                                            preferred_local_full_name?: string;
                                                            preferred_english_full_name?: string;
                                                            name_list?: Array<{
                                                                local_primary?: string;
                                                                local_first_name?: string;
                                                                country_region_id: string;
                                                                name_type: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                local_first_name_2?: string;
                                                                local_primary_2?: string;
                                                                additional_name?: string;
                                                                additional_name_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                first_name?: string;
                                                                full_name?: string;
                                                                hereditary?: string;
                                                                custom_name?: string;
                                                                custom_local_name?: string;
                                                                middle_name?: string;
                                                                name_primary?: string;
                                                                secondary?: string;
                                                                tertiary?: string;
                                                                social?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                title?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                local_middle_name?: string;
                                                                local_secondary?: string;
                                                                display_name_local_and_western_script?: string;
                                                                display_name_local_script?: string;
                                                                display_name_western_script?: string;
                                                            }>;
                                                            gender?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            date_of_birth?: string;
                                                            nationality_id?: string;
                                                            nationality_id_v2?: string;
                                                            additional_nationalities?: Array<{
                                                                nationality_id?: string;
                                                                name?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                alpha_2_code?: string;
                                                                alpha_3_code?: string;
                                                                numeric_code?: number;
                                                                country_region_id?: string;
                                                                status?: number;
                                                            }>;
                                                            citizenship_status?: Array<{
                                                                id?: string;
                                                                country_region_id?: string;
                                                                active?: boolean;
                                                                name?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                citizenship_status?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                view_order?: string;
                                                            }>;
                                                            race?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            marital_status?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            phone_list?: Array<{
                                                                international_area_code?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                phone_number: string;
                                                                formatted_phone_number?: string;
                                                                device_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                phone_usage?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                is_primary?: boolean;
                                                                is_public?: boolean;
                                                            }>;
                                                            address_list?: Array<{
                                                                full_address_local_script?: string;
                                                                full_address_western_script?: string;
                                                                address_id?: string;
                                                                country_region_id: string;
                                                                region_id?: string;
                                                                city_id?: string;
                                                                distinct_id?: string;
                                                                city_id_v2?: string;
                                                                district_id_v2?: string;
                                                                address_line1?: string;
                                                                address_line2?: string;
                                                                address_line3?: string;
                                                                address_line4?: string;
                                                                address_line5?: string;
                                                                address_line6?: string;
                                                                address_line7?: string;
                                                                address_line8?: string;
                                                                address_line9?: string;
                                                                local_address_line1?: string;
                                                                local_address_line2?: string;
                                                                local_address_line3?: string;
                                                                local_address_line4?: string;
                                                                local_address_line5?: string;
                                                                local_address_line6?: string;
                                                                local_address_line7?: string;
                                                                local_address_line8?: string;
                                                                local_address_line9?: string;
                                                                postal_code?: string;
                                                                address_type_list: Array<{
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                }>;
                                                                is_primary: boolean;
                                                                is_public: boolean;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                                city_subdivision_1?: string;
                                                                city_subdivision_2?: string;
                                                                region_subdivision_1?: string;
                                                                region_subdivision_2?: string;
                                                            }>;
                                                            email_list?: Array<{
                                                                email: string;
                                                                is_primary?: boolean;
                                                                is_public?: boolean;
                                                                email_usage?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                            }>;
                                                            work_experience_list?: Array<{
                                                                company_organization?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                department?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                job?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                description?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                start_date?: string;
                                                                end_date?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            education_list?: Array<{
                                                                school: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                level_of_education?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                start_date?: string;
                                                                end_date?: string;
                                                                field_of_study?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                degree?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                school_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                field_of_study_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                country_region_id?: string;
                                                                expected_end_date?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            bank_account_list?: Array<{
                                                                bank_name?: string;
                                                                bank_account_number: string;
                                                                account_holder: string;
                                                                bank?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                bank_identification_code?: string;
                                                                branch_name?: string;
                                                                bank_id?: string;
                                                                branch_id?: string;
                                                                bank_id_v2?: string;
                                                                branch_id_v2?: string;
                                                                country_region_id?: string;
                                                                bank_account_usage?: Array<{
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                }>;
                                                                bank_account_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                payment_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                payment_rate?: string;
                                                                payment_amount?: string;
                                                                priority?: number;
                                                                currency_id?: string;
                                                                IBAN?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            national_id_list?: Array<{
                                                                national_id_type_id: string;
                                                                national_id_number: string;
                                                                issue_date?: string;
                                                                expiration_date?: string;
                                                                country_region_id: string;
                                                                issued_by?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            dependent_list?: Array<{
                                                                id?: string;
                                                                name?: {
                                                                    local_primary?: string;
                                                                    local_first_name?: string;
                                                                    country_region_id: string;
                                                                    name_type: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    local_first_name_2?: string;
                                                                    local_primary_2?: string;
                                                                    additional_name?: string;
                                                                    additional_name_type?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    first_name?: string;
                                                                    full_name?: string;
                                                                    hereditary?: string;
                                                                    custom_name?: string;
                                                                    custom_local_name?: string;
                                                                    middle_name?: string;
                                                                    name_primary?: string;
                                                                    secondary?: string;
                                                                    tertiary?: string;
                                                                    social?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    title?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    local_middle_name?: string;
                                                                    local_secondary?: string;
                                                                    display_name_local_and_western_script?: string;
                                                                    display_name_local_script?: string;
                                                                    display_name_western_script?: string;
                                                                };
                                                                relationship: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                gender?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                date_of_birth?: string;
                                                                nationality_id?: string;
                                                                nationality_id_v2?: string;
                                                                national_id_list?: Array<{
                                                                    national_id_type_id: string;
                                                                    national_id_number: string;
                                                                    issue_date?: string;
                                                                    expiration_date?: string;
                                                                    country_region_id: string;
                                                                    issued_by?: string;
                                                                    custom_fields?: Array<{
                                                                        custom_api_name: string;
                                                                        name?: {
                                                                            zh_cn?: string;
                                                                            en_us?: string;
                                                                        };
                                                                        type?: number;
                                                                        value: string;
                                                                    }>;
                                                                }>;
                                                                spouses_working_status?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                is_this_person_covered_by_health_insurance?: boolean;
                                                                is_this_person_allowed_for_tax_deduction?: boolean;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                                dependent_name?: string;
                                                                employer?: string;
                                                                job?: string;
                                                                phone?: {
                                                                    international_area_code?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_number: string;
                                                                    formatted_phone_number?: string;
                                                                    device_type?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_usage?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    is_primary?: boolean;
                                                                    is_public?: boolean;
                                                                };
                                                                address?: {
                                                                    full_address_local_script?: string;
                                                                    full_address_western_script?: string;
                                                                    address_id?: string;
                                                                    country_region_id: string;
                                                                    region_id?: string;
                                                                    city_id?: string;
                                                                    distinct_id?: string;
                                                                    city_id_v2?: string;
                                                                    district_id_v2?: string;
                                                                    address_line1?: string;
                                                                    address_line2?: string;
                                                                    address_line3?: string;
                                                                    address_line4?: string;
                                                                    address_line5?: string;
                                                                    address_line6?: string;
                                                                    address_line7?: string;
                                                                    address_line8?: string;
                                                                    address_line9?: string;
                                                                    local_address_line1?: string;
                                                                    local_address_line2?: string;
                                                                    local_address_line3?: string;
                                                                    local_address_line4?: string;
                                                                    local_address_line5?: string;
                                                                    local_address_line6?: string;
                                                                    local_address_line7?: string;
                                                                    local_address_line8?: string;
                                                                    local_address_line9?: string;
                                                                    postal_code?: string;
                                                                    address_type_list: Array<{
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    }>;
                                                                    is_primary: boolean;
                                                                    is_public: boolean;
                                                                    custom_fields?: Array<{
                                                                        custom_api_name: string;
                                                                        name?: {
                                                                            zh_cn?: string;
                                                                            en_us?: string;
                                                                        };
                                                                        type?: number;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                birth_certificate_of_child?: Array<{
                                                                    id?: string;
                                                                    name?: string;
                                                                }>;
                                                            }>;
                                                            emergency_contact_list?: Array<{
                                                                id?: string;
                                                                name?: {
                                                                    local_primary?: string;
                                                                    local_first_name?: string;
                                                                    country_region_id: string;
                                                                    name_type: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    local_first_name_2?: string;
                                                                    local_primary_2?: string;
                                                                    additional_name?: string;
                                                                    additional_name_type?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    first_name?: string;
                                                                    full_name?: string;
                                                                    hereditary?: string;
                                                                    custom_name?: string;
                                                                    custom_local_name?: string;
                                                                    middle_name?: string;
                                                                    name_primary?: string;
                                                                    secondary?: string;
                                                                    tertiary?: string;
                                                                    social?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    title?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    local_middle_name?: string;
                                                                    local_secondary?: string;
                                                                    display_name_local_and_western_script?: string;
                                                                    display_name_local_script?: string;
                                                                    display_name_western_script?: string;
                                                                };
                                                                relationship?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                phone_ist?: Array<{
                                                                    international_area_code?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_number: string;
                                                                    formatted_phone_number?: string;
                                                                    device_type?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_usage?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    is_primary?: boolean;
                                                                    is_public?: boolean;
                                                                }>;
                                                                phone_list?: Array<{
                                                                    international_area_code?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_number: string;
                                                                    formatted_phone_number?: string;
                                                                    device_type?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_usage?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    is_primary?: boolean;
                                                                    is_public?: boolean;
                                                                }>;
                                                                legal_name?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                                address?: {
                                                                    full_address_local_script?: string;
                                                                    full_address_western_script?: string;
                                                                    address_id?: string;
                                                                    country_region_id: string;
                                                                    region_id?: string;
                                                                    city_id?: string;
                                                                    distinct_id?: string;
                                                                    city_id_v2?: string;
                                                                    district_id_v2?: string;
                                                                    address_line1?: string;
                                                                    address_line2?: string;
                                                                    address_line3?: string;
                                                                    address_line4?: string;
                                                                    address_line5?: string;
                                                                    address_line6?: string;
                                                                    address_line7?: string;
                                                                    address_line8?: string;
                                                                    address_line9?: string;
                                                                    local_address_line1?: string;
                                                                    local_address_line2?: string;
                                                                    local_address_line3?: string;
                                                                    local_address_line4?: string;
                                                                    local_address_line5?: string;
                                                                    local_address_line6?: string;
                                                                    local_address_line7?: string;
                                                                    local_address_line8?: string;
                                                                    local_address_line9?: string;
                                                                    postal_code?: string;
                                                                    address_type_list: Array<{
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    }>;
                                                                    is_primary: boolean;
                                                                    is_public: boolean;
                                                                    custom_fields?: Array<{
                                                                        custom_api_name: string;
                                                                        name?: {
                                                                            zh_cn?: string;
                                                                            en_us?: string;
                                                                        };
                                                                        type?: number;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                            }>;
                                                            date_entered_workforce?: string;
                                                            working_years?: number;
                                                            profile_image_id?: string;
                                                            email_address?: string;
                                                            age?: number;
                                                            highest_level_of_education?: {
                                                                school: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                level_of_education?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                start_date?: string;
                                                                end_date?: string;
                                                                field_of_study?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                degree?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                school_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                field_of_study_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                country_region_id?: string;
                                                                expected_end_date?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            highest_degree_of_education?: {
                                                                school: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                level_of_education?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                start_date?: string;
                                                                end_date?: string;
                                                                field_of_study?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                degree?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                school_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                field_of_study_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                country_region_id?: string;
                                                                expected_end_date?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            personal_profile?: Array<{
                                                                personal_profile_id?: string;
                                                                personal_profile_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                files?: Array<{
                                                                    id?: string;
                                                                    name?: string;
                                                                }>;
                                                            }>;
                                                            native_region?: string;
                                                            hukou_type?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            hukou_location?: string;
                                                            political_affiliations?: Array<{
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            talent_id?: string;
                                                            custom_fields?: Array<{
                                                                custom_api_name: string;
                                                                name?: {
                                                                    zh_cn?: string;
                                                                    en_us?: string;
                                                                };
                                                                type?: number;
                                                                value: string;
                                                            }>;
                                                            national_id_number?: string;
                                                            family_address?: string;
                                                            born_country_region?: string;
                                                            is_disabled?: boolean;
                                                            disable_card_number?: string;
                                                            is_martyr_family?: boolean;
                                                            martyr_card_number?: string;
                                                            is_old_alone?: boolean;
                                                            resident_taxes?: Array<{
                                                                year_resident_tax: string;
                                                                resident_status?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                tax_country_region_id?: string;
                                                                custom_fields?: Array<{
                                                                    field_name: string;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            first_entry_time?: string;
                                                            leave_time?: string;
                                                            religion?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            working_years_v2?: number;
                                                        };
                                                        custom_fields?: Array<{
                                                            custom_api_name: string;
                                                            name?: {
                                                                zh_cn?: string;
                                                                en_us?: string;
                                                            };
                                                            type?: number;
                                                            value: string;
                                                        }>;
                                                        noncompete_status?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        past_offboarding?: boolean;
                                                        regular_employee_start_date?: string;
                                                        external_id?: string;
                                                        times_employed?: number;
                                                        recruitment_type?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        avatar_url?: string;
                                                        primary_contract_id?: string;
                                                        contract_start_date?: string;
                                                        contract_end_date?: string;
                                                        contract_expected_end_date?: string;
                                                        pay_group_id?: string;
                                                        assignment_pay_group_id?: string;
                                                        international_assignment?: boolean;
                                                        work_calendar_id?: string;
                                                        department?: {
                                                            id?: string;
                                                            id_v2?: string;
                                                            department_name?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        direct_manager?: {
                                                            employment_id?: string;
                                                            employment_id_v2?: string;
                                                            employee_number?: string;
                                                            email_address?: string;
                                                            person_info?: {
                                                                person_id?: string;
                                                                preferred_name?: string;
                                                                preferred_local_full_name?: string;
                                                                preferred_english_full_name?: string;
                                                            };
                                                        };
                                                        dotted_line_manager?: {
                                                            employment_id?: string;
                                                            employment_id_v2?: string;
                                                            employee_number?: string;
                                                            email_address?: string;
                                                            person_info?: {
                                                                person_id?: string;
                                                                preferred_name?: string;
                                                                preferred_local_full_name?: string;
                                                                preferred_english_full_name?: string;
                                                            };
                                                        };
                                                        time_zone?: string;
                                                        primary_international_assignment?: {
                                                            id?: string;
                                                            assignment_city_id?: string;
                                                            assignment_company_id?: string;
                                                            assignment_country_id?: string;
                                                            assignment_reason?: {
                                                                lang: string;
                                                                value: string;
                                                            };
                                                            effective_time?: string;
                                                            start_assignment_process_id?: string;
                                                            end_assignment_process_id?: string;
                                                            expiration_time?: string;
                                                            international_assignment_status?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            international_assignment_type?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                        };
                                                        service_company?: string;
                                                        compensation_type?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        work_shift?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        talent_pool_id_list?: Array<string>;
                                                        custom_org?: string;
                                                        seniority_adjust_information_list?: Array<{
                                                            seniority_adjustment_type: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            start_date?: string;
                                                            end_date?: string;
                                                            seniority_adjustment: number;
                                                            reasons_for_seniority_adjustment?: string;
                                                            custom_fields?: Array<{
                                                                custom_api_name: string;
                                                                name?: {
                                                                    zh_cn?: string;
                                                                    en_us?: string;
                                                                };
                                                                type?: number;
                                                                value: string;
                                                            }>;
                                                        }>;
                                                        employment_direct_bps?: {
                                                            hrbp_ids?: Array<string>;
                                                            location_bp_ids?: Array<string>;
                                                        };
                                                        employment_all_bps?: {
                                                            hrbp_ids?: Array<string>;
                                                            location_bp_ids?: Array<string>;
                                                        };
                                                        contract_type?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        archive_cpst_plan_id?: string;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=employee&version=v2 document }
                 *
                 * 根据 email、工号、个人电话等条件查询员工雇佣信息以及个人基础信息
                 */
                search: async (
                    payload?: {
                        data?: {
                            fields?: Array<string>;
                            employment_id_list?: Array<string>;
                            employee_number_list?: Array<string>;
                            work_email?: string;
                            phone_number?: string;
                            key_word?: string;
                            employment_status?: "hired" | "terminated";
                            employee_type_id?: string;
                            department_id_list?: Array<string>;
                            direct_manager_id_list?: Array<string>;
                            dotted_line_manager_id_list?: Array<string>;
                            regular_employee_start_date_start?: string;
                            regular_employee_start_date_end?: string;
                            effective_time_start?: string;
                            effective_time_end?: string;
                            work_location_id_list_include_sub?: Array<string>;
                            preferred_english_full_name_list?: Array<string>;
                            preferred_local_full_name_list?: Array<string>;
                            national_id_number_list?: Array<string>;
                            phone_number_list?: Array<string>;
                            email_address_list?: Array<string>;
                            user_name?: string;
                            department_id_list_include_sub?: Array<string>;
                            additional_national_id_number_list?: Array<string>;
                            citizenship_status_list?: Array<string>;
                            cost_center_id_list?: Array<string>;
                            service_company_list?: Array<string>;
                            service_company_list_include_sub?: Array<string>;
                            job_family_id_list?: Array<string>;
                            job_family_id_list_include_sub?: Array<string>;
                            job_level_id_list?: Array<string>;
                            job_grade_id_list?: Array<string>;
                            job_id_list?: Array<string>;
                            position_id_list?: Array<string>;
                            position_id_list_include_sub?: Array<string>;
                            working_hours_type_id_list?: Array<string>;
                            nationality_id_list?: Array<string>;
                            pay_group_id_list?: Array<string>;
                            assignment_pay_group_id_list?: Array<string>;
                            contract_type_list?: Array<string>;
                            archive_cpst_plan_id_list?: Array<string>;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        employment_id?: string;
                                        employment_id_v2?: string;
                                        ats_application_id?: string;
                                        prehire_id?: string;
                                        employee_number?: string;
                                        employee_type_id?: string;
                                        employee_subtype_id?: string;
                                        department_id?: string;
                                        department_id_v2?: string;
                                        job_level_id?: string;
                                        job_level?: {
                                            id?: string;
                                            level_order: number;
                                            code?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            active: boolean;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        };
                                        pathway_id?: string;
                                        pathway?: {
                                            id?: string;
                                            code?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            active: boolean;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        };
                                        job_grade_id?: string;
                                        work_location_id?: string;
                                        job_family_id?: string;
                                        job_family?: {
                                            id?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            active: boolean;
                                            parent_id?: string;
                                            effective_time: string;
                                            expiration_time?: string;
                                            code?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        };
                                        position_id?: string;
                                        position?: {
                                            position_id?: string;
                                            code?: string;
                                            names?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            descriptions?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            active: boolean;
                                        };
                                        job_id?: string;
                                        job?: {
                                            id?: string;
                                            code?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            active: boolean;
                                            job_title?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            pathway_id?: string;
                                            job_family_id_list?: Array<string>;
                                            job_level_id_list?: Array<string>;
                                            working_hours_type_id?: string;
                                            effective_time: string;
                                            expiration_time?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        company_id?: string;
                                        working_hours_type_id?: string;
                                        tenure?: string;
                                        seniority_date?: string;
                                        effective_date: string;
                                        primary_employment: boolean;
                                        probation_period?: number;
                                        on_probation?: boolean;
                                        probation_end_date?: string;
                                        direct_manager_id?: string;
                                        dotted_line_manager_id?: string;
                                        direct_manager_id_v2?: string;
                                        dotted_line_manager_id_v2?: string;
                                        employment_type: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        employment_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        expiration_date?: string;
                                        reason_for_offboarding?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        email_address?: string;
                                        user_name?: string;
                                        work_email_list?: Array<{
                                            email: string;
                                            email_usage?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                        }>;
                                        cost_center_list?: Array<{
                                            cost_center_id?: string;
                                            rate?: number;
                                            new_rate?: number;
                                        }>;
                                        rehire?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        rehire_employment_id?: string;
                                        person_info?: {
                                            person_id?: string;
                                            phone_number?: string;
                                            legal_name?: string;
                                            preferred_name?: string;
                                            additional_name?: string;
                                            preferred_local_full_name?: string;
                                            preferred_english_full_name?: string;
                                            name_list?: Array<{
                                                local_primary?: string;
                                                local_first_name?: string;
                                                country_region_id: string;
                                                name_type: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_first_name_2?: string;
                                                local_primary_2?: string;
                                                additional_name?: string;
                                                additional_name_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                first_name?: string;
                                                full_name?: string;
                                                hereditary?: string;
                                                custom_name?: string;
                                                custom_local_name?: string;
                                                middle_name?: string;
                                                name_primary?: string;
                                                secondary?: string;
                                                tertiary?: string;
                                                social?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                title?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_middle_name?: string;
                                                local_secondary?: string;
                                                display_name_local_and_western_script?: string;
                                                display_name_local_script?: string;
                                                display_name_western_script?: string;
                                            }>;
                                            gender?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            date_of_birth?: string;
                                            nationality_id?: string;
                                            nationality_id_v2?: string;
                                            additional_nationalities?: Array<{
                                                nationality_id?: string;
                                                name?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                alpha_2_code?: string;
                                                alpha_3_code?: string;
                                                numeric_code?: number;
                                                country_region_id?: string;
                                                status?: number;
                                            }>;
                                            citizenship_status?: Array<{
                                                id?: string;
                                                country_region_id?: string;
                                                active?: boolean;
                                                name?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                citizenship_status?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                view_order?: string;
                                            }>;
                                            race?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            marital_status?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_list?: Array<{
                                                international_area_code?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_number: string;
                                                formatted_phone_number?: string;
                                                device_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_usage?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                is_primary?: boolean;
                                                is_public?: boolean;
                                            }>;
                                            address_list?: Array<{
                                                full_address_local_script?: string;
                                                full_address_western_script?: string;
                                                address_id?: string;
                                                country_region_id: string;
                                                region_id?: string;
                                                city_id?: string;
                                                distinct_id?: string;
                                                city_id_v2?: string;
                                                district_id_v2?: string;
                                                address_line1?: string;
                                                address_line2?: string;
                                                address_line3?: string;
                                                address_line4?: string;
                                                address_line5?: string;
                                                address_line6?: string;
                                                address_line7?: string;
                                                address_line8?: string;
                                                address_line9?: string;
                                                local_address_line1?: string;
                                                local_address_line2?: string;
                                                local_address_line3?: string;
                                                local_address_line4?: string;
                                                local_address_line5?: string;
                                                local_address_line6?: string;
                                                local_address_line7?: string;
                                                local_address_line8?: string;
                                                local_address_line9?: string;
                                                postal_code?: string;
                                                address_type_list: Array<{
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                }>;
                                                is_primary: boolean;
                                                is_public: boolean;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                                city_subdivision_1?: string;
                                                city_subdivision_2?: string;
                                                region_subdivision_1?: string;
                                                region_subdivision_2?: string;
                                            }>;
                                            email_list?: Array<{
                                                email: string;
                                                is_primary?: boolean;
                                                is_public?: boolean;
                                                email_usage?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                            }>;
                                            work_experience_list?: Array<{
                                                company_organization?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                department?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                job?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                description?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                start_date?: string;
                                                end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            education_list?: Array<{
                                                school: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                level_of_education?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                start_date?: string;
                                                end_date?: string;
                                                field_of_study?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                degree?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                school_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                field_of_study_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                country_region_id?: string;
                                                expected_end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            bank_account_list?: Array<{
                                                bank_name?: string;
                                                bank_account_number: string;
                                                account_holder: string;
                                                bank?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                bank_identification_code?: string;
                                                branch_name?: string;
                                                bank_id?: string;
                                                branch_id?: string;
                                                bank_id_v2?: string;
                                                branch_id_v2?: string;
                                                country_region_id?: string;
                                                bank_account_usage?: Array<{
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                }>;
                                                bank_account_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                payment_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                payment_rate?: string;
                                                payment_amount?: string;
                                                priority?: number;
                                                currency_id?: string;
                                                IBAN?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            national_id_list?: Array<{
                                                national_id_type_id: string;
                                                national_id_number: string;
                                                issue_date?: string;
                                                expiration_date?: string;
                                                country_region_id: string;
                                                issued_by?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            dependent_list?: Array<{
                                                id?: string;
                                                name?: {
                                                    local_primary?: string;
                                                    local_first_name?: string;
                                                    country_region_id: string;
                                                    name_type: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    local_first_name_2?: string;
                                                    local_primary_2?: string;
                                                    additional_name?: string;
                                                    additional_name_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    first_name?: string;
                                                    full_name?: string;
                                                    hereditary?: string;
                                                    custom_name?: string;
                                                    custom_local_name?: string;
                                                    middle_name?: string;
                                                    name_primary?: string;
                                                    secondary?: string;
                                                    tertiary?: string;
                                                    social?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    title?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    local_middle_name?: string;
                                                    local_secondary?: string;
                                                    display_name_local_and_western_script?: string;
                                                    display_name_local_script?: string;
                                                    display_name_western_script?: string;
                                                };
                                                relationship: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                gender?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                date_of_birth?: string;
                                                nationality_id?: string;
                                                nationality_id_v2?: string;
                                                national_id_list?: Array<{
                                                    national_id_type_id: string;
                                                    national_id_number: string;
                                                    issue_date?: string;
                                                    expiration_date?: string;
                                                    country_region_id: string;
                                                    issued_by?: string;
                                                    custom_fields?: Array<{
                                                        custom_api_name: string;
                                                        name?: {
                                                            zh_cn?: string;
                                                            en_us?: string;
                                                        };
                                                        type?: number;
                                                        value: string;
                                                    }>;
                                                }>;
                                                spouses_working_status?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                is_this_person_covered_by_health_insurance?: boolean;
                                                is_this_person_allowed_for_tax_deduction?: boolean;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                                dependent_name?: string;
                                                employer?: string;
                                                job?: string;
                                                phone?: {
                                                    international_area_code?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_number: string;
                                                    formatted_phone_number?: string;
                                                    device_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_usage?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    is_primary?: boolean;
                                                    is_public?: boolean;
                                                };
                                                address?: {
                                                    full_address_local_script?: string;
                                                    full_address_western_script?: string;
                                                    address_id?: string;
                                                    country_region_id: string;
                                                    region_id?: string;
                                                    city_id?: string;
                                                    distinct_id?: string;
                                                    city_id_v2?: string;
                                                    district_id_v2?: string;
                                                    address_line1?: string;
                                                    address_line2?: string;
                                                    address_line3?: string;
                                                    address_line4?: string;
                                                    address_line5?: string;
                                                    address_line6?: string;
                                                    address_line7?: string;
                                                    address_line8?: string;
                                                    address_line9?: string;
                                                    local_address_line1?: string;
                                                    local_address_line2?: string;
                                                    local_address_line3?: string;
                                                    local_address_line4?: string;
                                                    local_address_line5?: string;
                                                    local_address_line6?: string;
                                                    local_address_line7?: string;
                                                    local_address_line8?: string;
                                                    local_address_line9?: string;
                                                    postal_code?: string;
                                                    address_type_list: Array<{
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    }>;
                                                    is_primary: boolean;
                                                    is_public: boolean;
                                                    custom_fields?: Array<{
                                                        custom_api_name: string;
                                                        name?: {
                                                            zh_cn?: string;
                                                            en_us?: string;
                                                        };
                                                        type?: number;
                                                        value: string;
                                                    }>;
                                                };
                                                birth_certificate_of_child?: Array<{
                                                    id?: string;
                                                    name?: string;
                                                }>;
                                            }>;
                                            emergency_contact_list?: Array<{
                                                id?: string;
                                                name?: {
                                                    local_primary?: string;
                                                    local_first_name?: string;
                                                    country_region_id: string;
                                                    name_type: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    local_first_name_2?: string;
                                                    local_primary_2?: string;
                                                    additional_name?: string;
                                                    additional_name_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    first_name?: string;
                                                    full_name?: string;
                                                    hereditary?: string;
                                                    custom_name?: string;
                                                    custom_local_name?: string;
                                                    middle_name?: string;
                                                    name_primary?: string;
                                                    secondary?: string;
                                                    tertiary?: string;
                                                    social?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    title?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    local_middle_name?: string;
                                                    local_secondary?: string;
                                                    display_name_local_and_western_script?: string;
                                                    display_name_local_script?: string;
                                                    display_name_western_script?: string;
                                                };
                                                relationship?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_ist?: Array<{
                                                    international_area_code?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_number: string;
                                                    formatted_phone_number?: string;
                                                    device_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_usage?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    is_primary?: boolean;
                                                    is_public?: boolean;
                                                }>;
                                                phone_list?: Array<{
                                                    international_area_code?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_number: string;
                                                    formatted_phone_number?: string;
                                                    device_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_usage?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    is_primary?: boolean;
                                                    is_public?: boolean;
                                                }>;
                                                legal_name?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                                address?: {
                                                    full_address_local_script?: string;
                                                    full_address_western_script?: string;
                                                    address_id?: string;
                                                    country_region_id: string;
                                                    region_id?: string;
                                                    city_id?: string;
                                                    distinct_id?: string;
                                                    city_id_v2?: string;
                                                    district_id_v2?: string;
                                                    address_line1?: string;
                                                    address_line2?: string;
                                                    address_line3?: string;
                                                    address_line4?: string;
                                                    address_line5?: string;
                                                    address_line6?: string;
                                                    address_line7?: string;
                                                    address_line8?: string;
                                                    address_line9?: string;
                                                    local_address_line1?: string;
                                                    local_address_line2?: string;
                                                    local_address_line3?: string;
                                                    local_address_line4?: string;
                                                    local_address_line5?: string;
                                                    local_address_line6?: string;
                                                    local_address_line7?: string;
                                                    local_address_line8?: string;
                                                    local_address_line9?: string;
                                                    postal_code?: string;
                                                    address_type_list: Array<{
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    }>;
                                                    is_primary: boolean;
                                                    is_public: boolean;
                                                    custom_fields?: Array<{
                                                        custom_api_name: string;
                                                        name?: {
                                                            zh_cn?: string;
                                                            en_us?: string;
                                                        };
                                                        type?: number;
                                                        value: string;
                                                    }>;
                                                };
                                            }>;
                                            date_entered_workforce?: string;
                                            working_years?: number;
                                            profile_image_id?: string;
                                            email_address?: string;
                                            age?: number;
                                            highest_level_of_education?: {
                                                school: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                level_of_education?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                start_date?: string;
                                                end_date?: string;
                                                field_of_study?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                degree?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                school_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                field_of_study_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                country_region_id?: string;
                                                expected_end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            };
                                            highest_degree_of_education?: {
                                                school: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                level_of_education?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                start_date?: string;
                                                end_date?: string;
                                                field_of_study?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                degree?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                school_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                field_of_study_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                country_region_id?: string;
                                                expected_end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            };
                                            personal_profile?: Array<{
                                                personal_profile_id?: string;
                                                personal_profile_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                files?: Array<{
                                                    id?: string;
                                                    name?: string;
                                                }>;
                                            }>;
                                            native_region?: string;
                                            hukou_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            hukou_location?: string;
                                            political_affiliations?: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            talent_id?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                            national_id_number?: string;
                                            family_address?: string;
                                            born_country_region?: string;
                                            is_disabled?: boolean;
                                            disable_card_number?: string;
                                            is_martyr_family?: boolean;
                                            martyr_card_number?: string;
                                            is_old_alone?: boolean;
                                            resident_taxes?: Array<{
                                                year_resident_tax: string;
                                                resident_status?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                tax_country_region_id?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            first_entry_time?: string;
                                            leave_time?: string;
                                            religion?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            working_years_v2?: number;
                                        };
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                        noncompete_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        past_offboarding?: boolean;
                                        regular_employee_start_date?: string;
                                        external_id?: string;
                                        times_employed?: number;
                                        recruitment_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        avatar_url?: string;
                                        primary_contract_id?: string;
                                        contract_start_date?: string;
                                        contract_end_date?: string;
                                        contract_expected_end_date?: string;
                                        pay_group_id?: string;
                                        assignment_pay_group_id?: string;
                                        international_assignment?: boolean;
                                        work_calendar_id?: string;
                                        department?: {
                                            id?: string;
                                            id_v2?: string;
                                            department_name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        direct_manager?: {
                                            employment_id?: string;
                                            employment_id_v2?: string;
                                            employee_number?: string;
                                            email_address?: string;
                                            person_info?: {
                                                person_id?: string;
                                                preferred_name?: string;
                                                preferred_local_full_name?: string;
                                                preferred_english_full_name?: string;
                                            };
                                        };
                                        dotted_line_manager?: {
                                            employment_id?: string;
                                            employment_id_v2?: string;
                                            employee_number?: string;
                                            email_address?: string;
                                            person_info?: {
                                                person_id?: string;
                                                preferred_name?: string;
                                                preferred_local_full_name?: string;
                                                preferred_english_full_name?: string;
                                            };
                                        };
                                        time_zone?: string;
                                        primary_international_assignment?: {
                                            id?: string;
                                            assignment_city_id?: string;
                                            assignment_company_id?: string;
                                            assignment_country_id?: string;
                                            assignment_reason?: {
                                                lang: string;
                                                value: string;
                                            };
                                            effective_time?: string;
                                            start_assignment_process_id?: string;
                                            end_assignment_process_id?: string;
                                            expiration_time?: string;
                                            international_assignment_status?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            international_assignment_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                        };
                                        service_company?: string;
                                        compensation_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        work_shift?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        talent_pool_id_list?: Array<string>;
                                        custom_org?: string;
                                        seniority_adjust_information_list?: Array<{
                                            seniority_adjustment_type: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            start_date?: string;
                                            end_date?: string;
                                            seniority_adjustment: number;
                                            reasons_for_seniority_adjustment?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        }>;
                                        employment_direct_bps?: {
                                            hrbp_ids?: Array<string>;
                                            location_bp_ids?: Array<string>;
                                        };
                                        employment_all_bps?: {
                                            hrbp_ids?: Array<string>;
                                            location_bp_ids?: Array<string>;
                                        };
                                        contract_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        archive_cpst_plan_id?: string;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/employees/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * employees.additional_job
             */
            employeesAdditionalJob: {
                batchWithIterator: async (
                    payload?: {
                        data?: {
                            employment_ids?: Array<string>;
                            additional_job_ids?: Array<string>;
                            start_date?: { start: string; end: string };
                            end_date?: { start: string; end: string };
                            data_date?: string;
                            is_effective?: boolean;
                        };
                        params?: {
                            page_size?: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/employees/additional_jobs/batch`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        id?: string;
                                                        employee_type_id: string;
                                                        working_hours_type_id?: string;
                                                        work_location_id?: string;
                                                        department_id: string;
                                                        job_id?: string;
                                                        job_level_id?: string;
                                                        job_family_id?: string;
                                                        employment_id: string;
                                                        start_date: string;
                                                        end_date?: string;
                                                        direct_manager_id?: string;
                                                        dotted_line_manager_id?: string;
                                                        work_shift?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        compensation_type?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        service_company?: string;
                                                        weekly_working_hours?: string;
                                                        work_calendar_id?: string;
                                                        position_id?: string;
                                                        employee_subtype_id?: string;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employees.additional_job&apiName=batch&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch&project=corehr&resource=employees.additional_job&version=v2 document }
                 *
                 * 批量查询兼职信息
                 */
                batch: async (
                    payload?: {
                        data?: {
                            employment_ids?: Array<string>;
                            additional_job_ids?: Array<string>;
                            start_date?: { start: string; end: string };
                            end_date?: { start: string; end: string };
                            data_date?: string;
                            is_effective?: boolean;
                        };
                        params?: {
                            page_size?: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        employee_type_id: string;
                                        working_hours_type_id?: string;
                                        work_location_id?: string;
                                        department_id: string;
                                        job_id?: string;
                                        job_level_id?: string;
                                        job_family_id?: string;
                                        employment_id: string;
                                        start_date: string;
                                        end_date?: string;
                                        direct_manager_id?: string;
                                        dotted_line_manager_id?: string;
                                        work_shift?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        compensation_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        service_company?: string;
                                        weekly_working_hours?: string;
                                        work_calendar_id?: string;
                                        position_id?: string;
                                        employee_subtype_id?: string;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/employees/additional_jobs/batch`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employees.additional_job&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=corehr&resource=employees.additional_job&version=v2 document }
                 *
                 * 创建兼职
                 */
                create: async (
                    payload?: {
                        data: {
                            employee_type_id: string;
                            working_hours_type_id?: string;
                            work_location_id?: string;
                            department_id: string;
                            job_id?: string;
                            job_level_id?: string;
                            job_family_id?: string;
                            employment_id: string;
                            start_date: string;
                            end_date?: string;
                            direct_manager_id?: string;
                            dotted_line_manager_id?: string;
                            work_shift?: { enum_name: string };
                            compensation_type?: { enum_name: string };
                            service_company?: string;
                            weekly_working_hours?: string;
                            work_calendar_id?: string;
                            position_id?: string;
                            employee_subtype_id?: string;
                        };
                        params?: {
                            client_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    additional_job?: {
                                        id?: string;
                                        employee_type_id: string;
                                        working_hours_type_id?: string;
                                        work_location_id?: string;
                                        department_id: string;
                                        job_id?: string;
                                        job_level_id?: string;
                                        job_family_id?: string;
                                        employment_id: string;
                                        start_date: string;
                                        end_date?: string;
                                        direct_manager_id?: string;
                                        dotted_line_manager_id?: string;
                                        work_shift?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        compensation_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        service_company?: string;
                                        weekly_working_hours?: string;
                                        work_calendar_id?: string;
                                        position_id?: string;
                                        employee_subtype_id?: string;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/employees/additional_jobs`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employees.additional_job&apiName=delete&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=delete&project=corehr&resource=employees.additional_job&version=v2 document }
                 *
                 * 删除兼职
                 */
                delete: async (
                    payload?: {
                        path: { additional_job_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/employees/additional_jobs/:additional_job_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employees.additional_job&apiName=patch&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=corehr&resource=employees.additional_job&version=v2 document }
                 *
                 * 更新兼职
                 */
                patch: async (
                    payload?: {
                        data?: {
                            employee_type_id?: string;
                            working_hours_type_id?: string;
                            work_location_id?: string;
                            department_id?: string;
                            job_id?: string;
                            job_level_id?: string;
                            job_family_id?: string;
                            start_date?: string;
                            end_date?: string;
                            direct_manager_id?: string;
                            dotted_line_manager_id?: string;
                            work_shift?: { enum_name: string };
                            compensation_type?: { enum_name: string };
                            service_company?: string;
                            weekly_working_hours?: string;
                            work_calendar_id?: string;
                            position_id?: string;
                            employee_subtype_id?: string;
                        };
                        params?: {
                            client_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                        path: { additional_job_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    additional_job?: {
                                        id?: string;
                                        employee_type_id: string;
                                        working_hours_type_id?: string;
                                        work_location_id?: string;
                                        department_id: string;
                                        job_id?: string;
                                        job_level_id?: string;
                                        job_family_id?: string;
                                        employment_id: string;
                                        start_date: string;
                                        end_date?: string;
                                        direct_manager_id?: string;
                                        dotted_line_manager_id?: string;
                                        work_shift?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        compensation_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        service_company?: string;
                                        weekly_working_hours?: string;
                                        work_calendar_id?: string;
                                        position_id?: string;
                                        employee_subtype_id?: string;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/employees/additional_jobs/:additional_job_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * employees.bp
             */
            employeesBp: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employees.bp&apiName=batch_get&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_get&project=corehr&resource=employees.bp&version=v2 document }
                 */
                batchGet: async (
                    payload?: {
                        data: {
                            employment_ids: Array<string>;
                            get_all?: boolean;
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    employment_direct_bps?: Array<{
                                        employment_id?: string;
                                        hrbp_ids?: Array<string>;
                                        location_bp_ids?: Array<string>;
                                    }>;
                                    employment_all_bps?: Array<{
                                        employment_id?: string;
                                        hrbp_ids?: Array<string>;
                                        location_bp_ids?: Array<string>;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/employees/bps/batch_get`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * employees.job_data
             */
            employeesJobData: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employees.job_data&apiName=batch_get&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_get&project=corehr&resource=employees.job_data&version=v2 document }
                 */
                batchGet: async (
                    payload?: {
                        data: {
                            employment_ids: Array<string>;
                            get_all_version?: boolean;
                            effective_date_start?: string;
                            effective_date_end?: string;
                            data_date?: string;
                            primary_job_data?: boolean;
                            assignment_start_reasons?: Array<string>;
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        employment_id: string;
                                        job_datas?: Array<{
                                            job_data_id?: string;
                                            version_id?: string;
                                            employee_type_id: string;
                                            working_hours_type_id?: string;
                                            work_location_id?: string;
                                            department_id?: string;
                                            position_id?: string;
                                            job_id?: string;
                                            job_level_id?: string;
                                            job_grade_id?: string;
                                            job_family_id?: string;
                                            probation_start_date?: string;
                                            probation_end_date?: string;
                                            primary_job_data: boolean;
                                            employment_id: string;
                                            effective_time: string;
                                            expiration_time?: string;
                                            assignment_start_reason?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            probation_expected_end_date?: string;
                                            probation_outcome?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            direct_manager?: {
                                                job_data_id?: string;
                                                employment_id?: string;
                                            };
                                            dotted_line_managers?: Array<{
                                                job_data_id?: string;
                                                employment_id?: string;
                                            }>;
                                            second_direct_manager?: {
                                                job_data_id?: string;
                                                employment_id?: string;
                                            };
                                            cost_center_rates?: Array<{
                                                cost_center_id?: string;
                                                rate?: number;
                                                new_rate?: number;
                                            }>;
                                            work_shift?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            compensation_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            service_company?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                            created_at?: string;
                                            weekly_working_hours_v2?: number;
                                            weekly_working_hours?: number;
                                            employee_subtype_id?: string;
                                            job_data_reason?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            pathway_id?: string;
                                        }>;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/employees/job_datas/batch_get`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employees.job_data&apiName=query&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query&project=corehr&resource=employees.job_data&version=v2 document }
                 */
                query: async (
                    payload?: {
                        data?: {
                            get_all_version?: boolean;
                            data_date?: string;
                            effective_date_start?: string;
                            effective_date_end?: string;
                            department_id?: string;
                            employment_ids?: Array<string>;
                            primary_job_data?: boolean;
                            assignment_start_reasons?: Array<string>;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        employment_id: string;
                                        job_datas?: Array<{
                                            job_data_id?: string;
                                            version_id?: string;
                                            employee_type_id: string;
                                            working_hours_type_id?: string;
                                            work_location_id?: string;
                                            department_id?: string;
                                            position_id?: string;
                                            job_id?: string;
                                            job_level_id?: string;
                                            job_grade_id?: string;
                                            job_family_id?: string;
                                            probation_start_date?: string;
                                            probation_end_date?: string;
                                            primary_job_data: boolean;
                                            employment_id: string;
                                            effective_time: string;
                                            expiration_time?: string;
                                            assignment_start_reason?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            probation_expected_end_date?: string;
                                            probation_outcome?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            direct_manager?: {
                                                job_data_id?: string;
                                                employment_id?: string;
                                            };
                                            dotted_line_managers?: Array<{
                                                job_data_id?: string;
                                                employment_id?: string;
                                            }>;
                                            second_direct_manager?: {
                                                job_data_id?: string;
                                                employment_id?: string;
                                            };
                                            cost_center_rates?: Array<{
                                                cost_center_id?: string;
                                                rate?: number;
                                                new_rate?: number;
                                            }>;
                                            work_shift?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            compensation_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            service_company?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                            weekly_working_hours_v2?: number;
                                            weekly_working_hours?: number;
                                            employee_subtype_id?: string;
                                            job_data_reason?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            pathway_id?: string;
                                        }>;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/employees/job_datas/query`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * enum
             */
            enum: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=enum&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=enum&version=v2 document }
                 *
                 * 通过apiname批量获取枚举信息
                 */
                search: async (
                    payload?: {
                        data?: { enum_apiname_lists?: Array<string> };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    enums?: Array<{
                                        enum_apiname?: string;
                                        enum_items?: Array<{
                                            api_name?: string;
                                            name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            enum_api_name?: string;
                                            order?: number;
                                            status?: number;
                                        }>;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/enums/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * job
             */
            job: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=get&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=corehr&resource=job&version=v2 document }
                 *
                 * 根据 ID 查询单个职务。
                 */
                get: async (
                    payload?: {
                        path: { job_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job?: {
                                        id?: string;
                                        code?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        job_title?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        pathway_id?: string;
                                        job_family_id_list?: Array<string>;
                                        job_level_id_list?: Array<string>;
                                        working_hours_type_id?: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/jobs/:job_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=list&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=corehr&resource=job&version=v2 document }
                 *
                 * 分页查询职务数据
                 */
                list: async (
                    payload?: {
                        params: {
                            page_token?: string;
                            page_size: string;
                            name?: string;
                            query_language?: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        id?: string;
                                        code?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        job_title?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        pathway_id?: string;
                                        job_family_id_list?: Array<string>;
                                        job_level_id_list?: Array<string>;
                                        working_hours_type_id?: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/jobs`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                queryRecentChangeWithIterator: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            start_date: string;
                            end_date: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/jobs/query_recent_change`,
                                    path
                                ),
                                method: "GET",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    job_ids?: Array<string>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                    deleted_job_ids?: Array<string>;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=query_recent_change&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query_recent_change&project=corehr&resource=job&version=v2 document }
                 */
                queryRecentChange: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            start_date: string;
                            end_date: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job_ids?: Array<string>;
                                    page_token?: string;
                                    has_more?: boolean;
                                    deleted_job_ids?: Array<string>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/jobs/query_recent_change`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * job_change
             */
            jobChange: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_change&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=corehr&resource=job_change&version=v2 document }
                 */
                create: async (
                    payload?: {
                        data: {
                            transfer_mode: number;
                            employment_id: string;
                            transfer_type_unique_identifier: string;
                            flow_id?: string;
                            effective_date: string;
                            transfer_info: {
                                remark?: string;
                                offer_info?: string;
                                target_dotted_manager_clean?: boolean;
                                probation_exist?: boolean;
                                target_department?: string;
                                target_work_location?: string;
                                target_direct_manager?: string;
                                target_dotted_manager?: string;
                                target_job?: string;
                                target_job_family?: string;
                                target_job_level?: string;
                                target_workforce_type?: string;
                                target_employee_subtype?: string;
                                target_company?: string;
                                target_contract_number?: string;
                                target_contract_type?: string;
                                target_duration_type?: string;
                                target_signing_type?: string;
                                target_contract_start_date?: string;
                                target_contract_end_date?: string;
                                target_working_hours_type?: string;
                                target_working_calendar?: string;
                                target_probation_end_date?: string;
                                target_weekly_working_hours?: string;
                                target_work_shift?: string;
                                target_cost_center_rates?: Array<{
                                    cost_center_id?: string;
                                    rate?: number;
                                    new_rate?: number;
                                }>;
                                target_employment_change?: {
                                    regular_employee_start_date?: string;
                                    seniority_date?: string;
                                    employee_number?: string;
                                    custom_fields?: Array<{
                                        custom_api_name: string;
                                        value: string;
                                    }>;
                                };
                                target_job_grade?: string;
                                target_compensation_type?: string;
                                target_service_company?: string;
                                target_position?: string;
                                target_social_security_city?: string;
                                is_transfer_with_workforce?: boolean;
                                target_pathway?: string;
                            };
                            transfer_key?: string;
                            initiator_id?: string;
                            transfer_reason_unique_identifier?: string;
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_admin_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job_change_id?: string;
                                    employment_id?: string;
                                    status?:
                                        | "Approving"
                                        | "Approved"
                                        | "Transformed"
                                        | "Rejected"
                                        | "Cancelled"
                                        | "NoNeedApproval";
                                    transfer_type_unique_identifier?: string;
                                    transfer_reason_unique_identifier?: string;
                                    process_id?: string;
                                    effective_date?: string;
                                    created_time?: string;
                                    transfer_info?: {
                                        remark?: string;
                                        offer_info?: string;
                                        target_dotted_manager_clean?: boolean;
                                        probation_exist?: boolean;
                                        original_department?: string;
                                        target_department?: string;
                                        target_draft_department?: string;
                                        original_department_id_path?: Array<{
                                            department_id?: string;
                                            draft_department_id?: string;
                                        }>;
                                        target_department_id_path?: Array<{
                                            department_id?: string;
                                            draft_department_id?: string;
                                        }>;
                                        original_work_location?: string;
                                        target_work_location?: string;
                                        original_direct_manager?: string;
                                        target_direct_manager?: string;
                                        original_dotted_manager?: string;
                                        target_dotted_manager?: string;
                                        original_job?: string;
                                        target_job?: string;
                                        original_job_family?: string;
                                        target_job_family?: string;
                                        original_job_level?: string;
                                        target_job_level?: string;
                                        original_workforce_type?: string;
                                        target_workforce_type?: string;
                                        original_employee_subtype?: string;
                                        target_employee_subtype?: string;
                                        original_company?: string;
                                        target_company?: string;
                                        original_contract_number?: string;
                                        target_contract_number?: string;
                                        original_contract_type?: string;
                                        target_contract_type?: string;
                                        original_duration_type?: string;
                                        target_duration_type?: string;
                                        original_signing_type?: string;
                                        target_signing_type?: string;
                                        original_contract_start_date?: string;
                                        target_contract_start_date?: string;
                                        original_contract_end_date?: string;
                                        target_contract_end_date?: string;
                                        original_working_hours_type?: string;
                                        target_working_hours_type?: string;
                                        original_working_calendar?: string;
                                        target_working_calendar?: string;
                                        original_probation_end_date?: string;
                                        target_probation_end_date?: string;
                                        original_weekly_working_hours?: string;
                                        target_weekly_working_hours?: string;
                                        original_work_shift?: string;
                                        target_work_shift?: string;
                                        original_cost_center_rate?: Array<{
                                            cost_center_id?: string;
                                            rate?: number;
                                            new_rate?: number;
                                        }>;
                                        target_cost_center_rate?: Array<{
                                            cost_center_id?: string;
                                            rate?: number;
                                            new_rate?: number;
                                        }>;
                                        target_allocation_expiration_time?: string;
                                        original_allocation_expiration_time?: string;
                                        target_allocation_effective_time?: string;
                                        original_allocation_effective_time?: string;
                                        original_default_cost_center?: string;
                                        target_default_cost_center?: string;
                                        original_is_default_cost_center_inherited?: boolean;
                                        target_is_default_cost_center_inherited?: boolean;
                                        original_employment_change?: {
                                            regular_employee_start_date?: string;
                                            seniority_date?: string;
                                            employee_number?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        };
                                        target_employment_change?: {
                                            regular_employee_start_date?: string;
                                            seniority_date?: string;
                                            employee_number?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        };
                                        original_job_grade?: string;
                                        target_job_grade?: string;
                                        original_compensation_type?: string;
                                        target_compensation_type?: string;
                                        original_service_company?: string;
                                        target_service_company?: string;
                                        original_position?: string;
                                        target_position?: string;
                                        target_draft_position?: string;
                                        original_social_security_city?: string;
                                        target_social_security_city?: string;
                                        original_pathway?: string;
                                        target_pathway?: string;
                                        is_transfer_with_workforce?: boolean;
                                    };
                                    is_adjust_salary?: boolean;
                                    custom_fields?: Array<{
                                        custom_api_name: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        type?: number;
                                        value: string;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/job_changes`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_change&apiName=revoke&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=revoke&project=corehr&resource=job_change&version=v2 document }
                 */
                revoke: async (
                    payload?: {
                        data: { operator_id: string };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_admin_id"
                                | "people_corehr_id";
                        };
                        path: { job_change_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { result?: boolean; message?: string };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/job_changes/:job_change_id/revoke`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                searchWithIterator: async (
                    payload?: {
                        data?: {
                            employment_ids?: Array<string>;
                            job_change_ids?: Array<string>;
                            statuses?: Array<
                                | "Approving"
                                | "Approved"
                                | "Transformed"
                                | "Rejected"
                                | "Cancelled"
                                | "NoNeedApproval"
                            >;
                            effective_date_start?: string;
                            effective_date_end?: string;
                            updated_time_start?: string;
                            updated_time_end?: string;
                            target_department_ids?: Array<string>;
                            transfer_type_unique_identifier?: Array<string>;
                            transfer_reason_unique_identifier?: Array<string>;
                            exception_statuses?: Array<"pending" | "processed">;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/job_changes/search`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        job_change_id?: string;
                                                        employment_id?: string;
                                                        status?:
                                                            | "Approving"
                                                            | "Approved"
                                                            | "Transformed"
                                                            | "Rejected"
                                                            | "Cancelled"
                                                            | "NoNeedApproval";
                                                        transfer_type_unique_identifier?: string;
                                                        transfer_reason_unique_identifier?: string;
                                                        process_id?: string;
                                                        effective_date?: string;
                                                        created_time?: string;
                                                        updated_time?: string;
                                                        transfer_info?: {
                                                            remark?: string;
                                                            offer_info?: string;
                                                            target_dotted_manager_clean?: boolean;
                                                            probation_exist?: boolean;
                                                            original_department?: string;
                                                            target_department?: string;
                                                            target_draft_department?: string;
                                                            original_department_id_path?: Array<{
                                                                department_id?: string;
                                                                draft_department_id?: string;
                                                            }>;
                                                            target_department_id_path?: Array<{
                                                                department_id?: string;
                                                                draft_department_id?: string;
                                                            }>;
                                                            original_work_location?: string;
                                                            target_work_location?: string;
                                                            original_direct_manager?: string;
                                                            target_direct_manager?: string;
                                                            original_dotted_manager?: string;
                                                            target_dotted_manager?: string;
                                                            original_job?: string;
                                                            target_job?: string;
                                                            original_job_family?: string;
                                                            target_job_family?: string;
                                                            original_job_level?: string;
                                                            target_job_level?: string;
                                                            original_workforce_type?: string;
                                                            target_workforce_type?: string;
                                                            original_employee_subtype?: string;
                                                            target_employee_subtype?: string;
                                                            original_company?: string;
                                                            target_company?: string;
                                                            original_contract_number?: string;
                                                            target_contract_number?: string;
                                                            original_contract_type?: string;
                                                            target_contract_type?: string;
                                                            original_duration_type?: string;
                                                            target_duration_type?: string;
                                                            original_signing_type?: string;
                                                            target_signing_type?: string;
                                                            original_contract_start_date?: string;
                                                            target_contract_start_date?: string;
                                                            original_contract_end_date?: string;
                                                            target_contract_end_date?: string;
                                                            original_working_hours_type?: string;
                                                            target_working_hours_type?: string;
                                                            original_working_calendar?: string;
                                                            target_working_calendar?: string;
                                                            original_probation_end_date?: string;
                                                            target_probation_end_date?: string;
                                                            original_weekly_working_hours?: string;
                                                            target_weekly_working_hours?: string;
                                                            original_work_shift?: string;
                                                            target_work_shift?: string;
                                                            original_cost_center_rate?: Array<{
                                                                cost_center_id?: string;
                                                                rate?: number;
                                                                new_rate?: number;
                                                            }>;
                                                            target_cost_center_rate?: Array<{
                                                                cost_center_id?: string;
                                                                rate?: number;
                                                                new_rate?: number;
                                                            }>;
                                                            target_allocation_expiration_time?: string;
                                                            original_allocation_expiration_time?: string;
                                                            target_allocation_effective_time?: string;
                                                            original_allocation_effective_time?: string;
                                                            original_default_cost_center?: string;
                                                            target_default_cost_center?: string;
                                                            original_is_default_cost_center_inherited?: boolean;
                                                            target_is_default_cost_center_inherited?: boolean;
                                                            original_employment_change?: {
                                                                regular_employee_start_date?: string;
                                                                seniority_date?: string;
                                                                employee_number?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            target_employment_change?: {
                                                                regular_employee_start_date?: string;
                                                                seniority_date?: string;
                                                                employee_number?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            original_job_grade?: string;
                                                            target_job_grade?: string;
                                                            original_compensation_type?: string;
                                                            target_compensation_type?: string;
                                                            original_service_company?: string;
                                                            target_service_company?: string;
                                                            original_position?: string;
                                                            target_position?: string;
                                                            target_draft_position?: string;
                                                            original_social_security_city?: string;
                                                            target_social_security_city?: string;
                                                            original_pathway?: string;
                                                            target_pathway?: string;
                                                            is_transfer_with_workforce?: boolean;
                                                        };
                                                        is_adjust_salary?: boolean;
                                                        custom_fields?: Array<{
                                                            custom_api_name: string;
                                                            name?: {
                                                                zh_cn?: string;
                                                                en_us?: string;
                                                            };
                                                            type?: number;
                                                            value: string;
                                                        }>;
                                                    }>;
                                                    has_more?: boolean;
                                                    page_token?: string;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_change&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=job_change&version=v2 document }
                 *
                 * 获取员工异动列表
                 */
                search: async (
                    payload?: {
                        data?: {
                            employment_ids?: Array<string>;
                            job_change_ids?: Array<string>;
                            statuses?: Array<
                                | "Approving"
                                | "Approved"
                                | "Transformed"
                                | "Rejected"
                                | "Cancelled"
                                | "NoNeedApproval"
                            >;
                            effective_date_start?: string;
                            effective_date_end?: string;
                            updated_time_start?: string;
                            updated_time_end?: string;
                            target_department_ids?: Array<string>;
                            transfer_type_unique_identifier?: Array<string>;
                            transfer_reason_unique_identifier?: Array<string>;
                            exception_statuses?: Array<"pending" | "processed">;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        job_change_id?: string;
                                        employment_id?: string;
                                        status?:
                                            | "Approving"
                                            | "Approved"
                                            | "Transformed"
                                            | "Rejected"
                                            | "Cancelled"
                                            | "NoNeedApproval";
                                        transfer_type_unique_identifier?: string;
                                        transfer_reason_unique_identifier?: string;
                                        process_id?: string;
                                        effective_date?: string;
                                        created_time?: string;
                                        updated_time?: string;
                                        transfer_info?: {
                                            remark?: string;
                                            offer_info?: string;
                                            target_dotted_manager_clean?: boolean;
                                            probation_exist?: boolean;
                                            original_department?: string;
                                            target_department?: string;
                                            target_draft_department?: string;
                                            original_department_id_path?: Array<{
                                                department_id?: string;
                                                draft_department_id?: string;
                                            }>;
                                            target_department_id_path?: Array<{
                                                department_id?: string;
                                                draft_department_id?: string;
                                            }>;
                                            original_work_location?: string;
                                            target_work_location?: string;
                                            original_direct_manager?: string;
                                            target_direct_manager?: string;
                                            original_dotted_manager?: string;
                                            target_dotted_manager?: string;
                                            original_job?: string;
                                            target_job?: string;
                                            original_job_family?: string;
                                            target_job_family?: string;
                                            original_job_level?: string;
                                            target_job_level?: string;
                                            original_workforce_type?: string;
                                            target_workforce_type?: string;
                                            original_employee_subtype?: string;
                                            target_employee_subtype?: string;
                                            original_company?: string;
                                            target_company?: string;
                                            original_contract_number?: string;
                                            target_contract_number?: string;
                                            original_contract_type?: string;
                                            target_contract_type?: string;
                                            original_duration_type?: string;
                                            target_duration_type?: string;
                                            original_signing_type?: string;
                                            target_signing_type?: string;
                                            original_contract_start_date?: string;
                                            target_contract_start_date?: string;
                                            original_contract_end_date?: string;
                                            target_contract_end_date?: string;
                                            original_working_hours_type?: string;
                                            target_working_hours_type?: string;
                                            original_working_calendar?: string;
                                            target_working_calendar?: string;
                                            original_probation_end_date?: string;
                                            target_probation_end_date?: string;
                                            original_weekly_working_hours?: string;
                                            target_weekly_working_hours?: string;
                                            original_work_shift?: string;
                                            target_work_shift?: string;
                                            original_cost_center_rate?: Array<{
                                                cost_center_id?: string;
                                                rate?: number;
                                                new_rate?: number;
                                            }>;
                                            target_cost_center_rate?: Array<{
                                                cost_center_id?: string;
                                                rate?: number;
                                                new_rate?: number;
                                            }>;
                                            target_allocation_expiration_time?: string;
                                            original_allocation_expiration_time?: string;
                                            target_allocation_effective_time?: string;
                                            original_allocation_effective_time?: string;
                                            original_default_cost_center?: string;
                                            target_default_cost_center?: string;
                                            original_is_default_cost_center_inherited?: boolean;
                                            target_is_default_cost_center_inherited?: boolean;
                                            original_employment_change?: {
                                                regular_employee_start_date?: string;
                                                seniority_date?: string;
                                                employee_number?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            };
                                            target_employment_change?: {
                                                regular_employee_start_date?: string;
                                                seniority_date?: string;
                                                employee_number?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            };
                                            original_job_grade?: string;
                                            target_job_grade?: string;
                                            original_compensation_type?: string;
                                            target_compensation_type?: string;
                                            original_service_company?: string;
                                            target_service_company?: string;
                                            original_position?: string;
                                            target_position?: string;
                                            target_draft_position?: string;
                                            original_social_security_city?: string;
                                            target_social_security_city?: string;
                                            original_pathway?: string;
                                            target_pathway?: string;
                                            is_transfer_with_workforce?: boolean;
                                        };
                                        is_adjust_salary?: boolean;
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                    }>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/job_changes/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * job_family
             */
            jobFamily: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_family&apiName=batch_get&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_get&project=corehr&resource=job_family&version=v2 document }
                 *
                 * 通过序列 ID 批量获取序列信息
                 */
                batchGet: async (
                    payload?: {
                        data: { job_family_ids: Array<string> };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        job_family_id?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        selectable?: boolean;
                                        parent_id?: string;
                                        pathway_ids?: Array<string>;
                                        effective_time: string;
                                        expiration_time?: string;
                                        code?: string;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/job_families/batch_get`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                queryRecentChangeWithIterator: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            start_date: string;
                            end_date: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/job_families/query_recent_change`,
                                    path
                                ),
                                method: "GET",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    job_family_ids?: Array<string>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                    deleted_job_family_ids?: Array<string>;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_family&apiName=query_recent_change&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query_recent_change&project=corehr&resource=job_family&version=v2 document }
                 */
                queryRecentChange: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            start_date: string;
                            end_date: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job_family_ids?: Array<string>;
                                    page_token?: string;
                                    has_more?: boolean;
                                    deleted_job_family_ids?: Array<string>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/job_families/query_recent_change`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * job_grade
             */
            jobGrade: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_grade&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=corehr&resource=job_grade&version=v2 document }
                 *
                 * 创建职等数据
                 */
                create: async (
                    payload?: {
                        data: {
                            grade_order: number;
                            code?: string;
                            names: Array<{ lang: string; value: string }>;
                            descriptions?: Array<{
                                lang: string;
                                value: string;
                            }>;
                        };
                        params?: { client_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { grade_id?: string };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/job_grades`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_grade&apiName=delete&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=delete&project=corehr&resource=job_grade&version=v2 document }
                 *
                 * 删除职等信息
                 */
                delete: async (
                    payload?: {
                        path: { job_grade_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/job_grades/:job_grade_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_grade&apiName=patch&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=corehr&resource=job_grade&version=v2 document }
                 *
                 * 更新职等信息
                 */
                patch: async (
                    payload?: {
                        data?: {
                            grade_order?: number;
                            code?: string;
                            names?: Array<{ lang: string; value: string }>;
                            descriptions?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            active?: boolean;
                        };
                        params?: { client_token?: string };
                        path: { job_grade_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/job_grades/:job_grade_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_grade&apiName=query&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query&project=corehr&resource=job_grade&version=v2 document }
                 *
                 * 查询职等信息
                 */
                query: async (
                    payload?: {
                        data?: {
                            ids?: Array<string>;
                            codes?: Array<string>;
                            active?: boolean;
                        };
                        params: { page_size: number; page_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        job_grade_id?: string;
                                        grade_order?: number;
                                        code?: string;
                                        names?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        descriptions?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active?: boolean;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/job_grades/query`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                queryRecentChangeWithIterator: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            start_date: string;
                            end_date: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/job_grades/query_recent_change`,
                                    path
                                ),
                                method: "GET",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    job_grade_ids?: Array<string>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                    deleted_job_grade_ids?: Array<string>;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_grade&apiName=query_recent_change&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query_recent_change&project=corehr&resource=job_grade&version=v2 document }
                 */
                queryRecentChange: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            start_date: string;
                            end_date: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job_grade_ids?: Array<string>;
                                    page_token?: string;
                                    has_more?: boolean;
                                    deleted_job_grade_ids?: Array<string>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/job_grades/query_recent_change`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * job_level
             */
            jobLevel: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_level&apiName=batch_get&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_get&project=corehr&resource=job_level&version=v2 document }
                 *
                 * 通过职级 ID 批量获取职级信息
                 */
                batchGet: async (
                    payload?: {
                        data: { job_level_ids: Array<string> };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        job_level_id?: string;
                                        level_order: number;
                                        code?: string;
                                        name: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        description?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        active: boolean;
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                        job_grade?: Array<string>;
                                        pathway_ids?: Array<string>;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/job_levels/batch_get`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                queryRecentChangeWithIterator: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            start_date: string;
                            end_date: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/job_levels/query_recent_change`,
                                    path
                                ),
                                method: "GET",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    job_level_ids?: Array<string>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                    deleted_job_level_ids?: Array<string>;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_level&apiName=query_recent_change&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query_recent_change&project=corehr&resource=job_level&version=v2 document }
                 */
                queryRecentChange: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            start_date: string;
                            end_date: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    job_level_ids?: Array<string>;
                                    page_token?: string;
                                    has_more?: boolean;
                                    deleted_job_level_ids?: Array<string>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/job_levels/query_recent_change`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * location
             */
            location: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location&apiName=active&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=active&project=corehr&resource=location&version=v2 document }
                 *
                 * 启停/停用地点
                 */
                active: async (
                    payload?: {
                        data: {
                            location_id: string;
                            effective_time: string;
                            active: boolean;
                            operation_reason: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/locations/active`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location&apiName=batch_get&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_get&project=corehr&resource=location&version=v2 document }
                 *
                 * 通过地点 ID 批量获取地点信息
                 */
                batchGet: async (
                    payload?: {
                        data: { location_ids: Array<string> };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        location_id?: string;
                                        hiberarchy_common: {
                                            parent_id?: string;
                                            name: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            type: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            active: boolean;
                                            effective_time?: string;
                                            expiration_time?: string;
                                            code?: string;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            tree_order?: string;
                                            list_order?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        };
                                        location_usage_list?: Array<{
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        }>;
                                        address?: Array<{
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            address_id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            address_type_list: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            is_primary: boolean;
                                            is_public: boolean;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        }>;
                                        working_hours_type_id?: string;
                                        effective_time: string;
                                        expiration_time?: string;
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                        locale?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        time_zone_id?: string;
                                        display_language_id?: string;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/locations/batch_get`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location&apiName=patch&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=corehr&resource=location&version=v2 document }
                 *
                 * 更新地点
                 */
                patch: async (
                    payload?: {
                        data: {
                            parent_id?: string;
                            names?: Array<{ lang: string; value: string }>;
                            active?: boolean;
                            effective_time: string;
                            code?: string;
                            descriptions?: Array<{
                                lang: string;
                                value: string;
                            }>;
                            location_usages?: Array<{ enum_name: string }>;
                            working_hours_type_id?: string;
                            locale?: { enum_name: string };
                            time_zone_id?: string;
                            display_language_id?: string;
                        };
                        params?: { client_token?: string };
                        path: { location_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/locations/:location_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                queryRecentChangeWithIterator: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            start_date: string;
                            end_date: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/locations/query_recent_change`,
                                    path
                                ),
                                method: "GET",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    location_ids?: Array<string>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                    deleted_location_ids?: Array<string>;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location&apiName=query_recent_change&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query_recent_change&project=corehr&resource=location&version=v2 document }
                 */
                queryRecentChange: async (
                    payload?: {
                        params: {
                            page_size: number;
                            page_token?: string;
                            start_date: string;
                            end_date: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    location_ids?: Array<string>;
                                    page_token?: string;
                                    has_more?: boolean;
                                    deleted_location_ids?: Array<string>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/locations/query_recent_change`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * location.address
             */
            locationAddress: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location.address&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=corehr&resource=location.address&version=v2 document }
                 *
                 * 添加地点地址
                 */
                create: async (
                    payload?: {
                        data: {
                            country_region_id: string;
                            region_id: string;
                            city_id: string;
                            distinct_id: string;
                            local_address_line1?: string;
                            local_address_line2?: string;
                            local_address_line3?: string;
                            local_address_line4?: string;
                            local_address_line5?: string;
                            local_address_line6?: string;
                            local_address_line7?: string;
                            local_address_line8?: string;
                            local_address_line9?: string;
                            postal_code?: string;
                            address_types?: Array<{ enum_name: string }>;
                            is_primary?: boolean;
                            is_public?: boolean;
                        };
                        params?: { client_token?: string };
                        path: { location_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { address_id?: string };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/locations/:location_id/addresses`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location.address&apiName=delete&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=delete&project=corehr&resource=location.address&version=v2 document }
                 *
                 * 删除地点地址
                 */
                delete: async (
                    payload?: {
                        path: { location_id: string; address_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/locations/:location_id/addresses/:address_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location.address&apiName=patch&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=corehr&resource=location.address&version=v2 document }
                 *
                 * 更新地点地址
                 */
                patch: async (
                    payload?: {
                        data?: {
                            country_region_id?: string;
                            region_id?: string;
                            city_id?: string;
                            distinct_id?: string;
                            local_address_line1?: string;
                            local_address_line2?: string;
                            local_address_line3?: string;
                            local_address_line4?: string;
                            local_address_line5?: string;
                            local_address_line6?: string;
                            local_address_line7?: string;
                            local_address_line8?: string;
                            local_address_line9?: string;
                            postal_code?: string;
                            address_types?: Array<{ enum_name: string }>;
                            is_primary?: boolean;
                            is_public?: boolean;
                        };
                        params?: { client_token?: string };
                        path: { location_id: string; address_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/locations/:location_id/addresses/:address_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * offboarding
             */
            offboarding: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=offboarding&apiName=edit&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=edit&project=corehr&resource=offboarding&version=v2 document }
                 *
                 * 编辑离职信息
                 */
                edit: async (
                    payload?: {
                        data: {
                            offboarding_id: string;
                            operator_id?: string;
                            update_data: Array<{
                                field_name: string;
                                value: string;
                            }>;
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    data: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/offboardings/edit`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=offboarding&apiName=revoke&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=revoke&project=corehr&resource=offboarding&version=v2 document }
                 *
                 * 撤销离职信息
                 */
                revoke: async (
                    payload?: {
                        data: { offboarding_id: string; operator_id?: string };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/offboardings/revoke`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=offboarding&apiName=submit_v2&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=submit_v2&project=corehr&resource=offboarding&version=v2 document }
                 */
                submitV2: async (
                    payload?: {
                        data: {
                            offboarding_mode: number;
                            employment_id: string;
                            offboarding_date: string;
                            offboarding_reason_unique_identifier: string;
                            offboarding_reason_explanation?: string;
                            initiator_id?: string;
                            add_block_list?: boolean;
                            block_reason?: string;
                            block_reason_explanation?: string;
                            custom_fields?: Array<{
                                field_name: string;
                                value: string;
                            }>;
                            retain_account?: boolean;
                            is_transfer_with_workforce?: boolean;
                        };
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    offboarding_id?: string;
                                    employment_id?: string;
                                    offboarding_reason_unique_identifier?: string;
                                    offboarding_date?: string;
                                    offboarding_reason_explanation?: string;
                                    add_block_list?: boolean;
                                    block_reason?: string;
                                    block_reason_explanation?: string;
                                    created_time?: string;
                                    retain_account?: boolean;
                                    is_transfer_with_workforce?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/offboardings/submit_v2`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * person
             */
            person: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=person&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=corehr&resource=person&version=v2 document }
                 *
                 * 创建个人信息数据
                 */
                create: async (
                    payload?: {
                        data: {
                            name_list: Array<{
                                local_primary?: string;
                                local_first_name?: string;
                                country_region_id: string;
                                name_type: { enum_name: string };
                                local_first_name_2?: string;
                                local_primary_2?: string;
                                additional_name?: string;
                                additional_name_type?: { enum_name: string };
                                first_name?: string;
                                full_name?: string;
                                hereditary?: string;
                                custom_name?: string;
                                custom_local_name?: string;
                                middle_name?: string;
                                name_primary?: string;
                                secondary?: string;
                                tertiary?: string;
                                social?: { enum_name: string };
                                title?: { enum_name: string };
                                local_middle_name?: string;
                                local_secondary?: string;
                            }>;
                            gender?: { enum_name: string };
                            date_of_birth?: string;
                            nationality_id?: string;
                            nationality_id_v2?: string;
                            race?: { enum_name: string };
                            marital_status?: { enum_name: string };
                            phone_list?: Array<{
                                international_area_code?: { enum_name: string };
                                phone_number: string;
                            }>;
                            address_list?: Array<{
                                address_id?: string;
                                country_region_id: string;
                                region_id?: string;
                                city_id?: string;
                                distinct_id?: string;
                                city_id_v2?: string;
                                district_id_v2?: string;
                                address_line1?: string;
                                address_line2?: string;
                                address_line3?: string;
                                address_line4?: string;
                                address_line5?: string;
                                address_line6?: string;
                                address_line7?: string;
                                address_line8?: string;
                                address_line9?: string;
                                local_address_line1?: string;
                                local_address_line2?: string;
                                local_address_line3?: string;
                                local_address_line4?: string;
                                local_address_line5?: string;
                                local_address_line6?: string;
                                local_address_line7?: string;
                                local_address_line8?: string;
                                local_address_line9?: string;
                                postal_code?: string;
                                address_type_list: Array<{ enum_name: string }>;
                                is_primary: boolean;
                                is_public: boolean;
                                custom_fields?: Array<{
                                    custom_api_name: string;
                                    value: string;
                                }>;
                            }>;
                            email_list?: Array<{
                                email: string;
                                is_primary?: boolean;
                                is_public?: boolean;
                                email_usage?: { enum_name: string };
                            }>;
                            work_experience_list?: Array<{
                                company_organization?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                department?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                job?: Array<{ lang: string; value: string }>;
                                description?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                start_date?: string;
                                end_date?: string;
                                custom_fields?: Array<{
                                    custom_api_name: string;
                                    value: string;
                                }>;
                            }>;
                            education_list?: Array<{
                                school: Array<{ lang: string; value: string }>;
                                level_of_education?: { enum_name: string };
                                start_date?: string;
                                end_date?: string;
                                field_of_study?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                degree?: { enum_name: string };
                                school_name?: { enum_name: string };
                                field_of_study_name?: { enum_name: string };
                                country_region_id?: string;
                                expected_end_date?: string;
                                custom_fields?: Array<{
                                    custom_api_name: string;
                                    value: string;
                                }>;
                            }>;
                            bank_account_list?: Array<{
                                bank_name?: string;
                                bank_account_number: string;
                                account_holder: string;
                                bank?: { enum_name: string };
                                bank_identification_code?: string;
                                branch_name?: string;
                                bank_id?: string;
                                branch_id?: string;
                                bank_id_v2?: string;
                                branch_id_v2?: string;
                                country_region_id?: string;
                                bank_account_usage?: Array<{
                                    enum_name: string;
                                }>;
                                bank_account_type?: { enum_name: string };
                                payment_type?: { enum_name: string };
                                payment_rate?: string;
                                payment_amount?: string;
                                priority?: number;
                                currency_id?: string;
                                custom_fields?: Array<{
                                    custom_api_name: string;
                                    value: string;
                                }>;
                            }>;
                            national_id_list?: Array<{
                                national_id_type_id: string;
                                national_id_number: string;
                                issue_date?: string;
                                expiration_date?: string;
                                country_region_id: string;
                                issued_by?: string;
                                custom_fields?: Array<{
                                    custom_api_name: string;
                                    value: string;
                                }>;
                            }>;
                            dependent_list?: Array<{
                                relationship: { enum_name: string };
                                gender?: { enum_name: string };
                                date_of_birth?: string;
                                nationality_id?: string;
                                nationality_id_v2?: string;
                                national_id_list?: Array<{
                                    national_id_type_id: string;
                                    national_id_number: string;
                                    issue_date?: string;
                                    expiration_date?: string;
                                    country_region_id: string;
                                    issued_by?: string;
                                    custom_fields?: Array<{
                                        custom_api_name: string;
                                        value: string;
                                    }>;
                                }>;
                                spouses_working_status?: { enum_name: string };
                                is_this_person_covered_by_health_insurance?: boolean;
                                is_this_person_allowed_for_tax_deduction?: boolean;
                                custom_fields?: Array<{
                                    custom_api_name: string;
                                    value: string;
                                }>;
                                dependent_name?: string;
                                employer?: string;
                                job?: string;
                                phone?: {
                                    international_area_code?: {
                                        enum_name: string;
                                    };
                                    phone_number: string;
                                };
                                address?: {
                                    address_id?: string;
                                    country_region_id: string;
                                    region_id?: string;
                                    city_id?: string;
                                    distinct_id?: string;
                                    city_id_v2?: string;
                                    district_id_v2?: string;
                                    address_line1?: string;
                                    address_line2?: string;
                                    address_line3?: string;
                                    address_line4?: string;
                                    address_line5?: string;
                                    address_line6?: string;
                                    address_line7?: string;
                                    address_line8?: string;
                                    address_line9?: string;
                                    local_address_line1?: string;
                                    local_address_line2?: string;
                                    local_address_line3?: string;
                                    local_address_line4?: string;
                                    local_address_line5?: string;
                                    local_address_line6?: string;
                                    local_address_line7?: string;
                                    local_address_line8?: string;
                                    local_address_line9?: string;
                                    postal_code?: string;
                                    custom_fields?: Array<{
                                        custom_api_name: string;
                                        value: string;
                                    }>;
                                };
                                birth_certificate_of_child?: Array<{
                                    id?: string;
                                }>;
                            }>;
                            emergency_contact_list?: Array<{
                                name?: {
                                    local_primary?: string;
                                    local_first_name?: string;
                                    country_region_id: string;
                                    name_type: { enum_name: string };
                                    local_first_name_2?: string;
                                    local_primary_2?: string;
                                    additional_name?: string;
                                    additional_name_type?: {
                                        enum_name: string;
                                    };
                                    first_name?: string;
                                    full_name?: string;
                                    hereditary?: string;
                                    custom_name?: string;
                                    custom_local_name?: string;
                                    middle_name?: string;
                                    name_primary?: string;
                                    secondary?: string;
                                    tertiary?: string;
                                    social?: { enum_name: string };
                                    title?: { enum_name: string };
                                    local_middle_name?: string;
                                    local_secondary?: string;
                                };
                                relationship?: { enum_name: string };
                                phone_ist?: Array<{
                                    international_area_code?: {
                                        enum_name: string;
                                    };
                                    phone_number: string;
                                }>;
                                legal_name?: string;
                                custom_fields?: Array<{
                                    custom_api_name: string;
                                    value: string;
                                }>;
                            }>;
                            date_entered_workforce?: string;
                            profile_image_id?: string;
                            personal_profile?: Array<{
                                personal_profile_id?: string;
                                personal_profile_type?: { enum_name: string };
                                files?: Array<{ id?: string }>;
                            }>;
                            native_region?: string;
                            hukou_type?: { enum_name: string };
                            hukou_location?: string;
                            political_affiliations?: Array<{
                                enum_name: string;
                            }>;
                            talent_id?: string;
                            custom_fields?: Array<{
                                custom_api_name: string;
                                value: string;
                            }>;
                            born_country_region?: string;
                            is_disabled?: boolean;
                            disable_card_number?: string;
                            is_martyr_family?: boolean;
                            martyr_card_number?: string;
                            is_old_alone?: boolean;
                            resident_taxes?: Array<{
                                year_resident_tax: string;
                                resident_status?: { enum_name: string };
                                tax_country_region_id?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            first_entry_time?: string;
                            leave_time?: string;
                        };
                        params?: { client_token?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    person?: {
                                        person_id?: string;
                                        phone_number?: string;
                                        legal_name?: string;
                                        preferred_name?: string;
                                        preferred_local_full_name?: string;
                                        preferred_english_full_name?: string;
                                        name_list?: Array<{
                                            local_primary?: string;
                                            local_first_name?: string;
                                            country_region_id: string;
                                            name_type: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_first_name_2?: string;
                                            local_primary_2?: string;
                                            additional_name?: string;
                                            additional_name_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            first_name?: string;
                                            full_name?: string;
                                            hereditary?: string;
                                            custom_name?: string;
                                            custom_local_name?: string;
                                            middle_name?: string;
                                            name_primary?: string;
                                            secondary?: string;
                                            tertiary?: string;
                                            social?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            title?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_middle_name?: string;
                                            local_secondary?: string;
                                            display_name_local_and_western_script?: string;
                                            display_name_local_script?: string;
                                            display_name_western_script?: string;
                                        }>;
                                        gender?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        date_of_birth?: string;
                                        nationality_id?: string;
                                        nationality_id_v2?: string;
                                        race?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        marital_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_list?: Array<{
                                            international_area_code?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                            formatted_phone_number?: string;
                                            device_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_usage?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                        }>;
                                        address_list?: Array<{
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            address_id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            city_id_v2?: string;
                                            district_id_v2?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            address_type_list: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            is_primary: boolean;
                                            is_public: boolean;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        }>;
                                        email_list?: Array<{
                                            email: string;
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                            email_usage?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                        }>;
                                        work_experience_list?: Array<{
                                            company_organization?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            department?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            job?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            start_date?: string;
                                            end_date?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        }>;
                                        education_list?: Array<{
                                            school: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            level_of_education?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            start_date?: string;
                                            end_date?: string;
                                            field_of_study?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            degree?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            school_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            field_of_study_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            country_region_id?: string;
                                            expected_end_date?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        }>;
                                        bank_account_list?: Array<{
                                            bank_name?: string;
                                            bank_account_number: string;
                                            account_holder: string;
                                            bank?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            bank_identification_code?: string;
                                            branch_name?: string;
                                            bank_id?: string;
                                            branch_id?: string;
                                            bank_id_v2?: string;
                                            branch_id_v2?: string;
                                            country_region_id?: string;
                                            bank_account_usage?: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            bank_account_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            payment_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            payment_rate?: string;
                                            payment_amount?: string;
                                            priority?: number;
                                            currency_id?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        }>;
                                        national_id_list?: Array<{
                                            national_id_type_id: string;
                                            national_id_number: string;
                                            issue_date?: string;
                                            expiration_date?: string;
                                            country_region_id: string;
                                            issued_by?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        }>;
                                        dependent_list?: Array<{
                                            name?: {
                                                local_primary?: string;
                                                local_first_name?: string;
                                                country_region_id: string;
                                                name_type: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_first_name_2?: string;
                                                local_primary_2?: string;
                                                additional_name?: string;
                                                additional_name_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                first_name?: string;
                                                full_name?: string;
                                                hereditary?: string;
                                                custom_name?: string;
                                                custom_local_name?: string;
                                                middle_name?: string;
                                                name_primary?: string;
                                                secondary?: string;
                                                tertiary?: string;
                                                social?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                title?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_middle_name?: string;
                                                local_secondary?: string;
                                                display_name_local_and_western_script?: string;
                                                display_name_local_script?: string;
                                                display_name_western_script?: string;
                                            };
                                            relationship: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            gender?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            date_of_birth?: string;
                                            nationality_id?: string;
                                            nationality_id_v2?: string;
                                            national_id_list?: Array<{
                                                national_id_type_id: string;
                                                national_id_number: string;
                                                issue_date?: string;
                                                expiration_date?: string;
                                                country_region_id: string;
                                                issued_by?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            spouses_working_status?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            is_this_person_covered_by_health_insurance?: boolean;
                                            is_this_person_allowed_for_tax_deduction?: boolean;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                            dependent_name?: string;
                                            employer?: string;
                                            job?: string;
                                            phone?: {
                                                international_area_code?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_number: string;
                                                formatted_phone_number?: string;
                                                device_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_usage?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                is_primary?: boolean;
                                                is_public?: boolean;
                                            };
                                            address?: {
                                                full_address_local_script?: string;
                                                full_address_western_script?: string;
                                                address_id?: string;
                                                country_region_id: string;
                                                region_id?: string;
                                                city_id?: string;
                                                distinct_id?: string;
                                                city_id_v2?: string;
                                                district_id_v2?: string;
                                                address_line1?: string;
                                                address_line2?: string;
                                                address_line3?: string;
                                                address_line4?: string;
                                                address_line5?: string;
                                                address_line6?: string;
                                                address_line7?: string;
                                                address_line8?: string;
                                                address_line9?: string;
                                                local_address_line1?: string;
                                                local_address_line2?: string;
                                                local_address_line3?: string;
                                                local_address_line4?: string;
                                                local_address_line5?: string;
                                                local_address_line6?: string;
                                                local_address_line7?: string;
                                                local_address_line8?: string;
                                                local_address_line9?: string;
                                                postal_code?: string;
                                                address_type_list: Array<{
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                }>;
                                                is_primary: boolean;
                                                is_public: boolean;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            };
                                            birth_certificate_of_child?: Array<{
                                                id?: string;
                                                name?: string;
                                            }>;
                                        }>;
                                        emergency_contact_list?: Array<{
                                            name?: {
                                                local_primary?: string;
                                                local_first_name?: string;
                                                country_region_id: string;
                                                name_type: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_first_name_2?: string;
                                                local_primary_2?: string;
                                                additional_name?: string;
                                                additional_name_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                first_name?: string;
                                                full_name?: string;
                                                hereditary?: string;
                                                custom_name?: string;
                                                custom_local_name?: string;
                                                middle_name?: string;
                                                name_primary?: string;
                                                secondary?: string;
                                                tertiary?: string;
                                                social?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                title?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_middle_name?: string;
                                                local_secondary?: string;
                                                display_name_local_and_western_script?: string;
                                                display_name_local_script?: string;
                                                display_name_western_script?: string;
                                            };
                                            relationship?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_ist?: Array<{
                                                international_area_code?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_number: string;
                                                formatted_phone_number?: string;
                                                device_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_usage?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                is_primary?: boolean;
                                                is_public?: boolean;
                                            }>;
                                            phone_list?: Array<{
                                                international_area_code?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_number: string;
                                                formatted_phone_number?: string;
                                                device_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_usage?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                is_primary?: boolean;
                                                is_public?: boolean;
                                            }>;
                                            legal_name?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        }>;
                                        date_entered_workforce?: string;
                                        working_years?: number;
                                        profile_image_id?: string;
                                        email_address?: string;
                                        age?: number;
                                        highest_level_of_education?: {
                                            school: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            level_of_education?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            start_date?: string;
                                            end_date?: string;
                                            field_of_study?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            degree?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            school_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            field_of_study_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            country_region_id?: string;
                                            expected_end_date?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        };
                                        highest_degree_of_education?: {
                                            school: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            level_of_education?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            start_date?: string;
                                            end_date?: string;
                                            field_of_study?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            degree?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            school_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            field_of_study_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            country_region_id?: string;
                                            expected_end_date?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        };
                                        personal_profile?: Array<{
                                            personal_profile_id?: string;
                                            personal_profile_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            files?: Array<{
                                                id?: string;
                                                name?: string;
                                            }>;
                                        }>;
                                        native_region?: string;
                                        hukou_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        hukou_location?: string;
                                        talent_id?: string;
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                        national_id_number?: string;
                                        family_address?: string;
                                        born_country_region?: string;
                                        is_disabled?: boolean;
                                        disable_card_number?: string;
                                        is_martyr_family?: boolean;
                                        martyr_card_number?: string;
                                        is_old_alone?: boolean;
                                        resident_taxes?: Array<{
                                            year_resident_tax: string;
                                            resident_status?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            tax_country_region_id?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        first_entry_time?: string;
                                        leave_time?: string;
                                        passport_number?: string;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/persons`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=person&apiName=patch&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=corehr&resource=person&version=v2 document }
                 */
                patch: async (
                    payload?: {
                        data?: {
                            name_list?: Array<{
                                local_primary?: string;
                                local_first_name?: string;
                                country_region_id: string;
                                name_type: { enum_name: string };
                                local_first_name_2?: string;
                                local_primary_2?: string;
                                additional_name?: string;
                                additional_name_type?: { enum_name: string };
                                first_name?: string;
                                full_name?: string;
                                hereditary?: string;
                                custom_name?: string;
                                custom_local_name?: string;
                                middle_name?: string;
                                name_primary?: string;
                                secondary?: string;
                                tertiary?: string;
                                social?: { enum_name: string };
                                title?: { enum_name: string };
                                local_middle_name?: string;
                                local_secondary?: string;
                            }>;
                            gender?: { enum_name: string };
                            date_of_birth?: string;
                            nationality_id?: string;
                            nationality_id_v2?: string;
                            race?: { enum_name: string };
                            marital_status?: { enum_name: string };
                            phone_list?: Array<{
                                international_area_code?: { enum_name: string };
                                phone_number: string;
                            }>;
                            address_list?: Array<{
                                address_id?: string;
                                country_region_id: string;
                                region_id?: string;
                                city_id?: string;
                                distinct_id?: string;
                                city_id_v2?: string;
                                district_id_v2?: string;
                                address_line1?: string;
                                address_line2?: string;
                                address_line3?: string;
                                address_line4?: string;
                                address_line5?: string;
                                address_line6?: string;
                                address_line7?: string;
                                address_line8?: string;
                                address_line9?: string;
                                local_address_line1?: string;
                                local_address_line2?: string;
                                local_address_line3?: string;
                                local_address_line4?: string;
                                local_address_line5?: string;
                                local_address_line6?: string;
                                local_address_line7?: string;
                                local_address_line8?: string;
                                local_address_line9?: string;
                                postal_code?: string;
                                address_type_list: Array<{ enum_name: string }>;
                                is_primary: boolean;
                                is_public: boolean;
                                custom_fields?: Array<{
                                    custom_api_name: string;
                                    value: string;
                                }>;
                            }>;
                            email_list?: Array<{
                                email: string;
                                is_primary?: boolean;
                                is_public?: boolean;
                                email_usage?: { enum_name: string };
                            }>;
                            work_experience_list?: Array<{
                                company_organization?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                department?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                job?: Array<{ lang: string; value: string }>;
                                description?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                start_date?: string;
                                end_date?: string;
                                custom_fields?: Array<{
                                    custom_api_name: string;
                                    value: string;
                                }>;
                            }>;
                            education_list?: Array<{
                                school: Array<{ lang: string; value: string }>;
                                level_of_education?: { enum_name: string };
                                start_date?: string;
                                end_date?: string;
                                field_of_study?: Array<{
                                    lang: string;
                                    value: string;
                                }>;
                                degree?: { enum_name: string };
                                school_name?: { enum_name: string };
                                field_of_study_name?: { enum_name: string };
                                country_region_id?: string;
                                expected_end_date?: string;
                                custom_fields?: Array<{
                                    custom_api_name: string;
                                    value: string;
                                }>;
                            }>;
                            bank_account_list?: Array<{
                                bank_name?: string;
                                bank_account_number: string;
                                account_holder: string;
                                bank?: { enum_name: string };
                                bank_identification_code?: string;
                                branch_name?: string;
                                bank_id?: string;
                                branch_id?: string;
                                bank_id_v2?: string;
                                branch_id_v2?: string;
                                country_region_id?: string;
                                bank_account_usage?: Array<{
                                    enum_name: string;
                                }>;
                                bank_account_type?: { enum_name: string };
                                payment_type?: { enum_name: string };
                                payment_rate?: string;
                                payment_amount?: string;
                                priority?: number;
                                currency_id?: string;
                                custom_fields?: Array<{
                                    custom_api_name: string;
                                    value: string;
                                }>;
                            }>;
                            national_id_list?: Array<{
                                national_id_type_id: string;
                                national_id_number: string;
                                issue_date?: string;
                                expiration_date?: string;
                                country_region_id: string;
                                issued_by?: string;
                                custom_fields?: Array<{
                                    custom_api_name: string;
                                    value: string;
                                }>;
                            }>;
                            dependent_list?: Array<{
                                relationship: { enum_name: string };
                                gender?: { enum_name: string };
                                date_of_birth?: string;
                                nationality_id?: string;
                                nationality_id_v2?: string;
                                national_id_list?: Array<{
                                    national_id_type_id: string;
                                    national_id_number: string;
                                    issue_date?: string;
                                    expiration_date?: string;
                                    country_region_id: string;
                                    issued_by?: string;
                                    custom_fields?: Array<{
                                        custom_api_name: string;
                                        value: string;
                                    }>;
                                }>;
                                spouses_working_status?: { enum_name: string };
                                is_this_person_covered_by_health_insurance?: boolean;
                                is_this_person_allowed_for_tax_deduction?: boolean;
                                custom_fields?: Array<{
                                    custom_api_name: string;
                                    value: string;
                                }>;
                                dependent_name?: string;
                                employer?: string;
                                job?: string;
                                phone?: {
                                    international_area_code?: {
                                        enum_name: string;
                                    };
                                    phone_number: string;
                                };
                                address?: {
                                    address_id?: string;
                                    country_region_id: string;
                                    region_id?: string;
                                    city_id?: string;
                                    distinct_id?: string;
                                    city_id_v2?: string;
                                    district_id_v2?: string;
                                    address_line1?: string;
                                    address_line2?: string;
                                    address_line3?: string;
                                    address_line4?: string;
                                    address_line5?: string;
                                    address_line6?: string;
                                    address_line7?: string;
                                    address_line8?: string;
                                    address_line9?: string;
                                    local_address_line1?: string;
                                    local_address_line2?: string;
                                    local_address_line3?: string;
                                    local_address_line4?: string;
                                    local_address_line5?: string;
                                    local_address_line6?: string;
                                    local_address_line7?: string;
                                    local_address_line8?: string;
                                    local_address_line9?: string;
                                    postal_code?: string;
                                    custom_fields?: Array<{
                                        custom_api_name: string;
                                        value: string;
                                    }>;
                                };
                                birth_certificate_of_child?: Array<{
                                    id?: string;
                                }>;
                            }>;
                            emergency_contact_list?: Array<{
                                name?: {
                                    local_primary?: string;
                                    local_first_name?: string;
                                    country_region_id: string;
                                    name_type: { enum_name: string };
                                    local_first_name_2?: string;
                                    local_primary_2?: string;
                                    additional_name?: string;
                                    additional_name_type?: {
                                        enum_name: string;
                                    };
                                    first_name?: string;
                                    full_name?: string;
                                    hereditary?: string;
                                    custom_name?: string;
                                    custom_local_name?: string;
                                    middle_name?: string;
                                    name_primary?: string;
                                    secondary?: string;
                                    tertiary?: string;
                                    social?: { enum_name: string };
                                    title?: { enum_name: string };
                                    local_middle_name?: string;
                                    local_secondary?: string;
                                };
                                relationship?: { enum_name: string };
                                phone_ist?: Array<{
                                    international_area_code?: {
                                        enum_name: string;
                                    };
                                    phone_number: string;
                                }>;
                                legal_name?: string;
                                custom_fields?: Array<{
                                    custom_api_name: string;
                                    value: string;
                                }>;
                            }>;
                            date_entered_workforce?: string;
                            profile_image_id?: string;
                            personal_profile?: Array<{
                                personal_profile_id?: string;
                                personal_profile_type?: { enum_name: string };
                                files?: Array<{ id?: string }>;
                            }>;
                            native_region?: string;
                            hukou_type?: { enum_name: string };
                            hukou_location?: string;
                            political_affiliations?: Array<{
                                enum_name: string;
                            }>;
                            talent_id?: string;
                            custom_fields?: Array<{
                                custom_api_name: string;
                                value: string;
                            }>;
                            born_country_region?: string;
                            is_disabled?: boolean;
                            disable_card_number?: string;
                            is_martyr_family?: boolean;
                            martyr_card_number?: string;
                            is_old_alone?: boolean;
                            resident_taxes?: Array<{
                                year_resident_tax: string;
                                resident_status?: { enum_name: string };
                                tax_country_region_id?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            first_entry_time?: string;
                            leave_time?: string;
                        };
                        params?: {
                            client_token?: string;
                            no_need_query?: boolean;
                        };
                        path?: { person_id?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    person?: {
                                        person_id?: string;
                                        phone_number?: string;
                                        legal_name?: string;
                                        preferred_name?: string;
                                        preferred_local_full_name?: string;
                                        preferred_english_full_name?: string;
                                        name_list?: Array<{
                                            local_primary?: string;
                                            local_first_name?: string;
                                            country_region_id: string;
                                            name_type: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_first_name_2?: string;
                                            local_primary_2?: string;
                                            additional_name?: string;
                                            additional_name_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            first_name?: string;
                                            full_name?: string;
                                            hereditary?: string;
                                            custom_name?: string;
                                            custom_local_name?: string;
                                            middle_name?: string;
                                            name_primary?: string;
                                            secondary?: string;
                                            tertiary?: string;
                                            social?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            title?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            local_middle_name?: string;
                                            local_secondary?: string;
                                            display_name_local_and_western_script?: string;
                                            display_name_local_script?: string;
                                            display_name_western_script?: string;
                                        }>;
                                        gender?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        date_of_birth?: string;
                                        nationality_id?: string;
                                        nationality_id_v2?: string;
                                        race?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        marital_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        phone_list?: Array<{
                                            international_area_code?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_number: string;
                                            formatted_phone_number?: string;
                                            device_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_usage?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                        }>;
                                        address_list?: Array<{
                                            full_address_local_script?: string;
                                            full_address_western_script?: string;
                                            address_id?: string;
                                            country_region_id: string;
                                            region_id?: string;
                                            city_id?: string;
                                            distinct_id?: string;
                                            city_id_v2?: string;
                                            district_id_v2?: string;
                                            address_line1?: string;
                                            address_line2?: string;
                                            address_line3?: string;
                                            address_line4?: string;
                                            address_line5?: string;
                                            address_line6?: string;
                                            address_line7?: string;
                                            address_line8?: string;
                                            address_line9?: string;
                                            local_address_line1?: string;
                                            local_address_line2?: string;
                                            local_address_line3?: string;
                                            local_address_line4?: string;
                                            local_address_line5?: string;
                                            local_address_line6?: string;
                                            local_address_line7?: string;
                                            local_address_line8?: string;
                                            local_address_line9?: string;
                                            postal_code?: string;
                                            address_type_list: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            is_primary: boolean;
                                            is_public: boolean;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        }>;
                                        email_list?: Array<{
                                            email: string;
                                            is_primary?: boolean;
                                            is_public?: boolean;
                                            email_usage?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                        }>;
                                        work_experience_list?: Array<{
                                            company_organization?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            department?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            job?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            description?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            start_date?: string;
                                            end_date?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        }>;
                                        education_list?: Array<{
                                            school: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            level_of_education?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            start_date?: string;
                                            end_date?: string;
                                            field_of_study?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            degree?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            school_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            field_of_study_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            country_region_id?: string;
                                            expected_end_date?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        }>;
                                        bank_account_list?: Array<{
                                            bank_name?: string;
                                            bank_account_number: string;
                                            account_holder: string;
                                            bank?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            bank_identification_code?: string;
                                            branch_name?: string;
                                            bank_id?: string;
                                            branch_id?: string;
                                            bank_id_v2?: string;
                                            branch_id_v2?: string;
                                            country_region_id?: string;
                                            bank_account_usage?: Array<{
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            bank_account_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            payment_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            payment_rate?: string;
                                            payment_amount?: string;
                                            priority?: number;
                                            currency_id?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        }>;
                                        national_id_list?: Array<{
                                            national_id_type_id: string;
                                            national_id_number: string;
                                            issue_date?: string;
                                            expiration_date?: string;
                                            country_region_id: string;
                                            issued_by?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        }>;
                                        dependent_list?: Array<{
                                            name?: {
                                                local_primary?: string;
                                                local_first_name?: string;
                                                country_region_id: string;
                                                name_type: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_first_name_2?: string;
                                                local_primary_2?: string;
                                                additional_name?: string;
                                                additional_name_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                first_name?: string;
                                                full_name?: string;
                                                hereditary?: string;
                                                custom_name?: string;
                                                custom_local_name?: string;
                                                middle_name?: string;
                                                name_primary?: string;
                                                secondary?: string;
                                                tertiary?: string;
                                                social?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                title?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_middle_name?: string;
                                                local_secondary?: string;
                                                display_name_local_and_western_script?: string;
                                                display_name_local_script?: string;
                                                display_name_western_script?: string;
                                            };
                                            relationship: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            gender?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            date_of_birth?: string;
                                            nationality_id?: string;
                                            nationality_id_v2?: string;
                                            national_id_list?: Array<{
                                                national_id_type_id: string;
                                                national_id_number: string;
                                                issue_date?: string;
                                                expiration_date?: string;
                                                country_region_id: string;
                                                issued_by?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            spouses_working_status?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            is_this_person_covered_by_health_insurance?: boolean;
                                            is_this_person_allowed_for_tax_deduction?: boolean;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                            dependent_name?: string;
                                            employer?: string;
                                            job?: string;
                                            phone?: {
                                                international_area_code?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_number: string;
                                                formatted_phone_number?: string;
                                                device_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_usage?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                is_primary?: boolean;
                                                is_public?: boolean;
                                            };
                                            address?: {
                                                full_address_local_script?: string;
                                                full_address_western_script?: string;
                                                address_id?: string;
                                                country_region_id: string;
                                                region_id?: string;
                                                city_id?: string;
                                                distinct_id?: string;
                                                city_id_v2?: string;
                                                district_id_v2?: string;
                                                address_line1?: string;
                                                address_line2?: string;
                                                address_line3?: string;
                                                address_line4?: string;
                                                address_line5?: string;
                                                address_line6?: string;
                                                address_line7?: string;
                                                address_line8?: string;
                                                address_line9?: string;
                                                local_address_line1?: string;
                                                local_address_line2?: string;
                                                local_address_line3?: string;
                                                local_address_line4?: string;
                                                local_address_line5?: string;
                                                local_address_line6?: string;
                                                local_address_line7?: string;
                                                local_address_line8?: string;
                                                local_address_line9?: string;
                                                postal_code?: string;
                                                address_type_list: Array<{
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                }>;
                                                is_primary: boolean;
                                                is_public: boolean;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            };
                                            birth_certificate_of_child?: Array<{
                                                id?: string;
                                                name?: string;
                                            }>;
                                        }>;
                                        emergency_contact_list?: Array<{
                                            name?: {
                                                local_primary?: string;
                                                local_first_name?: string;
                                                country_region_id: string;
                                                name_type: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_first_name_2?: string;
                                                local_primary_2?: string;
                                                additional_name?: string;
                                                additional_name_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                first_name?: string;
                                                full_name?: string;
                                                hereditary?: string;
                                                custom_name?: string;
                                                custom_local_name?: string;
                                                middle_name?: string;
                                                name_primary?: string;
                                                secondary?: string;
                                                tertiary?: string;
                                                social?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                title?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_middle_name?: string;
                                                local_secondary?: string;
                                                display_name_local_and_western_script?: string;
                                                display_name_local_script?: string;
                                                display_name_western_script?: string;
                                            };
                                            relationship?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_ist?: Array<{
                                                international_area_code?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_number: string;
                                                formatted_phone_number?: string;
                                                device_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_usage?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                is_primary?: boolean;
                                                is_public?: boolean;
                                            }>;
                                            phone_list?: Array<{
                                                international_area_code?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_number: string;
                                                formatted_phone_number?: string;
                                                device_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_usage?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                is_primary?: boolean;
                                                is_public?: boolean;
                                            }>;
                                            legal_name?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        }>;
                                        date_entered_workforce?: string;
                                        working_years?: number;
                                        profile_image_id?: string;
                                        email_address?: string;
                                        age?: number;
                                        highest_level_of_education?: {
                                            school: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            level_of_education?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            start_date?: string;
                                            end_date?: string;
                                            field_of_study?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            degree?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            school_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            field_of_study_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            country_region_id?: string;
                                            expected_end_date?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        };
                                        highest_degree_of_education?: {
                                            school: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            level_of_education?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            start_date?: string;
                                            end_date?: string;
                                            field_of_study?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            degree?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            school_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            field_of_study_name?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            country_region_id?: string;
                                            expected_end_date?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                        };
                                        personal_profile?: Array<{
                                            personal_profile_id?: string;
                                            personal_profile_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            files?: Array<{
                                                id?: string;
                                                name?: string;
                                            }>;
                                        }>;
                                        native_region?: string;
                                        hukou_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        hukou_location?: string;
                                        talent_id?: string;
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                        national_id_number?: string;
                                        family_address?: string;
                                        born_country_region?: string;
                                        is_disabled?: boolean;
                                        disable_card_number?: string;
                                        is_martyr_family?: boolean;
                                        martyr_card_number?: string;
                                        is_old_alone?: boolean;
                                        resident_taxes?: Array<{
                                            year_resident_tax: string;
                                            resident_status?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            tax_country_region_id?: string;
                                            custom_fields?: Array<{
                                                field_name: string;
                                                value: string;
                                            }>;
                                        }>;
                                        first_entry_time?: string;
                                        leave_time?: string;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/persons/:person_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * 待入职
             */
            preHire: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=complete&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=complete&project=corehr&resource=pre_hire&version=v2 document }
                 *
                 * 完成入职
                 */
                complete: async (
                    payload?: {
                        path: { pre_hire_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { success?: boolean };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/pre_hires/:pre_hire_id/complete`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/pre_hire/create document }
                 *
                 * 创建待入职人员
                 *
                 * 创建待入职人员
                 */
                create: async (
                    payload?: {
                        data: {
                            basic_info: {
                                name?: {
                                    full_name?: string;
                                    first_name?: string;
                                    middle_name?: string;
                                    name_primary?: string;
                                    local_first_name?: string;
                                    local_middle_name?: string;
                                    local_primary?: string;
                                    country_region_id?: string;
                                    custom_local_name?: string;
                                    custom_western_name?: string;
                                    additional_name?: string;
                                };
                                phone_number?: string;
                                international_area_code?: string;
                                email?: string;
                                date_of_birth?: string;
                                personal_id_number?: string;
                                personal_id_type?: string;
                                date_entered_workforce?: string;
                                gender_id?: string;
                                nationality_v2_id?: string;
                                additional_nationality_id_list?: Array<string>;
                                citizenship_status_id_list?: Array<string>;
                                home_address?: string;
                                worker_id?: string;
                                user_geo?: string;
                                legal_name?: {
                                    full_name?: string;
                                    first_name?: string;
                                    middle_name?: string;
                                    name_primary?: string;
                                    local_first_name?: string;
                                    local_middle_name?: string;
                                    local_primary?: string;
                                    country_region_id?: string;
                                    custom_local_name?: string;
                                    custom_western_name?: string;
                                    additional_name?: string;
                                };
                                additional_name?: {
                                    full_name?: string;
                                    first_name?: string;
                                    middle_name?: string;
                                    name_primary?: string;
                                    local_first_name?: string;
                                    local_middle_name?: string;
                                    local_primary?: string;
                                    country_region_id?: string;
                                    custom_local_name?: string;
                                    custom_western_name?: string;
                                    additional_name?: string;
                                };
                                resident_tax_list?: Array<{
                                    tax_country_region?: string;
                                    resident_status?: string;
                                    tax_address?: {
                                        country_region_id: string;
                                        region_id?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                        address_types: Array<string>;
                                        is_primary: boolean;
                                        is_public: boolean;
                                        city_id_v2?: string;
                                        district_id_v2?: string;
                                    };
                                    resident_status_specification?: string;
                                    year_resident_tax?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                born_country_region?: string;
                                is_disabled?: boolean;
                                disable_card_number?: string;
                                is_old_alone?: boolean;
                                is_martyr_family?: boolean;
                                martyr_card_number?: string;
                                dependent_list?: Array<{
                                    relationship: string;
                                    gender?: string;
                                    date_of_birth?: string;
                                    national_ids?: Array<{
                                        country_region_id: string;
                                        national_id_type_id: string;
                                        national_id_number: string;
                                        issue_date?: string;
                                        expiration_date?: string;
                                        issued_by?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    spouses_working_status?: string;
                                    is_this_person_covered_by_health_insurance?: boolean;
                                    is_this_person_allowed_for_tax_deduction?: boolean;
                                    dependent_name?: string;
                                    employer?: string;
                                    job?: string;
                                    phone?: {
                                        international_area_code: string;
                                        phone_number: string;
                                        device_type: string;
                                        phone_usage: string;
                                        is_primary: boolean;
                                        is_public: boolean;
                                    };
                                    address?: {
                                        country_region_id: string;
                                        region_id?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                        address_types: Array<string>;
                                        is_primary: boolean;
                                        is_public: boolean;
                                        city_id_v2?: string;
                                        district_id_v2?: string;
                                    };
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                religion?: string;
                                bank_account_list?: Array<{
                                    bank_name?: string;
                                    branch_name?: string;
                                    bank_account_number: string;
                                    account_holder: string;
                                    country_region_id?: string;
                                    bank_account_usages?: Array<string>;
                                    bank_account_type?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                national_id_list?: Array<{
                                    country_region_id: string;
                                    national_id_type_id: string;
                                    national_id_number: string;
                                    issue_date?: string;
                                    expiration_date?: string;
                                    issued_by?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                personal_profile_list?: Array<{
                                    personal_profile_type?: string;
                                    files?: Array<{ id?: string }>;
                                }>;
                                emergency_contact_list?: Array<{
                                    legal_name?: string;
                                    relationship?: string;
                                    phones?: Array<{
                                        international_area_code: string;
                                        phone_number: string;
                                        device_type: string;
                                        phone_usage: string;
                                        is_primary: boolean;
                                        is_public: boolean;
                                    }>;
                                    address?: {
                                        country_region_id: string;
                                        region_id?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                        address_types: Array<string>;
                                        is_primary: boolean;
                                        is_public: boolean;
                                        city_id_v2?: string;
                                        district_id_v2?: string;
                                    };
                                    email?: {
                                        email: string;
                                        is_primary: boolean;
                                        is_public: boolean;
                                        email_usage: string;
                                    };
                                    is_primary?: boolean;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                address_list?: Array<{
                                    country_region_id: string;
                                    region_id?: string;
                                    local_address_line1?: string;
                                    local_address_line2?: string;
                                    local_address_line3?: string;
                                    local_address_line4?: string;
                                    local_address_line5?: string;
                                    local_address_line6?: string;
                                    local_address_line7?: string;
                                    local_address_line8?: string;
                                    local_address_line9?: string;
                                    postal_code?: string;
                                    address_types: Array<string>;
                                    is_primary: boolean;
                                    is_public: boolean;
                                    city_id_v2?: string;
                                    district_id_v2?: string;
                                }>;
                                marital_status?: string;
                                ethnicity_race?: string;
                                native_region?: string;
                                hukou_type?: string;
                                hukou_location?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                                expected_graduate_date?: string;
                            };
                            offer_info: {
                                offer_id?: string;
                                offer_hr_id?: string;
                                department_id?: string;
                                direct_leader_id?: string;
                                dotted_line_manager_id?: string;
                                job_id?: string;
                                job_family_id?: string;
                                job_level_id?: string;
                                job_title?: string;
                                probation_start_date?: string;
                                probation_end_date?: string;
                                contract_start_date?: string;
                                contract_end_date?: string;
                                duration_period?: number;
                                duration_unit?: string;
                                onboarding_date?: string;
                                onboarding_location_id?: string;
                                office_location_id?: string;
                                recruitment_type_id?: string;
                                probation_period?: string;
                                employee_type_id?: string;
                                employee_subtype_id?: string;
                                employment_type_id?: string;
                                work_email?: string;
                                duration_type_id?: string;
                                signing_type_id?: string;
                                entry_mode?: string;
                                social_security_city_id?: string;
                                contract_type?: string;
                                company?: string;
                                cost_center_rate?: Array<{
                                    cost_center_id?: string;
                                    rate?: number;
                                    new_rate?: number;
                                }>;
                                job_grade_id?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                                service_company?: string;
                                work_shift?: string;
                                compensation_type?: string;
                                work_location_id?: string;
                                onboarding_address_id?: string;
                                office_address_id?: string;
                                position_id?: string;
                                working_calendar_id?: string;
                                working_hours_type?: string;
                                pay_group_id?: string;
                                flow_id?: string;
                                check_in_time?: string;
                                check_in_method?: string;
                                seniority_date?: string;
                                seniority_adjust_information_list?: Array<{
                                    seniority_adjustment?: number;
                                    seniority_adjustment_type:
                                        | "decrease"
                                        | "increase";
                                    reasons_for_seniority_adjustment?: string;
                                    start_date?: string;
                                    end_date?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                notice_period_probation_voluntary?: {
                                    wk_id?: string;
                                    value?: number;
                                    value_unit?: string;
                                };
                                notice_period_probation_involuntary?: {
                                    wk_id?: string;
                                    value?: number;
                                    value_unit?: string;
                                };
                                notice_period_positive_voluntary?: {
                                    wk_id?: string;
                                    value?: number;
                                    value_unit?: string;
                                };
                                notice_period_positive_involuntary?: {
                                    wk_id?: string;
                                    value?: number;
                                    value_unit?: string;
                                };
                                condition_worker?: boolean;
                                non_compete_covenant?: boolean;
                                company_sponsored_visa?: boolean;
                                work_station?: string;
                                pathway?: string;
                                default_cost_center?: {
                                    cost_center_id: string;
                                    is_herit: boolean;
                                };
                                cost_allocation?: {
                                    effective_time?: string;
                                    expiration_time?: string;
                                    cost_center_rates?: Array<{
                                        cost_center_id?: string;
                                        rate?: number;
                                        new_rate?: number;
                                    }>;
                                };
                            };
                            education_info?: Array<{
                                school_name?: string;
                                education?: string;
                                start_time?: string;
                                end_time?: string;
                                field_of_study?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            work_experience?: Array<{
                                company_name?: string;
                                start_time?: string;
                                end_time?: string;
                                job_title?: string;
                                description?: string;
                                department?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                            }>;
                            ats_application_id?: string;
                            out_biz_id?: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { pre_hire_id?: string };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/pre_hires`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=delete&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=delete&project=corehr&resource=pre_hire&version=v2 document }
                 *
                 * 删除待入职
                 */
                delete: async (
                    payload?: {
                        path: { pre_hire_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/pre_hires/:pre_hire_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=patch&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=corehr&resource=pre_hire&version=v2 document }
                 *
                 * 更新待入职
                 */
                patch: async (
                    payload?: {
                        data?: {
                            basic_info_update?: {
                                names?: Array<{
                                    full_name?: string;
                                    first_name?: string;
                                    middle_name?: string;
                                    name_primary?: string;
                                    local_first_name?: string;
                                    local_middle_name?: string;
                                    local_primary?: string;
                                    custom_local_name?: string;
                                    custom_western_name?: string;
                                    country_region: string;
                                    name_type: string;
                                    additional_name?: string;
                                }>;
                                phones?: Array<{
                                    international_area_code: string;
                                    phone_number: string;
                                    device_type: string;
                                    phone_usage: string;
                                    is_primary: boolean;
                                    is_public: boolean;
                                }>;
                                emails?: Array<{
                                    email: string;
                                    is_primary: boolean;
                                    is_public: boolean;
                                    email_usage: string;
                                }>;
                                nationality_v2_id?: string;
                                additional_nationality_id_list?: Array<string>;
                                resident_tax_list?: Array<{
                                    tax_country_region?: string;
                                    resident_status?: string;
                                    tax_address?: {
                                        country_region_id: string;
                                        region_id?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                        address_types: Array<string>;
                                        is_primary: boolean;
                                        is_public: boolean;
                                        city_id_v2?: string;
                                        district_id_v2?: string;
                                    };
                                    resident_status_specification?: string;
                                    year_resident_tax?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                born_country_region?: string;
                                is_disabled?: boolean;
                                disable_card_number?: string;
                                is_old_alone?: boolean;
                                is_martyr_family?: boolean;
                                martyr_card_number?: string;
                                dependent_list?: Array<{
                                    relationship: string;
                                    gender?: string;
                                    date_of_birth?: string;
                                    national_ids?: Array<{
                                        country_region_id: string;
                                        national_id_type_id: string;
                                        national_id_number: string;
                                        issue_date?: string;
                                        expiration_date?: string;
                                        issued_by?: string;
                                        custom_fields?: Array<{
                                            field_name: string;
                                            value: string;
                                        }>;
                                    }>;
                                    spouses_working_status?: string;
                                    is_this_person_covered_by_health_insurance?: boolean;
                                    is_this_person_allowed_for_tax_deduction?: boolean;
                                    dependent_name?: string;
                                    employer?: string;
                                    job?: string;
                                    phone?: {
                                        international_area_code: string;
                                        phone_number: string;
                                        device_type: string;
                                        phone_usage: string;
                                        is_primary: boolean;
                                        is_public: boolean;
                                    };
                                    address?: {
                                        country_region_id: string;
                                        region_id?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                        address_types: Array<string>;
                                        is_primary: boolean;
                                        is_public: boolean;
                                        city_id_v2?: string;
                                        district_id_v2?: string;
                                    };
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                religion?: string;
                                bank_account_list?: Array<{
                                    bank_name?: string;
                                    branch_name?: string;
                                    bank_account_number: string;
                                    account_holder: string;
                                    country_region_id?: string;
                                    bank_account_usages?: Array<string>;
                                    bank_account_type?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                national_id_list?: Array<{
                                    country_region_id: string;
                                    national_id_type_id: string;
                                    national_id_number: string;
                                    issue_date?: string;
                                    expiration_date?: string;
                                    issued_by?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                personal_profile_list?: Array<{
                                    personal_profile_type?: string;
                                    files?: Array<{ id?: string }>;
                                }>;
                                emergency_contact_list?: Array<{
                                    legal_name?: string;
                                    relationship?: string;
                                    phones?: Array<{
                                        international_area_code: string;
                                        phone_number: string;
                                        device_type: string;
                                        phone_usage: string;
                                        is_primary: boolean;
                                        is_public: boolean;
                                    }>;
                                    address?: {
                                        country_region_id: string;
                                        region_id?: string;
                                        local_address_line1?: string;
                                        local_address_line2?: string;
                                        local_address_line3?: string;
                                        local_address_line4?: string;
                                        local_address_line5?: string;
                                        local_address_line6?: string;
                                        local_address_line7?: string;
                                        local_address_line8?: string;
                                        local_address_line9?: string;
                                        postal_code?: string;
                                        address_types: Array<string>;
                                        is_primary: boolean;
                                        is_public: boolean;
                                        city_id_v2?: string;
                                        district_id_v2?: string;
                                    };
                                    email?: {
                                        email: string;
                                        is_primary: boolean;
                                        is_public: boolean;
                                        email_usage: string;
                                    };
                                    is_primary?: boolean;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                address_list?: Array<{
                                    country_region_id: string;
                                    region_id?: string;
                                    local_address_line1?: string;
                                    local_address_line2?: string;
                                    local_address_line3?: string;
                                    local_address_line4?: string;
                                    local_address_line5?: string;
                                    local_address_line6?: string;
                                    local_address_line7?: string;
                                    local_address_line8?: string;
                                    local_address_line9?: string;
                                    postal_code?: string;
                                    address_types: Array<string>;
                                    is_primary: boolean;
                                    is_public: boolean;
                                    city_id_v2?: string;
                                    district_id_v2?: string;
                                }>;
                                marital_status?: string;
                                ethnicity_race?: string;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                                native_region?: string;
                                hukou_type?: string;
                                hukou_location?: string;
                                gender_id?: string;
                                date_of_birth?: string;
                                date_entered_workforce?: string;
                                expected_graduate_date?: string;
                                citizenship_status_id_list?: Array<string>;
                                work_experience?: Array<{
                                    company_name?: string;
                                    start_time?: string;
                                    end_time?: string;
                                    job_title?: string;
                                    description?: string;
                                    department?: string;
                                }>;
                                education_info?: Array<{
                                    school_name?: string;
                                    education?: string;
                                    start_time?: string;
                                    end_time?: string;
                                    field_of_study?: string;
                                }>;
                            };
                            offer_info_update?: {
                                onboarding_date?: string;
                                ats_application_id?: string;
                                onboarding_location_id?: string;
                                onboarding_address_id?: string;
                                office_location_id?: string;
                                office_address_id?: string;
                                employment_type?: string;
                                onboarding_method?: string;
                                work_emails?: Array<{
                                    email: string;
                                    is_primary: boolean;
                                    is_public: boolean;
                                    email_usage: string;
                                }>;
                                cost_center_rates?: Array<{
                                    cost_center_id?: string;
                                    rate?: number;
                                    new_rate?: number;
                                }>;
                                custom_fields?: Array<{
                                    field_name: string;
                                    value: string;
                                }>;
                                position_id?: string;
                                probation_period?: number;
                                probation_start_date?: string;
                                probation_end_date?: string;
                                contract_start_date?: string;
                                contract_end_date?: string;
                                contract_type?: string;
                                duration_type_id?: string;
                                signing_type_id?: string;
                                worker_id?: string;
                                check_in_time?: string;
                                check_in_method?: string;
                                company?: string;
                                work_shift?: string;
                                recruitment_type_id?: string;
                                compensation_type?: string;
                                pay_group_id?: string;
                                offer_hr_id?: string;
                                job_id?: string;
                                job_family_id?: string;
                                job_level_id?: string;
                                job_grade_id?: string;
                                employee_type_id?: string;
                                employee_subtype_id?: string;
                                direct_leader_id?: string;
                                dotted_line_manager_id?: string;
                                department_id?: string;
                                social_security_city?: string;
                                work_location_id?: string;
                                working_calendar?: string;
                                working_hours_type?: string;
                                seniority_date?: string;
                                seniority_adjust_information_list?: Array<{
                                    seniority_adjustment?: number;
                                    seniority_adjustment_type:
                                        | "decrease"
                                        | "increase";
                                    reasons_for_seniority_adjustment?: string;
                                    start_date?: string;
                                    end_date?: string;
                                    custom_fields?: Array<{
                                        field_name: string;
                                        value: string;
                                    }>;
                                }>;
                                notice_period_probation_voluntary?: {
                                    wk_id?: string;
                                    value?: number;
                                    value_unit?: string;
                                };
                                notice_period_probation_involuntary?: {
                                    wk_id?: string;
                                    value?: number;
                                    value_unit?: string;
                                };
                                notice_period_positive_voluntary?: {
                                    wk_id?: string;
                                    value?: number;
                                    value_unit?: string;
                                };
                                notice_period_positive_involuntary?: {
                                    wk_id?: string;
                                    value?: number;
                                    value_unit?: string;
                                };
                                condition_worker?: boolean;
                                company_sponsored_visa?: boolean;
                                weekly_working_hours_v2?: number;
                                work_station?: string;
                                service_company?: string;
                                non_compete_covenant?: boolean;
                                pathway?: string;
                                default_cost_center?: {
                                    cost_center_id: string;
                                    is_herit: boolean;
                                };
                                cost_allocation?: {
                                    effective_time?: string;
                                    expiration_time?: string;
                                    cost_center_rates?: Array<{
                                        cost_center_id?: string;
                                        rate?: number;
                                        new_rate?: number;
                                    }>;
                                };
                            };
                            standard_update_fields?: Array<string>;
                            custom_update_fields?: Array<string>;
                            person_custom_update_fields?: Array<string>;
                        };
                        path: { pre_hire_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { pre_hire_id?: string };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/pre_hires/:pre_hire_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                queryWithIterator: async (
                    payload?: {
                        data?: {
                            pre_hire_ids?: Array<string>;
                            fields?: Array<string>;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/pre_hires/query`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        person_info?: {
                                                            person_id?: string;
                                                            phone_number?: string;
                                                            legal_name?: string;
                                                            preferred_name?: string;
                                                            preferred_local_full_name?: string;
                                                            preferred_english_full_name?: string;
                                                            name_list?: Array<{
                                                                local_primary?: string;
                                                                local_first_name?: string;
                                                                country_region_id: string;
                                                                name_type: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                local_first_name_2?: string;
                                                                local_primary_2?: string;
                                                                additional_name?: string;
                                                                additional_name_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                first_name?: string;
                                                                full_name?: string;
                                                                hereditary?: string;
                                                                custom_name?: string;
                                                                custom_local_name?: string;
                                                                middle_name?: string;
                                                                name_primary?: string;
                                                                secondary?: string;
                                                                tertiary?: string;
                                                                social?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                title?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                local_middle_name?: string;
                                                                local_secondary?: string;
                                                                display_name_local_and_western_script?: string;
                                                                display_name_local_script?: string;
                                                                display_name_western_script?: string;
                                                            }>;
                                                            gender?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            date_of_birth?: string;
                                                            nationality_id?: string;
                                                            nationality_id_v2?: string;
                                                            additional_nationalities?: Array<{
                                                                nationality_id?: string;
                                                                name?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                alpha_2_code?: string;
                                                                alpha_3_code?: string;
                                                                numeric_code?: number;
                                                                country_region_id?: string;
                                                                status?: number;
                                                            }>;
                                                            citizenship_status?: Array<{
                                                                id?: string;
                                                                country_region_id?: string;
                                                                active?: boolean;
                                                                name?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                citizenship_status?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                view_order?: string;
                                                            }>;
                                                            race?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            marital_status?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            phone_list?: Array<{
                                                                international_area_code?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                phone_number: string;
                                                                formatted_phone_number?: string;
                                                                device_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                phone_usage?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                is_primary?: boolean;
                                                                is_public?: boolean;
                                                            }>;
                                                            address_list?: Array<{
                                                                full_address_local_script?: string;
                                                                full_address_western_script?: string;
                                                                address_id?: string;
                                                                country_region_id: string;
                                                                region_id?: string;
                                                                city_id?: string;
                                                                distinct_id?: string;
                                                                city_id_v2?: string;
                                                                district_id_v2?: string;
                                                                address_line1?: string;
                                                                address_line2?: string;
                                                                address_line3?: string;
                                                                address_line4?: string;
                                                                address_line5?: string;
                                                                address_line6?: string;
                                                                address_line7?: string;
                                                                address_line8?: string;
                                                                address_line9?: string;
                                                                local_address_line1?: string;
                                                                local_address_line2?: string;
                                                                local_address_line3?: string;
                                                                local_address_line4?: string;
                                                                local_address_line5?: string;
                                                                local_address_line6?: string;
                                                                local_address_line7?: string;
                                                                local_address_line8?: string;
                                                                local_address_line9?: string;
                                                                postal_code?: string;
                                                                address_type_list: Array<{
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                }>;
                                                                is_primary: boolean;
                                                                is_public: boolean;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            email_list?: Array<{
                                                                email: string;
                                                                is_primary?: boolean;
                                                                is_public?: boolean;
                                                                email_usage?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                            }>;
                                                            work_experience_list?: Array<{
                                                                company_organization?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                department?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                job?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                description?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                start_date?: string;
                                                                end_date?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            education_list?: Array<{
                                                                school: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                level_of_education?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                start_date?: string;
                                                                end_date?: string;
                                                                field_of_study?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                degree?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                school_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                field_of_study_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                country_region_id?: string;
                                                                expected_end_date?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            bank_account_list?: Array<{
                                                                bank_name?: string;
                                                                bank_account_number: string;
                                                                account_holder: string;
                                                                bank?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                bank_identification_code?: string;
                                                                branch_name?: string;
                                                                bank_id?: string;
                                                                branch_id?: string;
                                                                country_region_id?: string;
                                                                bank_account_usage?: Array<{
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                }>;
                                                                bank_account_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                payment_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                payment_rate?: string;
                                                                payment_amount?: string;
                                                                priority?: number;
                                                                currency_id?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            national_id_list?: Array<{
                                                                national_id_type_id: string;
                                                                national_id_number: string;
                                                                issue_date?: string;
                                                                expiration_date?: string;
                                                                country_region_id: string;
                                                                issued_by?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            dependent_list?: Array<{
                                                                id?: string;
                                                                name?: {
                                                                    local_primary?: string;
                                                                    local_first_name?: string;
                                                                    country_region_id: string;
                                                                    name_type: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    local_first_name_2?: string;
                                                                    local_primary_2?: string;
                                                                    additional_name?: string;
                                                                    additional_name_type?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    first_name?: string;
                                                                    full_name?: string;
                                                                    hereditary?: string;
                                                                    custom_name?: string;
                                                                    custom_local_name?: string;
                                                                    middle_name?: string;
                                                                    name_primary?: string;
                                                                    secondary?: string;
                                                                    tertiary?: string;
                                                                    social?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    title?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    local_middle_name?: string;
                                                                    local_secondary?: string;
                                                                    display_name_local_and_western_script?: string;
                                                                    display_name_local_script?: string;
                                                                    display_name_western_script?: string;
                                                                };
                                                                relationship: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                gender?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                date_of_birth?: string;
                                                                nationality_id?: string;
                                                                national_id_list?: Array<{
                                                                    national_id_type_id: string;
                                                                    national_id_number: string;
                                                                    issue_date?: string;
                                                                    expiration_date?: string;
                                                                    country_region_id: string;
                                                                    issued_by?: string;
                                                                    custom_fields?: Array<{
                                                                        custom_api_name: string;
                                                                        name?: {
                                                                            zh_cn?: string;
                                                                            en_us?: string;
                                                                        };
                                                                        type?: number;
                                                                        value: string;
                                                                    }>;
                                                                }>;
                                                                spouses_working_status?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                is_this_person_covered_by_health_insurance?: boolean;
                                                                is_this_person_allowed_for_tax_deduction?: boolean;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                                dependent_name?: string;
                                                                employer?: string;
                                                                job?: string;
                                                                phone?: {
                                                                    international_area_code?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_number: string;
                                                                    formatted_phone_number?: string;
                                                                    device_type?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_usage?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    is_primary?: boolean;
                                                                    is_public?: boolean;
                                                                };
                                                                address?: {
                                                                    full_address_local_script?: string;
                                                                    full_address_western_script?: string;
                                                                    address_id?: string;
                                                                    country_region_id: string;
                                                                    region_id?: string;
                                                                    city_id?: string;
                                                                    distinct_id?: string;
                                                                    address_line1?: string;
                                                                    address_line2?: string;
                                                                    address_line3?: string;
                                                                    address_line4?: string;
                                                                    address_line5?: string;
                                                                    address_line6?: string;
                                                                    address_line7?: string;
                                                                    address_line8?: string;
                                                                    address_line9?: string;
                                                                    local_address_line1?: string;
                                                                    local_address_line2?: string;
                                                                    local_address_line3?: string;
                                                                    local_address_line4?: string;
                                                                    local_address_line5?: string;
                                                                    local_address_line6?: string;
                                                                    local_address_line7?: string;
                                                                    local_address_line8?: string;
                                                                    local_address_line9?: string;
                                                                    postal_code?: string;
                                                                    address_type_list: Array<{
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    }>;
                                                                    is_primary: boolean;
                                                                    is_public: boolean;
                                                                    custom_fields?: Array<{
                                                                        custom_api_name: string;
                                                                        name?: {
                                                                            zh_cn?: string;
                                                                            en_us?: string;
                                                                        };
                                                                        type?: number;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                birth_certificate_of_child?: Array<{
                                                                    id?: string;
                                                                    name?: string;
                                                                }>;
                                                            }>;
                                                            emergency_contact_list?: Array<{
                                                                id?: string;
                                                                name?: {
                                                                    local_primary?: string;
                                                                    local_first_name?: string;
                                                                    country_region_id: string;
                                                                    name_type: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    local_first_name_2?: string;
                                                                    local_primary_2?: string;
                                                                    additional_name?: string;
                                                                    additional_name_type?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    first_name?: string;
                                                                    full_name?: string;
                                                                    hereditary?: string;
                                                                    custom_name?: string;
                                                                    custom_local_name?: string;
                                                                    middle_name?: string;
                                                                    name_primary?: string;
                                                                    secondary?: string;
                                                                    tertiary?: string;
                                                                    social?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    title?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    local_middle_name?: string;
                                                                    local_secondary?: string;
                                                                    display_name_local_and_western_script?: string;
                                                                    display_name_local_script?: string;
                                                                    display_name_western_script?: string;
                                                                };
                                                                relationship?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                phone_ist?: Array<{
                                                                    international_area_code?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_number: string;
                                                                    formatted_phone_number?: string;
                                                                    device_type?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_usage?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    is_primary?: boolean;
                                                                    is_public?: boolean;
                                                                }>;
                                                                phone_list?: Array<{
                                                                    international_area_code?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_number: string;
                                                                    formatted_phone_number?: string;
                                                                    device_type?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_usage?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    is_primary?: boolean;
                                                                    is_public?: boolean;
                                                                }>;
                                                                legal_name?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                                is_primary?: boolean;
                                                            }>;
                                                            date_entered_workforce?: string;
                                                            working_years?: number;
                                                            profile_image_id?: string;
                                                            email_address?: string;
                                                            age?: number;
                                                            highest_level_of_education?: {
                                                                school: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                level_of_education?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                start_date?: string;
                                                                end_date?: string;
                                                                field_of_study?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                degree?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                school_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                field_of_study_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                country_region_id?: string;
                                                                expected_end_date?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            highest_degree_of_education?: {
                                                                school: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                level_of_education?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                start_date?: string;
                                                                end_date?: string;
                                                                field_of_study?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                degree?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                school_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                field_of_study_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                country_region_id?: string;
                                                                expected_end_date?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            personal_profile?: Array<{
                                                                personal_profile_id?: string;
                                                                personal_profile_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                files?: Array<{
                                                                    id?: string;
                                                                    name?: string;
                                                                }>;
                                                            }>;
                                                            talent_id?: string;
                                                            custom_fields?: Array<{
                                                                custom_api_name: string;
                                                                name?: {
                                                                    zh_cn?: string;
                                                                    en_us?: string;
                                                                };
                                                                type?: number;
                                                                value: string;
                                                            }>;
                                                            national_id_number?: string;
                                                            family_address?: string;
                                                            person_info_chns?: Array<{
                                                                native_region?: string;
                                                                hukou_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                hukou_location?: string;
                                                                political_affiliations?: Array<{
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                }>;
                                                            }>;
                                                            born_country_region?: string;
                                                            is_disabled?: boolean;
                                                            disable_card_number?: string;
                                                            is_martyr_family?: boolean;
                                                            martyr_card_number?: string;
                                                            is_old_alone?: boolean;
                                                            resident_taxes?: Array<{
                                                                year_resident_tax: string;
                                                                resident_status?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                tax_country_region_id?: string;
                                                                custom_fields?: Array<{
                                                                    field_name: string;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            religion?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            working_years_v2?: number;
                                                            created_at?: string;
                                                            updated_at?: string;
                                                            created_by?: string;
                                                            updated_by?: string;
                                                            bank_account_number?: string;
                                                            passport_number?: string;
                                                            former_employer?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        employment_info?: {
                                                            department_id?: string;
                                                            cost_center_rates?: Array<{
                                                                cost_center_id?: string;
                                                                rate?: number;
                                                                new_rate?: number;
                                                            }>;
                                                            office_location_id?: string;
                                                            work_location_id?: string;
                                                            work_station?: string;
                                                            worker_id?: string;
                                                            compensation_type?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            direct_leader_id?: string;
                                                            dotted_line_manager_id?: string;
                                                            job_id?: string;
                                                            job_family_id?: string;
                                                            job_level_id?: string;
                                                            job_grade_id?: string;
                                                            job_title?: string;
                                                            employee_type_id?: string;
                                                            employee_subtype_id?: string;
                                                            employment_type?: string;
                                                            work_email?: string;
                                                            company_id?: string;
                                                            social_security_city_id?: string;
                                                            non_compete_covenant?: boolean;
                                                            weekly_working_hours?: number;
                                                            rehire?:
                                                                | "to_be_confirmed"
                                                                | "no"
                                                                | "yes";
                                                            rehire_employment_id?: string;
                                                            working_hours_type?: string;
                                                            weekly_working_hours_v2?: number;
                                                            office_address?: {
                                                                full_address_local_script?: string;
                                                                full_address_western_script?: string;
                                                                address_id?: string;
                                                                country_region_id: string;
                                                                region_id?: string;
                                                                city_id?: string;
                                                                distinct_id?: string;
                                                                city_id_v2?: string;
                                                                district_id_v2?: string;
                                                                address_line1?: string;
                                                                address_line2?: string;
                                                                address_line3?: string;
                                                                address_line4?: string;
                                                                address_line5?: string;
                                                                address_line6?: string;
                                                                address_line7?: string;
                                                                address_line8?: string;
                                                                address_line9?: string;
                                                                local_address_line1?: string;
                                                                local_address_line2?: string;
                                                                local_address_line3?: string;
                                                                local_address_line4?: string;
                                                                local_address_line5?: string;
                                                                local_address_line6?: string;
                                                                local_address_line7?: string;
                                                                local_address_line8?: string;
                                                                local_address_line9?: string;
                                                                postal_code?: string;
                                                                address_type_list: Array<{
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                }>;
                                                                is_primary: boolean;
                                                                is_public: boolean;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            working_calendar_id?: string;
                                                            updated_at?: string;
                                                            suspected_rehiring?: boolean;
                                                            condition_worker?: boolean;
                                                            custom_fields?: Array<{
                                                                custom_api_name: string;
                                                                name?: {
                                                                    zh_cn?: string;
                                                                    en_us?: string;
                                                                };
                                                                type?: number;
                                                                value: string;
                                                            }>;
                                                            position_id?: string;
                                                            company_manual_updated?: boolean;
                                                            pay_group?: {
                                                                name?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                id?: string;
                                                            };
                                                            whether_the_information_is_abnormal?: boolean;
                                                            abnormal_reason?: Array<{
                                                                descriptions?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            has_offer_salary?: boolean;
                                                            recruitment_project_id?: string;
                                                            work_shift?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            created_at?: string;
                                                            created_by?: string;
                                                            updated_by?: string;
                                                            seniority_date?: string;
                                                            background_check_order_id?: string;
                                                            background_check_order_name?: string;
                                                            background_check_order_package_name?: string;
                                                            background_check_order_result?: string;
                                                            background_check_order_supplier_name?: string;
                                                            background_check_order_account_name?: string;
                                                            background_check_order_start_time?: string;
                                                            background_check_order_complete_time?: string;
                                                            background_check_order_status?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            seniority_adjust_information_list?: Array<{
                                                                seniority_adjustment?: number;
                                                                seniority_adjustment_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                reasons_for_seniority_adjustment?: string;
                                                                start_date?: string;
                                                                end_date?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            notice_period_positive_voluntary?: {
                                                                wk_id?: string;
                                                                value?: number;
                                                                value_unit?: string;
                                                                name?: {
                                                                    lang: string;
                                                                    value: string;
                                                                };
                                                            };
                                                            notice_period_probation_involuntary?: {
                                                                wk_id?: string;
                                                                value?: number;
                                                                value_unit?: string;
                                                                name?: {
                                                                    lang: string;
                                                                    value: string;
                                                                };
                                                            };
                                                            notice_period_positive_involuntary?: {
                                                                wk_id?: string;
                                                                value?: number;
                                                                value_unit?: string;
                                                                name?: {
                                                                    lang: string;
                                                                    value: string;
                                                                };
                                                            };
                                                            notice_period_probation_voluntary?: {
                                                                wk_id?: string;
                                                                value?: number;
                                                                value_unit?: string;
                                                                name?: {
                                                                    lang: string;
                                                                    value: string;
                                                                };
                                                            };
                                                            working_hours_type_manual_updated?: boolean;
                                                            is_over_due?: boolean;
                                                            task_completed?: boolean;
                                                            expected_graduate_date?: string;
                                                            service_company?: string;
                                                            pathway?: string;
                                                            default_cost_center?: {
                                                                cost_center_id?: string;
                                                                effective_time?: string;
                                                                is_herit?: boolean;
                                                                inherit_source?: string;
                                                            };
                                                            cost_allocation?: {
                                                                effective_time?: string;
                                                                expiration_time?: string;
                                                                cost_center_rates?: Array<{
                                                                    cost_center_id?: string;
                                                                    rate?: number;
                                                                    new_rate?: number;
                                                                }>;
                                                            };
                                                        };
                                                        onboarding_info?: {
                                                            offer_id?: string;
                                                            offer_hr_id?: string;
                                                            entry_mode?: string;
                                                            onboarding_date?: string;
                                                            ats_application_id?: string;
                                                            recruitment_type?: string;
                                                            onboarding_location_id?: string;
                                                            company_sponsored_visa?: boolean;
                                                            onboarding_status?:
                                                                | "preboarding"
                                                                | "deleted"
                                                                | "day_one"
                                                                | "withdrawn"
                                                                | "completed";
                                                            onboarding_task_list?: Array<{
                                                                task_name?: string;
                                                                task_status?:
                                                                    | "initiating"
                                                                    | "terminated"
                                                                    | "exception"
                                                                    | "in_progress"
                                                                    | "not_started"
                                                                    | "skipped"
                                                                    | "uninitialized"
                                                                    | "failed"
                                                                    | "in_review"
                                                                    | "rejected"
                                                                    | "completed";
                                                                operator_id?: string;
                                                                task_code?: string;
                                                            }>;
                                                            onboarding_address?: {
                                                                full_address_local_script?: string;
                                                                full_address_western_script?: string;
                                                                address_id?: string;
                                                                country_region_id: string;
                                                                region_id?: string;
                                                                city_id?: string;
                                                                distinct_id?: string;
                                                                city_id_v2?: string;
                                                                district_id_v2?: string;
                                                                address_line1?: string;
                                                                address_line2?: string;
                                                                address_line3?: string;
                                                                address_line4?: string;
                                                                address_line5?: string;
                                                                address_line6?: string;
                                                                address_line7?: string;
                                                                address_line8?: string;
                                                                address_line9?: string;
                                                                local_address_line1?: string;
                                                                local_address_line2?: string;
                                                                local_address_line3?: string;
                                                                local_address_line4?: string;
                                                                local_address_line5?: string;
                                                                local_address_line6?: string;
                                                                local_address_line7?: string;
                                                                local_address_line8?: string;
                                                                local_address_line9?: string;
                                                                postal_code?: string;
                                                                address_type_list: Array<{
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                }>;
                                                                is_primary: boolean;
                                                                is_public: boolean;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            flow_name?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                            flow_id?: string;
                                                            check_in_time?: string;
                                                            check_in_method?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                        };
                                                        probation_info?: {
                                                            probation_start_date?: string;
                                                            probation_end_date?: string;
                                                            probation_period?: number;
                                                        };
                                                        contract_info?: {
                                                            contract_start_date?: string;
                                                            contract_end_date?: string;
                                                            contract_type?: string;
                                                            duration_type?: string;
                                                            signing_type?: string;
                                                            contract_file_ids?: Array<string>;
                                                        };
                                                        pre_hire_id?: string;
                                                        people_fields_json?: string;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=query&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query&project=corehr&resource=pre_hire&version=v2 document }
                 *
                 * 批量查询待入职数据
                 */
                query: async (
                    payload?: {
                        data?: {
                            pre_hire_ids?: Array<string>;
                            fields?: Array<string>;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        person_info?: {
                                            person_id?: string;
                                            phone_number?: string;
                                            legal_name?: string;
                                            preferred_name?: string;
                                            preferred_local_full_name?: string;
                                            preferred_english_full_name?: string;
                                            name_list?: Array<{
                                                local_primary?: string;
                                                local_first_name?: string;
                                                country_region_id: string;
                                                name_type: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_first_name_2?: string;
                                                local_primary_2?: string;
                                                additional_name?: string;
                                                additional_name_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                first_name?: string;
                                                full_name?: string;
                                                hereditary?: string;
                                                custom_name?: string;
                                                custom_local_name?: string;
                                                middle_name?: string;
                                                name_primary?: string;
                                                secondary?: string;
                                                tertiary?: string;
                                                social?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                title?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_middle_name?: string;
                                                local_secondary?: string;
                                                display_name_local_and_western_script?: string;
                                                display_name_local_script?: string;
                                                display_name_western_script?: string;
                                            }>;
                                            gender?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            date_of_birth?: string;
                                            nationality_id?: string;
                                            nationality_id_v2?: string;
                                            additional_nationalities?: Array<{
                                                nationality_id?: string;
                                                name?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                alpha_2_code?: string;
                                                alpha_3_code?: string;
                                                numeric_code?: number;
                                                country_region_id?: string;
                                                status?: number;
                                            }>;
                                            citizenship_status?: Array<{
                                                id?: string;
                                                country_region_id?: string;
                                                active?: boolean;
                                                name?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                citizenship_status?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                view_order?: string;
                                            }>;
                                            race?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            marital_status?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_list?: Array<{
                                                international_area_code?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_number: string;
                                                formatted_phone_number?: string;
                                                device_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_usage?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                is_primary?: boolean;
                                                is_public?: boolean;
                                            }>;
                                            address_list?: Array<{
                                                full_address_local_script?: string;
                                                full_address_western_script?: string;
                                                address_id?: string;
                                                country_region_id: string;
                                                region_id?: string;
                                                city_id?: string;
                                                distinct_id?: string;
                                                city_id_v2?: string;
                                                district_id_v2?: string;
                                                address_line1?: string;
                                                address_line2?: string;
                                                address_line3?: string;
                                                address_line4?: string;
                                                address_line5?: string;
                                                address_line6?: string;
                                                address_line7?: string;
                                                address_line8?: string;
                                                address_line9?: string;
                                                local_address_line1?: string;
                                                local_address_line2?: string;
                                                local_address_line3?: string;
                                                local_address_line4?: string;
                                                local_address_line5?: string;
                                                local_address_line6?: string;
                                                local_address_line7?: string;
                                                local_address_line8?: string;
                                                local_address_line9?: string;
                                                postal_code?: string;
                                                address_type_list: Array<{
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                }>;
                                                is_primary: boolean;
                                                is_public: boolean;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            email_list?: Array<{
                                                email: string;
                                                is_primary?: boolean;
                                                is_public?: boolean;
                                                email_usage?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                            }>;
                                            work_experience_list?: Array<{
                                                company_organization?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                department?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                job?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                description?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                start_date?: string;
                                                end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            education_list?: Array<{
                                                school: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                level_of_education?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                start_date?: string;
                                                end_date?: string;
                                                field_of_study?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                degree?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                school_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                field_of_study_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                country_region_id?: string;
                                                expected_end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            bank_account_list?: Array<{
                                                bank_name?: string;
                                                bank_account_number: string;
                                                account_holder: string;
                                                bank?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                bank_identification_code?: string;
                                                branch_name?: string;
                                                bank_id?: string;
                                                branch_id?: string;
                                                country_region_id?: string;
                                                bank_account_usage?: Array<{
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                }>;
                                                bank_account_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                payment_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                payment_rate?: string;
                                                payment_amount?: string;
                                                priority?: number;
                                                currency_id?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            national_id_list?: Array<{
                                                national_id_type_id: string;
                                                national_id_number: string;
                                                issue_date?: string;
                                                expiration_date?: string;
                                                country_region_id: string;
                                                issued_by?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            dependent_list?: Array<{
                                                id?: string;
                                                name?: {
                                                    local_primary?: string;
                                                    local_first_name?: string;
                                                    country_region_id: string;
                                                    name_type: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    local_first_name_2?: string;
                                                    local_primary_2?: string;
                                                    additional_name?: string;
                                                    additional_name_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    first_name?: string;
                                                    full_name?: string;
                                                    hereditary?: string;
                                                    custom_name?: string;
                                                    custom_local_name?: string;
                                                    middle_name?: string;
                                                    name_primary?: string;
                                                    secondary?: string;
                                                    tertiary?: string;
                                                    social?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    title?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    local_middle_name?: string;
                                                    local_secondary?: string;
                                                    display_name_local_and_western_script?: string;
                                                    display_name_local_script?: string;
                                                    display_name_western_script?: string;
                                                };
                                                relationship: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                gender?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                date_of_birth?: string;
                                                nationality_id?: string;
                                                national_id_list?: Array<{
                                                    national_id_type_id: string;
                                                    national_id_number: string;
                                                    issue_date?: string;
                                                    expiration_date?: string;
                                                    country_region_id: string;
                                                    issued_by?: string;
                                                    custom_fields?: Array<{
                                                        custom_api_name: string;
                                                        name?: {
                                                            zh_cn?: string;
                                                            en_us?: string;
                                                        };
                                                        type?: number;
                                                        value: string;
                                                    }>;
                                                }>;
                                                spouses_working_status?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                is_this_person_covered_by_health_insurance?: boolean;
                                                is_this_person_allowed_for_tax_deduction?: boolean;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                                dependent_name?: string;
                                                employer?: string;
                                                job?: string;
                                                phone?: {
                                                    international_area_code?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_number: string;
                                                    formatted_phone_number?: string;
                                                    device_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_usage?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    is_primary?: boolean;
                                                    is_public?: boolean;
                                                };
                                                address?: {
                                                    full_address_local_script?: string;
                                                    full_address_western_script?: string;
                                                    address_id?: string;
                                                    country_region_id: string;
                                                    region_id?: string;
                                                    city_id?: string;
                                                    distinct_id?: string;
                                                    address_line1?: string;
                                                    address_line2?: string;
                                                    address_line3?: string;
                                                    address_line4?: string;
                                                    address_line5?: string;
                                                    address_line6?: string;
                                                    address_line7?: string;
                                                    address_line8?: string;
                                                    address_line9?: string;
                                                    local_address_line1?: string;
                                                    local_address_line2?: string;
                                                    local_address_line3?: string;
                                                    local_address_line4?: string;
                                                    local_address_line5?: string;
                                                    local_address_line6?: string;
                                                    local_address_line7?: string;
                                                    local_address_line8?: string;
                                                    local_address_line9?: string;
                                                    postal_code?: string;
                                                    address_type_list: Array<{
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    }>;
                                                    is_primary: boolean;
                                                    is_public: boolean;
                                                    custom_fields?: Array<{
                                                        custom_api_name: string;
                                                        name?: {
                                                            zh_cn?: string;
                                                            en_us?: string;
                                                        };
                                                        type?: number;
                                                        value: string;
                                                    }>;
                                                };
                                                birth_certificate_of_child?: Array<{
                                                    id?: string;
                                                    name?: string;
                                                }>;
                                            }>;
                                            emergency_contact_list?: Array<{
                                                id?: string;
                                                name?: {
                                                    local_primary?: string;
                                                    local_first_name?: string;
                                                    country_region_id: string;
                                                    name_type: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    local_first_name_2?: string;
                                                    local_primary_2?: string;
                                                    additional_name?: string;
                                                    additional_name_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    first_name?: string;
                                                    full_name?: string;
                                                    hereditary?: string;
                                                    custom_name?: string;
                                                    custom_local_name?: string;
                                                    middle_name?: string;
                                                    name_primary?: string;
                                                    secondary?: string;
                                                    tertiary?: string;
                                                    social?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    title?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    local_middle_name?: string;
                                                    local_secondary?: string;
                                                    display_name_local_and_western_script?: string;
                                                    display_name_local_script?: string;
                                                    display_name_western_script?: string;
                                                };
                                                relationship?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_ist?: Array<{
                                                    international_area_code?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_number: string;
                                                    formatted_phone_number?: string;
                                                    device_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_usage?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    is_primary?: boolean;
                                                    is_public?: boolean;
                                                }>;
                                                phone_list?: Array<{
                                                    international_area_code?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_number: string;
                                                    formatted_phone_number?: string;
                                                    device_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_usage?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    is_primary?: boolean;
                                                    is_public?: boolean;
                                                }>;
                                                legal_name?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                                is_primary?: boolean;
                                            }>;
                                            date_entered_workforce?: string;
                                            working_years?: number;
                                            profile_image_id?: string;
                                            email_address?: string;
                                            age?: number;
                                            highest_level_of_education?: {
                                                school: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                level_of_education?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                start_date?: string;
                                                end_date?: string;
                                                field_of_study?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                degree?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                school_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                field_of_study_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                country_region_id?: string;
                                                expected_end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            };
                                            highest_degree_of_education?: {
                                                school: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                level_of_education?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                start_date?: string;
                                                end_date?: string;
                                                field_of_study?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                degree?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                school_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                field_of_study_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                country_region_id?: string;
                                                expected_end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            };
                                            personal_profile?: Array<{
                                                personal_profile_id?: string;
                                                personal_profile_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                files?: Array<{
                                                    id?: string;
                                                    name?: string;
                                                }>;
                                            }>;
                                            talent_id?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                            national_id_number?: string;
                                            family_address?: string;
                                            person_info_chns?: Array<{
                                                native_region?: string;
                                                hukou_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                hukou_location?: string;
                                                political_affiliations?: Array<{
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                }>;
                                            }>;
                                            born_country_region?: string;
                                            is_disabled?: boolean;
                                            disable_card_number?: string;
                                            is_martyr_family?: boolean;
                                            martyr_card_number?: string;
                                            is_old_alone?: boolean;
                                            resident_taxes?: Array<{
                                                year_resident_tax: string;
                                                resident_status?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                tax_country_region_id?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            religion?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            working_years_v2?: number;
                                            created_at?: string;
                                            updated_at?: string;
                                            created_by?: string;
                                            updated_by?: string;
                                            bank_account_number?: string;
                                            passport_number?: string;
                                            former_employer?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        employment_info?: {
                                            department_id?: string;
                                            cost_center_rates?: Array<{
                                                cost_center_id?: string;
                                                rate?: number;
                                                new_rate?: number;
                                            }>;
                                            office_location_id?: string;
                                            work_location_id?: string;
                                            work_station?: string;
                                            worker_id?: string;
                                            compensation_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            direct_leader_id?: string;
                                            dotted_line_manager_id?: string;
                                            job_id?: string;
                                            job_family_id?: string;
                                            job_level_id?: string;
                                            job_grade_id?: string;
                                            job_title?: string;
                                            employee_type_id?: string;
                                            employee_subtype_id?: string;
                                            employment_type?: string;
                                            work_email?: string;
                                            company_id?: string;
                                            social_security_city_id?: string;
                                            non_compete_covenant?: boolean;
                                            weekly_working_hours?: number;
                                            rehire?:
                                                | "to_be_confirmed"
                                                | "no"
                                                | "yes";
                                            rehire_employment_id?: string;
                                            working_hours_type?: string;
                                            weekly_working_hours_v2?: number;
                                            office_address?: {
                                                full_address_local_script?: string;
                                                full_address_western_script?: string;
                                                address_id?: string;
                                                country_region_id: string;
                                                region_id?: string;
                                                city_id?: string;
                                                distinct_id?: string;
                                                city_id_v2?: string;
                                                district_id_v2?: string;
                                                address_line1?: string;
                                                address_line2?: string;
                                                address_line3?: string;
                                                address_line4?: string;
                                                address_line5?: string;
                                                address_line6?: string;
                                                address_line7?: string;
                                                address_line8?: string;
                                                address_line9?: string;
                                                local_address_line1?: string;
                                                local_address_line2?: string;
                                                local_address_line3?: string;
                                                local_address_line4?: string;
                                                local_address_line5?: string;
                                                local_address_line6?: string;
                                                local_address_line7?: string;
                                                local_address_line8?: string;
                                                local_address_line9?: string;
                                                postal_code?: string;
                                                address_type_list: Array<{
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                }>;
                                                is_primary: boolean;
                                                is_public: boolean;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            };
                                            working_calendar_id?: string;
                                            updated_at?: string;
                                            suspected_rehiring?: boolean;
                                            condition_worker?: boolean;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                            position_id?: string;
                                            company_manual_updated?: boolean;
                                            pay_group?: {
                                                name?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                id?: string;
                                            };
                                            whether_the_information_is_abnormal?: boolean;
                                            abnormal_reason?: Array<{
                                                descriptions?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            has_offer_salary?: boolean;
                                            recruitment_project_id?: string;
                                            work_shift?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            created_at?: string;
                                            created_by?: string;
                                            updated_by?: string;
                                            seniority_date?: string;
                                            background_check_order_id?: string;
                                            background_check_order_name?: string;
                                            background_check_order_package_name?: string;
                                            background_check_order_result?: string;
                                            background_check_order_supplier_name?: string;
                                            background_check_order_account_name?: string;
                                            background_check_order_start_time?: string;
                                            background_check_order_complete_time?: string;
                                            background_check_order_status?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            seniority_adjust_information_list?: Array<{
                                                seniority_adjustment?: number;
                                                seniority_adjustment_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                reasons_for_seniority_adjustment?: string;
                                                start_date?: string;
                                                end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            notice_period_positive_voluntary?: {
                                                wk_id?: string;
                                                value?: number;
                                                value_unit?: string;
                                                name?: {
                                                    lang: string;
                                                    value: string;
                                                };
                                            };
                                            notice_period_probation_involuntary?: {
                                                wk_id?: string;
                                                value?: number;
                                                value_unit?: string;
                                                name?: {
                                                    lang: string;
                                                    value: string;
                                                };
                                            };
                                            notice_period_positive_involuntary?: {
                                                wk_id?: string;
                                                value?: number;
                                                value_unit?: string;
                                                name?: {
                                                    lang: string;
                                                    value: string;
                                                };
                                            };
                                            notice_period_probation_voluntary?: {
                                                wk_id?: string;
                                                value?: number;
                                                value_unit?: string;
                                                name?: {
                                                    lang: string;
                                                    value: string;
                                                };
                                            };
                                            working_hours_type_manual_updated?: boolean;
                                            is_over_due?: boolean;
                                            task_completed?: boolean;
                                            expected_graduate_date?: string;
                                            service_company?: string;
                                            pathway?: string;
                                            default_cost_center?: {
                                                cost_center_id?: string;
                                                effective_time?: string;
                                                is_herit?: boolean;
                                                inherit_source?: string;
                                            };
                                            cost_allocation?: {
                                                effective_time?: string;
                                                expiration_time?: string;
                                                cost_center_rates?: Array<{
                                                    cost_center_id?: string;
                                                    rate?: number;
                                                    new_rate?: number;
                                                }>;
                                            };
                                        };
                                        onboarding_info?: {
                                            offer_id?: string;
                                            offer_hr_id?: string;
                                            entry_mode?: string;
                                            onboarding_date?: string;
                                            ats_application_id?: string;
                                            recruitment_type?: string;
                                            onboarding_location_id?: string;
                                            company_sponsored_visa?: boolean;
                                            onboarding_status?:
                                                | "preboarding"
                                                | "deleted"
                                                | "day_one"
                                                | "withdrawn"
                                                | "completed";
                                            onboarding_task_list?: Array<{
                                                task_name?: string;
                                                task_status?:
                                                    | "initiating"
                                                    | "terminated"
                                                    | "exception"
                                                    | "in_progress"
                                                    | "not_started"
                                                    | "skipped"
                                                    | "uninitialized"
                                                    | "failed"
                                                    | "in_review"
                                                    | "rejected"
                                                    | "completed";
                                                operator_id?: string;
                                                task_code?: string;
                                            }>;
                                            onboarding_address?: {
                                                full_address_local_script?: string;
                                                full_address_western_script?: string;
                                                address_id?: string;
                                                country_region_id: string;
                                                region_id?: string;
                                                city_id?: string;
                                                distinct_id?: string;
                                                city_id_v2?: string;
                                                district_id_v2?: string;
                                                address_line1?: string;
                                                address_line2?: string;
                                                address_line3?: string;
                                                address_line4?: string;
                                                address_line5?: string;
                                                address_line6?: string;
                                                address_line7?: string;
                                                address_line8?: string;
                                                address_line9?: string;
                                                local_address_line1?: string;
                                                local_address_line2?: string;
                                                local_address_line3?: string;
                                                local_address_line4?: string;
                                                local_address_line5?: string;
                                                local_address_line6?: string;
                                                local_address_line7?: string;
                                                local_address_line8?: string;
                                                local_address_line9?: string;
                                                postal_code?: string;
                                                address_type_list: Array<{
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                }>;
                                                is_primary: boolean;
                                                is_public: boolean;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            };
                                            flow_name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            flow_id?: string;
                                            check_in_time?: string;
                                            check_in_method?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                        };
                                        probation_info?: {
                                            probation_start_date?: string;
                                            probation_end_date?: string;
                                            probation_period?: number;
                                        };
                                        contract_info?: {
                                            contract_start_date?: string;
                                            contract_end_date?: string;
                                            contract_type?: string;
                                            duration_type?: string;
                                            signing_type?: string;
                                            contract_file_ids?: Array<string>;
                                        };
                                        pre_hire_id?: string;
                                        people_fields_json?: string;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/pre_hires/query`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=restore_flow_instance&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=restore_flow_instance&project=corehr&resource=pre_hire&version=v2 document }
                 */
                restoreFlowInstance: async (
                    payload?: {
                        data: {
                            pre_hire_id: string;
                            confirm_workforce?: boolean;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { success?: boolean };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/pre_hires/restore_flow_instance`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                searchWithIterator: async (
                    payload?: {
                        data?: {
                            worker_ids?: Array<string>;
                            pre_hire_ids?: Array<string>;
                            person_ids?: Array<string>;
                            onboarding_date_start?: string;
                            onboarding_date_end?: string;
                            updated_date_start?: string;
                            updated_date_end?: string;
                            onboarding_location_ids?: Array<string>;
                            onboarding_status?:
                                | "preboarding"
                                | "deleted"
                                | "day_one"
                                | "withdrawn"
                                | "completed";
                            department_ids?: Array<string>;
                            direct_manager_ids?: Array<string>;
                            employee_type_ids?: Array<string>;
                            employee_subtype_ids?: Array<string>;
                            job_family_ids?: Array<string>;
                            key_word?: string;
                            condition_worker?: boolean;
                            rehire?: "to_be_confirmed" | "no" | "yes";
                            fields?: Array<string>;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/pre_hires/search`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        person_info?: {
                                                            person_id?: string;
                                                            phone_number?: string;
                                                            legal_name?: string;
                                                            preferred_name?: string;
                                                            preferred_local_full_name?: string;
                                                            preferred_english_full_name?: string;
                                                            name_list?: Array<{
                                                                local_primary?: string;
                                                                local_first_name?: string;
                                                                country_region_id: string;
                                                                name_type: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                local_first_name_2?: string;
                                                                local_primary_2?: string;
                                                                additional_name?: string;
                                                                additional_name_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                first_name?: string;
                                                                full_name?: string;
                                                                hereditary?: string;
                                                                custom_name?: string;
                                                                custom_local_name?: string;
                                                                middle_name?: string;
                                                                name_primary?: string;
                                                                secondary?: string;
                                                                tertiary?: string;
                                                                social?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                title?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                local_middle_name?: string;
                                                                local_secondary?: string;
                                                                display_name_local_and_western_script?: string;
                                                                display_name_local_script?: string;
                                                                display_name_western_script?: string;
                                                            }>;
                                                            gender?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            date_of_birth?: string;
                                                            nationality_id?: string;
                                                            nationality_id_v2?: string;
                                                            additional_nationalities?: Array<{
                                                                nationality_id?: string;
                                                                name?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                alpha_2_code?: string;
                                                                alpha_3_code?: string;
                                                                numeric_code?: number;
                                                                country_region_id?: string;
                                                                status?: number;
                                                            }>;
                                                            citizenship_status?: Array<{
                                                                id?: string;
                                                                country_region_id?: string;
                                                                active?: boolean;
                                                                name?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                citizenship_status?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                view_order?: string;
                                                            }>;
                                                            race?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            marital_status?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            phone_list?: Array<{
                                                                international_area_code?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                phone_number: string;
                                                                formatted_phone_number?: string;
                                                                device_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                phone_usage?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                is_primary?: boolean;
                                                                is_public?: boolean;
                                                            }>;
                                                            address_list?: Array<{
                                                                full_address_local_script?: string;
                                                                full_address_western_script?: string;
                                                                address_id?: string;
                                                                country_region_id: string;
                                                                region_id?: string;
                                                                city_id?: string;
                                                                distinct_id?: string;
                                                                city_id_v2?: string;
                                                                district_id_v2?: string;
                                                                address_line1?: string;
                                                                address_line2?: string;
                                                                address_line3?: string;
                                                                address_line4?: string;
                                                                address_line5?: string;
                                                                address_line6?: string;
                                                                address_line7?: string;
                                                                address_line8?: string;
                                                                address_line9?: string;
                                                                local_address_line1?: string;
                                                                local_address_line2?: string;
                                                                local_address_line3?: string;
                                                                local_address_line4?: string;
                                                                local_address_line5?: string;
                                                                local_address_line6?: string;
                                                                local_address_line7?: string;
                                                                local_address_line8?: string;
                                                                local_address_line9?: string;
                                                                postal_code?: string;
                                                                address_type_list: Array<{
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                }>;
                                                                is_primary: boolean;
                                                                is_public: boolean;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            email_list?: Array<{
                                                                email: string;
                                                                is_primary?: boolean;
                                                                is_public?: boolean;
                                                                email_usage?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                            }>;
                                                            work_experience_list?: Array<{
                                                                company_organization?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                department?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                job?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                description?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                start_date?: string;
                                                                end_date?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            education_list?: Array<{
                                                                school: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                level_of_education?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                start_date?: string;
                                                                end_date?: string;
                                                                field_of_study?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                degree?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                school_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                field_of_study_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                country_region_id?: string;
                                                                expected_end_date?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            bank_account_list?: Array<{
                                                                bank_name?: string;
                                                                bank_account_number: string;
                                                                account_holder: string;
                                                                bank?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                bank_identification_code?: string;
                                                                branch_name?: string;
                                                                bank_id?: string;
                                                                branch_id?: string;
                                                                country_region_id?: string;
                                                                bank_account_usage?: Array<{
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                }>;
                                                                bank_account_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                payment_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                payment_rate?: string;
                                                                payment_amount?: string;
                                                                priority?: number;
                                                                currency_id?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            national_id_list?: Array<{
                                                                national_id_type_id: string;
                                                                national_id_number: string;
                                                                issue_date?: string;
                                                                expiration_date?: string;
                                                                country_region_id: string;
                                                                issued_by?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            dependent_list?: Array<{
                                                                id?: string;
                                                                name?: {
                                                                    local_primary?: string;
                                                                    local_first_name?: string;
                                                                    country_region_id: string;
                                                                    name_type: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    local_first_name_2?: string;
                                                                    local_primary_2?: string;
                                                                    additional_name?: string;
                                                                    additional_name_type?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    first_name?: string;
                                                                    full_name?: string;
                                                                    hereditary?: string;
                                                                    custom_name?: string;
                                                                    custom_local_name?: string;
                                                                    middle_name?: string;
                                                                    name_primary?: string;
                                                                    secondary?: string;
                                                                    tertiary?: string;
                                                                    social?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    title?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    local_middle_name?: string;
                                                                    local_secondary?: string;
                                                                    display_name_local_and_western_script?: string;
                                                                    display_name_local_script?: string;
                                                                    display_name_western_script?: string;
                                                                };
                                                                relationship: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                gender?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                date_of_birth?: string;
                                                                nationality_id?: string;
                                                                national_id_list?: Array<{
                                                                    national_id_type_id: string;
                                                                    national_id_number: string;
                                                                    issue_date?: string;
                                                                    expiration_date?: string;
                                                                    country_region_id: string;
                                                                    issued_by?: string;
                                                                    custom_fields?: Array<{
                                                                        custom_api_name: string;
                                                                        name?: {
                                                                            zh_cn?: string;
                                                                            en_us?: string;
                                                                        };
                                                                        type?: number;
                                                                        value: string;
                                                                    }>;
                                                                }>;
                                                                spouses_working_status?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                is_this_person_covered_by_health_insurance?: boolean;
                                                                is_this_person_allowed_for_tax_deduction?: boolean;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                                dependent_name?: string;
                                                                employer?: string;
                                                                job?: string;
                                                                phone?: {
                                                                    international_area_code?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_number: string;
                                                                    formatted_phone_number?: string;
                                                                    device_type?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_usage?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    is_primary?: boolean;
                                                                    is_public?: boolean;
                                                                };
                                                                address?: {
                                                                    full_address_local_script?: string;
                                                                    full_address_western_script?: string;
                                                                    address_id?: string;
                                                                    country_region_id: string;
                                                                    region_id?: string;
                                                                    city_id?: string;
                                                                    distinct_id?: string;
                                                                    address_line1?: string;
                                                                    address_line2?: string;
                                                                    address_line3?: string;
                                                                    address_line4?: string;
                                                                    address_line5?: string;
                                                                    address_line6?: string;
                                                                    address_line7?: string;
                                                                    address_line8?: string;
                                                                    address_line9?: string;
                                                                    local_address_line1?: string;
                                                                    local_address_line2?: string;
                                                                    local_address_line3?: string;
                                                                    local_address_line4?: string;
                                                                    local_address_line5?: string;
                                                                    local_address_line6?: string;
                                                                    local_address_line7?: string;
                                                                    local_address_line8?: string;
                                                                    local_address_line9?: string;
                                                                    postal_code?: string;
                                                                    address_type_list: Array<{
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    }>;
                                                                    is_primary: boolean;
                                                                    is_public: boolean;
                                                                    custom_fields?: Array<{
                                                                        custom_api_name: string;
                                                                        name?: {
                                                                            zh_cn?: string;
                                                                            en_us?: string;
                                                                        };
                                                                        type?: number;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                birth_certificate_of_child?: Array<{
                                                                    id?: string;
                                                                    name?: string;
                                                                }>;
                                                            }>;
                                                            emergency_contact_list?: Array<{
                                                                id?: string;
                                                                name?: {
                                                                    local_primary?: string;
                                                                    local_first_name?: string;
                                                                    country_region_id: string;
                                                                    name_type: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    local_first_name_2?: string;
                                                                    local_primary_2?: string;
                                                                    additional_name?: string;
                                                                    additional_name_type?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    first_name?: string;
                                                                    full_name?: string;
                                                                    hereditary?: string;
                                                                    custom_name?: string;
                                                                    custom_local_name?: string;
                                                                    middle_name?: string;
                                                                    name_primary?: string;
                                                                    secondary?: string;
                                                                    tertiary?: string;
                                                                    social?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    title?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    local_middle_name?: string;
                                                                    local_secondary?: string;
                                                                    display_name_local_and_western_script?: string;
                                                                    display_name_local_script?: string;
                                                                    display_name_western_script?: string;
                                                                };
                                                                relationship?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                phone_ist?: Array<{
                                                                    international_area_code?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_number: string;
                                                                    formatted_phone_number?: string;
                                                                    device_type?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_usage?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    is_primary?: boolean;
                                                                    is_public?: boolean;
                                                                }>;
                                                                phone_list?: Array<{
                                                                    international_area_code?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_number: string;
                                                                    formatted_phone_number?: string;
                                                                    device_type?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    phone_usage?: {
                                                                        enum_name: string;
                                                                        display?: Array<{
                                                                            lang: string;
                                                                            value: string;
                                                                        }>;
                                                                    };
                                                                    is_primary?: boolean;
                                                                    is_public?: boolean;
                                                                }>;
                                                                legal_name?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                                is_primary?: boolean;
                                                            }>;
                                                            date_entered_workforce?: string;
                                                            working_years?: number;
                                                            profile_image_id?: string;
                                                            email_address?: string;
                                                            age?: number;
                                                            highest_level_of_education?: {
                                                                school: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                level_of_education?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                start_date?: string;
                                                                end_date?: string;
                                                                field_of_study?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                degree?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                school_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                field_of_study_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                country_region_id?: string;
                                                                expected_end_date?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            highest_degree_of_education?: {
                                                                school: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                level_of_education?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                start_date?: string;
                                                                end_date?: string;
                                                                field_of_study?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                degree?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                school_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                field_of_study_name?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                country_region_id?: string;
                                                                expected_end_date?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            personal_profile?: Array<{
                                                                personal_profile_id?: string;
                                                                personal_profile_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                files?: Array<{
                                                                    id?: string;
                                                                    name?: string;
                                                                }>;
                                                            }>;
                                                            talent_id?: string;
                                                            custom_fields?: Array<{
                                                                custom_api_name: string;
                                                                name?: {
                                                                    zh_cn?: string;
                                                                    en_us?: string;
                                                                };
                                                                type?: number;
                                                                value: string;
                                                            }>;
                                                            national_id_number?: string;
                                                            family_address?: string;
                                                            person_info_chns?: Array<{
                                                                native_region?: string;
                                                                hukou_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                hukou_location?: string;
                                                                political_affiliations?: Array<{
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                }>;
                                                            }>;
                                                            born_country_region?: string;
                                                            is_disabled?: boolean;
                                                            disable_card_number?: string;
                                                            is_martyr_family?: boolean;
                                                            martyr_card_number?: string;
                                                            is_old_alone?: boolean;
                                                            resident_taxes?: Array<{
                                                                year_resident_tax: string;
                                                                resident_status?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                tax_country_region_id?: string;
                                                                custom_fields?: Array<{
                                                                    field_name: string;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            religion?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            working_years_v2?: number;
                                                            created_at?: string;
                                                            updated_at?: string;
                                                            created_by?: string;
                                                            updated_by?: string;
                                                            bank_account_number?: string;
                                                            passport_number?: string;
                                                            former_employer?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        employment_info?: {
                                                            department_id?: string;
                                                            cost_center_rates?: Array<{
                                                                cost_center_id?: string;
                                                                rate?: number;
                                                                new_rate?: number;
                                                            }>;
                                                            office_location_id?: string;
                                                            work_location_id?: string;
                                                            work_station?: string;
                                                            worker_id?: string;
                                                            compensation_type?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            direct_leader_id?: string;
                                                            dotted_line_manager_id?: string;
                                                            job_id?: string;
                                                            job_family_id?: string;
                                                            job_level_id?: string;
                                                            job_grade_id?: string;
                                                            job_title?: string;
                                                            employee_type_id?: string;
                                                            employee_subtype_id?: string;
                                                            employment_type?: string;
                                                            work_email?: string;
                                                            company_id?: string;
                                                            social_security_city_id?: string;
                                                            non_compete_covenant?: boolean;
                                                            weekly_working_hours?: number;
                                                            rehire?:
                                                                | "to_be_confirmed"
                                                                | "no"
                                                                | "yes";
                                                            rehire_employment_id?: string;
                                                            working_hours_type?: string;
                                                            weekly_working_hours_v2?: number;
                                                            office_address?: {
                                                                full_address_local_script?: string;
                                                                full_address_western_script?: string;
                                                                address_id?: string;
                                                                country_region_id: string;
                                                                region_id?: string;
                                                                city_id?: string;
                                                                distinct_id?: string;
                                                                city_id_v2?: string;
                                                                district_id_v2?: string;
                                                                address_line1?: string;
                                                                address_line2?: string;
                                                                address_line3?: string;
                                                                address_line4?: string;
                                                                address_line5?: string;
                                                                address_line6?: string;
                                                                address_line7?: string;
                                                                address_line8?: string;
                                                                address_line9?: string;
                                                                local_address_line1?: string;
                                                                local_address_line2?: string;
                                                                local_address_line3?: string;
                                                                local_address_line4?: string;
                                                                local_address_line5?: string;
                                                                local_address_line6?: string;
                                                                local_address_line7?: string;
                                                                local_address_line8?: string;
                                                                local_address_line9?: string;
                                                                postal_code?: string;
                                                                address_type_list: Array<{
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                }>;
                                                                is_primary: boolean;
                                                                is_public: boolean;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            working_calendar_id?: string;
                                                            updated_at?: string;
                                                            suspected_rehiring?: boolean;
                                                            condition_worker?: boolean;
                                                            custom_fields?: Array<{
                                                                custom_api_name: string;
                                                                name?: {
                                                                    zh_cn?: string;
                                                                    en_us?: string;
                                                                };
                                                                type?: number;
                                                                value: string;
                                                            }>;
                                                            position_id?: string;
                                                            company_manual_updated?: boolean;
                                                            pay_group?: {
                                                                name?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                                id?: string;
                                                            };
                                                            whether_the_information_is_abnormal?: boolean;
                                                            abnormal_reason?: Array<{
                                                                descriptions?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            has_offer_salary?: boolean;
                                                            recruitment_project_id?: string;
                                                            work_shift?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            created_at?: string;
                                                            created_by?: string;
                                                            updated_by?: string;
                                                            seniority_date?: string;
                                                            background_check_order_id?: string;
                                                            background_check_order_name?: string;
                                                            background_check_order_package_name?: string;
                                                            background_check_order_result?: string;
                                                            background_check_order_supplier_name?: string;
                                                            background_check_order_account_name?: string;
                                                            background_check_order_start_time?: string;
                                                            background_check_order_complete_time?: string;
                                                            background_check_order_status?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            seniority_adjust_information_list?: Array<{
                                                                seniority_adjustment?: number;
                                                                seniority_adjustment_type?: {
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                };
                                                                reasons_for_seniority_adjustment?: string;
                                                                start_date?: string;
                                                                end_date?: string;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            }>;
                                                            notice_period_positive_voluntary?: {
                                                                wk_id?: string;
                                                                value?: number;
                                                                value_unit?: string;
                                                                name?: {
                                                                    lang: string;
                                                                    value: string;
                                                                };
                                                            };
                                                            notice_period_probation_involuntary?: {
                                                                wk_id?: string;
                                                                value?: number;
                                                                value_unit?: string;
                                                                name?: {
                                                                    lang: string;
                                                                    value: string;
                                                                };
                                                            };
                                                            notice_period_positive_involuntary?: {
                                                                wk_id?: string;
                                                                value?: number;
                                                                value_unit?: string;
                                                                name?: {
                                                                    lang: string;
                                                                    value: string;
                                                                };
                                                            };
                                                            notice_period_probation_voluntary?: {
                                                                wk_id?: string;
                                                                value?: number;
                                                                value_unit?: string;
                                                                name?: {
                                                                    lang: string;
                                                                    value: string;
                                                                };
                                                            };
                                                            working_hours_type_manual_updated?: boolean;
                                                            is_over_due?: boolean;
                                                            task_completed?: boolean;
                                                            expected_graduate_date?: string;
                                                            service_company?: string;
                                                            pathway?: string;
                                                            default_cost_center?: {
                                                                cost_center_id?: string;
                                                                effective_time?: string;
                                                                is_herit?: boolean;
                                                                inherit_source?: string;
                                                            };
                                                            cost_allocation?: {
                                                                effective_time?: string;
                                                                expiration_time?: string;
                                                                cost_center_rates?: Array<{
                                                                    cost_center_id?: string;
                                                                    rate?: number;
                                                                    new_rate?: number;
                                                                }>;
                                                            };
                                                        };
                                                        onboarding_info?: {
                                                            offer_id?: string;
                                                            offer_hr_id?: string;
                                                            entry_mode?: string;
                                                            onboarding_date?: string;
                                                            ats_application_id?: string;
                                                            recruitment_type?: string;
                                                            onboarding_location_id?: string;
                                                            company_sponsored_visa?: boolean;
                                                            onboarding_status?:
                                                                | "preboarding"
                                                                | "deleted"
                                                                | "day_one"
                                                                | "withdrawn"
                                                                | "completed";
                                                            onboarding_task_list?: Array<{
                                                                task_name?: string;
                                                                task_status?:
                                                                    | "initiating"
                                                                    | "terminated"
                                                                    | "exception"
                                                                    | "in_progress"
                                                                    | "not_started"
                                                                    | "skipped"
                                                                    | "uninitialized"
                                                                    | "failed"
                                                                    | "in_review"
                                                                    | "rejected"
                                                                    | "completed";
                                                                operator_id?: string;
                                                                task_code?: string;
                                                            }>;
                                                            onboarding_address?: {
                                                                full_address_local_script?: string;
                                                                full_address_western_script?: string;
                                                                address_id?: string;
                                                                country_region_id: string;
                                                                region_id?: string;
                                                                city_id?: string;
                                                                distinct_id?: string;
                                                                city_id_v2?: string;
                                                                district_id_v2?: string;
                                                                address_line1?: string;
                                                                address_line2?: string;
                                                                address_line3?: string;
                                                                address_line4?: string;
                                                                address_line5?: string;
                                                                address_line6?: string;
                                                                address_line7?: string;
                                                                address_line8?: string;
                                                                address_line9?: string;
                                                                local_address_line1?: string;
                                                                local_address_line2?: string;
                                                                local_address_line3?: string;
                                                                local_address_line4?: string;
                                                                local_address_line5?: string;
                                                                local_address_line6?: string;
                                                                local_address_line7?: string;
                                                                local_address_line8?: string;
                                                                local_address_line9?: string;
                                                                postal_code?: string;
                                                                address_type_list: Array<{
                                                                    enum_name: string;
                                                                    display?: Array<{
                                                                        lang: string;
                                                                        value: string;
                                                                    }>;
                                                                }>;
                                                                is_primary: boolean;
                                                                is_public: boolean;
                                                                custom_fields?: Array<{
                                                                    custom_api_name: string;
                                                                    name?: {
                                                                        zh_cn?: string;
                                                                        en_us?: string;
                                                                    };
                                                                    type?: number;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            flow_name?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                            flow_id?: string;
                                                            check_in_time?: string;
                                                            check_in_method?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                        };
                                                        probation_info?: {
                                                            probation_start_date?: string;
                                                            probation_end_date?: string;
                                                            probation_period?: number;
                                                        };
                                                        contract_info?: {
                                                            contract_start_date?: string;
                                                            contract_end_date?: string;
                                                            contract_type?: string;
                                                            duration_type?: string;
                                                            signing_type?: string;
                                                            contract_file_ids?: Array<string>;
                                                        };
                                                        pre_hire_id?: string;
                                                        people_fields_json?: string;
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=pre_hire&version=v2 document }
                 *
                 * 根据部门 ID，上级部门查询部门列表
                 */
                search: async (
                    payload?: {
                        data?: {
                            worker_ids?: Array<string>;
                            pre_hire_ids?: Array<string>;
                            person_ids?: Array<string>;
                            onboarding_date_start?: string;
                            onboarding_date_end?: string;
                            updated_date_start?: string;
                            updated_date_end?: string;
                            onboarding_location_ids?: Array<string>;
                            onboarding_status?:
                                | "preboarding"
                                | "deleted"
                                | "day_one"
                                | "withdrawn"
                                | "completed";
                            department_ids?: Array<string>;
                            direct_manager_ids?: Array<string>;
                            employee_type_ids?: Array<string>;
                            employee_subtype_ids?: Array<string>;
                            job_family_ids?: Array<string>;
                            key_word?: string;
                            condition_worker?: boolean;
                            rehire?: "to_be_confirmed" | "no" | "yes";
                            fields?: Array<string>;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        person_info?: {
                                            person_id?: string;
                                            phone_number?: string;
                                            legal_name?: string;
                                            preferred_name?: string;
                                            preferred_local_full_name?: string;
                                            preferred_english_full_name?: string;
                                            name_list?: Array<{
                                                local_primary?: string;
                                                local_first_name?: string;
                                                country_region_id: string;
                                                name_type: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_first_name_2?: string;
                                                local_primary_2?: string;
                                                additional_name?: string;
                                                additional_name_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                first_name?: string;
                                                full_name?: string;
                                                hereditary?: string;
                                                custom_name?: string;
                                                custom_local_name?: string;
                                                middle_name?: string;
                                                name_primary?: string;
                                                secondary?: string;
                                                tertiary?: string;
                                                social?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                title?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                local_middle_name?: string;
                                                local_secondary?: string;
                                                display_name_local_and_western_script?: string;
                                                display_name_local_script?: string;
                                                display_name_western_script?: string;
                                            }>;
                                            gender?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            date_of_birth?: string;
                                            nationality_id?: string;
                                            nationality_id_v2?: string;
                                            additional_nationalities?: Array<{
                                                nationality_id?: string;
                                                name?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                alpha_2_code?: string;
                                                alpha_3_code?: string;
                                                numeric_code?: number;
                                                country_region_id?: string;
                                                status?: number;
                                            }>;
                                            citizenship_status?: Array<{
                                                id?: string;
                                                country_region_id?: string;
                                                active?: boolean;
                                                name?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                citizenship_status?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                view_order?: string;
                                            }>;
                                            race?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            marital_status?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            phone_list?: Array<{
                                                international_area_code?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_number: string;
                                                formatted_phone_number?: string;
                                                device_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_usage?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                is_primary?: boolean;
                                                is_public?: boolean;
                                            }>;
                                            address_list?: Array<{
                                                full_address_local_script?: string;
                                                full_address_western_script?: string;
                                                address_id?: string;
                                                country_region_id: string;
                                                region_id?: string;
                                                city_id?: string;
                                                distinct_id?: string;
                                                city_id_v2?: string;
                                                district_id_v2?: string;
                                                address_line1?: string;
                                                address_line2?: string;
                                                address_line3?: string;
                                                address_line4?: string;
                                                address_line5?: string;
                                                address_line6?: string;
                                                address_line7?: string;
                                                address_line8?: string;
                                                address_line9?: string;
                                                local_address_line1?: string;
                                                local_address_line2?: string;
                                                local_address_line3?: string;
                                                local_address_line4?: string;
                                                local_address_line5?: string;
                                                local_address_line6?: string;
                                                local_address_line7?: string;
                                                local_address_line8?: string;
                                                local_address_line9?: string;
                                                postal_code?: string;
                                                address_type_list: Array<{
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                }>;
                                                is_primary: boolean;
                                                is_public: boolean;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            email_list?: Array<{
                                                email: string;
                                                is_primary?: boolean;
                                                is_public?: boolean;
                                                email_usage?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                            }>;
                                            work_experience_list?: Array<{
                                                company_organization?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                department?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                job?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                description?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                start_date?: string;
                                                end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            education_list?: Array<{
                                                school: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                level_of_education?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                start_date?: string;
                                                end_date?: string;
                                                field_of_study?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                degree?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                school_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                field_of_study_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                country_region_id?: string;
                                                expected_end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            bank_account_list?: Array<{
                                                bank_name?: string;
                                                bank_account_number: string;
                                                account_holder: string;
                                                bank?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                bank_identification_code?: string;
                                                branch_name?: string;
                                                bank_id?: string;
                                                branch_id?: string;
                                                country_region_id?: string;
                                                bank_account_usage?: Array<{
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                }>;
                                                bank_account_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                payment_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                payment_rate?: string;
                                                payment_amount?: string;
                                                priority?: number;
                                                currency_id?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            national_id_list?: Array<{
                                                national_id_type_id: string;
                                                national_id_number: string;
                                                issue_date?: string;
                                                expiration_date?: string;
                                                country_region_id: string;
                                                issued_by?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            dependent_list?: Array<{
                                                id?: string;
                                                name?: {
                                                    local_primary?: string;
                                                    local_first_name?: string;
                                                    country_region_id: string;
                                                    name_type: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    local_first_name_2?: string;
                                                    local_primary_2?: string;
                                                    additional_name?: string;
                                                    additional_name_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    first_name?: string;
                                                    full_name?: string;
                                                    hereditary?: string;
                                                    custom_name?: string;
                                                    custom_local_name?: string;
                                                    middle_name?: string;
                                                    name_primary?: string;
                                                    secondary?: string;
                                                    tertiary?: string;
                                                    social?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    title?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    local_middle_name?: string;
                                                    local_secondary?: string;
                                                    display_name_local_and_western_script?: string;
                                                    display_name_local_script?: string;
                                                    display_name_western_script?: string;
                                                };
                                                relationship: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                gender?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                date_of_birth?: string;
                                                nationality_id?: string;
                                                national_id_list?: Array<{
                                                    national_id_type_id: string;
                                                    national_id_number: string;
                                                    issue_date?: string;
                                                    expiration_date?: string;
                                                    country_region_id: string;
                                                    issued_by?: string;
                                                    custom_fields?: Array<{
                                                        custom_api_name: string;
                                                        name?: {
                                                            zh_cn?: string;
                                                            en_us?: string;
                                                        };
                                                        type?: number;
                                                        value: string;
                                                    }>;
                                                }>;
                                                spouses_working_status?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                is_this_person_covered_by_health_insurance?: boolean;
                                                is_this_person_allowed_for_tax_deduction?: boolean;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                                dependent_name?: string;
                                                employer?: string;
                                                job?: string;
                                                phone?: {
                                                    international_area_code?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_number: string;
                                                    formatted_phone_number?: string;
                                                    device_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_usage?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    is_primary?: boolean;
                                                    is_public?: boolean;
                                                };
                                                address?: {
                                                    full_address_local_script?: string;
                                                    full_address_western_script?: string;
                                                    address_id?: string;
                                                    country_region_id: string;
                                                    region_id?: string;
                                                    city_id?: string;
                                                    distinct_id?: string;
                                                    address_line1?: string;
                                                    address_line2?: string;
                                                    address_line3?: string;
                                                    address_line4?: string;
                                                    address_line5?: string;
                                                    address_line6?: string;
                                                    address_line7?: string;
                                                    address_line8?: string;
                                                    address_line9?: string;
                                                    local_address_line1?: string;
                                                    local_address_line2?: string;
                                                    local_address_line3?: string;
                                                    local_address_line4?: string;
                                                    local_address_line5?: string;
                                                    local_address_line6?: string;
                                                    local_address_line7?: string;
                                                    local_address_line8?: string;
                                                    local_address_line9?: string;
                                                    postal_code?: string;
                                                    address_type_list: Array<{
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    }>;
                                                    is_primary: boolean;
                                                    is_public: boolean;
                                                    custom_fields?: Array<{
                                                        custom_api_name: string;
                                                        name?: {
                                                            zh_cn?: string;
                                                            en_us?: string;
                                                        };
                                                        type?: number;
                                                        value: string;
                                                    }>;
                                                };
                                                birth_certificate_of_child?: Array<{
                                                    id?: string;
                                                    name?: string;
                                                }>;
                                            }>;
                                            emergency_contact_list?: Array<{
                                                id?: string;
                                                name?: {
                                                    local_primary?: string;
                                                    local_first_name?: string;
                                                    country_region_id: string;
                                                    name_type: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    local_first_name_2?: string;
                                                    local_primary_2?: string;
                                                    additional_name?: string;
                                                    additional_name_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    first_name?: string;
                                                    full_name?: string;
                                                    hereditary?: string;
                                                    custom_name?: string;
                                                    custom_local_name?: string;
                                                    middle_name?: string;
                                                    name_primary?: string;
                                                    secondary?: string;
                                                    tertiary?: string;
                                                    social?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    title?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    local_middle_name?: string;
                                                    local_secondary?: string;
                                                    display_name_local_and_western_script?: string;
                                                    display_name_local_script?: string;
                                                    display_name_western_script?: string;
                                                };
                                                relationship?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                phone_ist?: Array<{
                                                    international_area_code?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_number: string;
                                                    formatted_phone_number?: string;
                                                    device_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_usage?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    is_primary?: boolean;
                                                    is_public?: boolean;
                                                }>;
                                                phone_list?: Array<{
                                                    international_area_code?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_number: string;
                                                    formatted_phone_number?: string;
                                                    device_type?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    phone_usage?: {
                                                        enum_name: string;
                                                        display?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                    };
                                                    is_primary?: boolean;
                                                    is_public?: boolean;
                                                }>;
                                                legal_name?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                                is_primary?: boolean;
                                            }>;
                                            date_entered_workforce?: string;
                                            working_years?: number;
                                            profile_image_id?: string;
                                            email_address?: string;
                                            age?: number;
                                            highest_level_of_education?: {
                                                school: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                level_of_education?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                start_date?: string;
                                                end_date?: string;
                                                field_of_study?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                degree?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                school_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                field_of_study_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                country_region_id?: string;
                                                expected_end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            };
                                            highest_degree_of_education?: {
                                                school: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                level_of_education?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                start_date?: string;
                                                end_date?: string;
                                                field_of_study?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                degree?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                school_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                field_of_study_name?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                country_region_id?: string;
                                                expected_end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            };
                                            personal_profile?: Array<{
                                                personal_profile_id?: string;
                                                personal_profile_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                files?: Array<{
                                                    id?: string;
                                                    name?: string;
                                                }>;
                                            }>;
                                            talent_id?: string;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                            national_id_number?: string;
                                            family_address?: string;
                                            person_info_chns?: Array<{
                                                native_region?: string;
                                                hukou_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                hukou_location?: string;
                                                political_affiliations?: Array<{
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                }>;
                                            }>;
                                            born_country_region?: string;
                                            is_disabled?: boolean;
                                            disable_card_number?: string;
                                            is_martyr_family?: boolean;
                                            martyr_card_number?: string;
                                            is_old_alone?: boolean;
                                            resident_taxes?: Array<{
                                                year_resident_tax: string;
                                                resident_status?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                tax_country_region_id?: string;
                                                custom_fields?: Array<{
                                                    field_name: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            religion?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            working_years_v2?: number;
                                            created_at?: string;
                                            updated_at?: string;
                                            created_by?: string;
                                            updated_by?: string;
                                            bank_account_number?: string;
                                            passport_number?: string;
                                            former_employer?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        employment_info?: {
                                            department_id?: string;
                                            cost_center_rates?: Array<{
                                                cost_center_id?: string;
                                                rate?: number;
                                                new_rate?: number;
                                            }>;
                                            office_location_id?: string;
                                            work_location_id?: string;
                                            work_station?: string;
                                            worker_id?: string;
                                            compensation_type?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            direct_leader_id?: string;
                                            dotted_line_manager_id?: string;
                                            job_id?: string;
                                            job_family_id?: string;
                                            job_level_id?: string;
                                            job_grade_id?: string;
                                            job_title?: string;
                                            employee_type_id?: string;
                                            employee_subtype_id?: string;
                                            employment_type?: string;
                                            work_email?: string;
                                            company_id?: string;
                                            social_security_city_id?: string;
                                            non_compete_covenant?: boolean;
                                            weekly_working_hours?: number;
                                            rehire?:
                                                | "to_be_confirmed"
                                                | "no"
                                                | "yes";
                                            rehire_employment_id?: string;
                                            working_hours_type?: string;
                                            weekly_working_hours_v2?: number;
                                            office_address?: {
                                                full_address_local_script?: string;
                                                full_address_western_script?: string;
                                                address_id?: string;
                                                country_region_id: string;
                                                region_id?: string;
                                                city_id?: string;
                                                distinct_id?: string;
                                                city_id_v2?: string;
                                                district_id_v2?: string;
                                                address_line1?: string;
                                                address_line2?: string;
                                                address_line3?: string;
                                                address_line4?: string;
                                                address_line5?: string;
                                                address_line6?: string;
                                                address_line7?: string;
                                                address_line8?: string;
                                                address_line9?: string;
                                                local_address_line1?: string;
                                                local_address_line2?: string;
                                                local_address_line3?: string;
                                                local_address_line4?: string;
                                                local_address_line5?: string;
                                                local_address_line6?: string;
                                                local_address_line7?: string;
                                                local_address_line8?: string;
                                                local_address_line9?: string;
                                                postal_code?: string;
                                                address_type_list: Array<{
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                }>;
                                                is_primary: boolean;
                                                is_public: boolean;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            };
                                            working_calendar_id?: string;
                                            updated_at?: string;
                                            suspected_rehiring?: boolean;
                                            condition_worker?: boolean;
                                            custom_fields?: Array<{
                                                custom_api_name: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                type?: number;
                                                value: string;
                                            }>;
                                            position_id?: string;
                                            company_manual_updated?: boolean;
                                            pay_group?: {
                                                name?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                                id?: string;
                                            };
                                            whether_the_information_is_abnormal?: boolean;
                                            abnormal_reason?: Array<{
                                                descriptions?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            }>;
                                            has_offer_salary?: boolean;
                                            recruitment_project_id?: string;
                                            work_shift?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            created_at?: string;
                                            created_by?: string;
                                            updated_by?: string;
                                            seniority_date?: string;
                                            background_check_order_id?: string;
                                            background_check_order_name?: string;
                                            background_check_order_package_name?: string;
                                            background_check_order_result?: string;
                                            background_check_order_supplier_name?: string;
                                            background_check_order_account_name?: string;
                                            background_check_order_start_time?: string;
                                            background_check_order_complete_time?: string;
                                            background_check_order_status?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            seniority_adjust_information_list?: Array<{
                                                seniority_adjustment?: number;
                                                seniority_adjustment_type?: {
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                };
                                                reasons_for_seniority_adjustment?: string;
                                                start_date?: string;
                                                end_date?: string;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            }>;
                                            notice_period_positive_voluntary?: {
                                                wk_id?: string;
                                                value?: number;
                                                value_unit?: string;
                                                name?: {
                                                    lang: string;
                                                    value: string;
                                                };
                                            };
                                            notice_period_probation_involuntary?: {
                                                wk_id?: string;
                                                value?: number;
                                                value_unit?: string;
                                                name?: {
                                                    lang: string;
                                                    value: string;
                                                };
                                            };
                                            notice_period_positive_involuntary?: {
                                                wk_id?: string;
                                                value?: number;
                                                value_unit?: string;
                                                name?: {
                                                    lang: string;
                                                    value: string;
                                                };
                                            };
                                            notice_period_probation_voluntary?: {
                                                wk_id?: string;
                                                value?: number;
                                                value_unit?: string;
                                                name?: {
                                                    lang: string;
                                                    value: string;
                                                };
                                            };
                                            working_hours_type_manual_updated?: boolean;
                                            is_over_due?: boolean;
                                            task_completed?: boolean;
                                            expected_graduate_date?: string;
                                            service_company?: string;
                                            pathway?: string;
                                            default_cost_center?: {
                                                cost_center_id?: string;
                                                effective_time?: string;
                                                is_herit?: boolean;
                                                inherit_source?: string;
                                            };
                                            cost_allocation?: {
                                                effective_time?: string;
                                                expiration_time?: string;
                                                cost_center_rates?: Array<{
                                                    cost_center_id?: string;
                                                    rate?: number;
                                                    new_rate?: number;
                                                }>;
                                            };
                                        };
                                        onboarding_info?: {
                                            offer_id?: string;
                                            offer_hr_id?: string;
                                            entry_mode?: string;
                                            onboarding_date?: string;
                                            ats_application_id?: string;
                                            recruitment_type?: string;
                                            onboarding_location_id?: string;
                                            company_sponsored_visa?: boolean;
                                            onboarding_status?:
                                                | "preboarding"
                                                | "deleted"
                                                | "day_one"
                                                | "withdrawn"
                                                | "completed";
                                            onboarding_task_list?: Array<{
                                                task_name?: string;
                                                task_status?:
                                                    | "initiating"
                                                    | "terminated"
                                                    | "exception"
                                                    | "in_progress"
                                                    | "not_started"
                                                    | "skipped"
                                                    | "uninitialized"
                                                    | "failed"
                                                    | "in_review"
                                                    | "rejected"
                                                    | "completed";
                                                operator_id?: string;
                                                task_code?: string;
                                            }>;
                                            onboarding_address?: {
                                                full_address_local_script?: string;
                                                full_address_western_script?: string;
                                                address_id?: string;
                                                country_region_id: string;
                                                region_id?: string;
                                                city_id?: string;
                                                distinct_id?: string;
                                                city_id_v2?: string;
                                                district_id_v2?: string;
                                                address_line1?: string;
                                                address_line2?: string;
                                                address_line3?: string;
                                                address_line4?: string;
                                                address_line5?: string;
                                                address_line6?: string;
                                                address_line7?: string;
                                                address_line8?: string;
                                                address_line9?: string;
                                                local_address_line1?: string;
                                                local_address_line2?: string;
                                                local_address_line3?: string;
                                                local_address_line4?: string;
                                                local_address_line5?: string;
                                                local_address_line6?: string;
                                                local_address_line7?: string;
                                                local_address_line8?: string;
                                                local_address_line9?: string;
                                                postal_code?: string;
                                                address_type_list: Array<{
                                                    enum_name: string;
                                                    display?: Array<{
                                                        lang: string;
                                                        value: string;
                                                    }>;
                                                }>;
                                                is_primary: boolean;
                                                is_public: boolean;
                                                custom_fields?: Array<{
                                                    custom_api_name: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                    type?: number;
                                                    value: string;
                                                }>;
                                            };
                                            flow_name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                            flow_id?: string;
                                            check_in_time?: string;
                                            check_in_method?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                        };
                                        probation_info?: {
                                            probation_start_date?: string;
                                            probation_end_date?: string;
                                            probation_period?: number;
                                        };
                                        contract_info?: {
                                            contract_start_date?: string;
                                            contract_end_date?: string;
                                            contract_type?: string;
                                            duration_type?: string;
                                            signing_type?: string;
                                            contract_file_ids?: Array<string>;
                                        };
                                        pre_hire_id?: string;
                                        people_fields_json?: string;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/pre_hires/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=transit_task&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=transit_task&project=corehr&resource=pre_hire&version=v2 document }
                 *
                 * 任务流转
                 */
                transitTask: async (
                    payload?: {
                        data: { task_id: string };
                        path: { pre_hire_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { success?: boolean };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/pre_hires/:pre_hire_id/transit_task`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=withdraw_onboarding&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=withdraw_onboarding&project=corehr&resource=pre_hire&version=v2 document }
                 */
                withdrawOnboarding: async (
                    payload?: {
                        data: { pre_hire_id: string; withdraw_reason: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { success?: boolean };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/pre_hires/withdraw_onboarding`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * probation.assessment
             */
            probationAssessment: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=probation.assessment&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=corehr&resource=probation.assessment&version=v2 document }
                 */
                create: async (
                    payload?: {
                        data: {
                            employment_id: string;
                            assessments: Array<{
                                assessment_status:
                                    | "not_started"
                                    | "in_process"
                                    | "completed"
                                    | "no_need";
                                assessment_result?: "approved" | "rejected";
                                assessment_score?: number;
                                assessment_grade?: string;
                                assessment_comment?: string;
                                assessment_detail?: string;
                                is_final_asssessment: boolean;
                            }>;
                        };
                        params?: {
                            client_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { assessment_ids?: Array<string> };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/probation/assessments`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=probation.assessment&apiName=delete&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=delete&project=corehr&resource=probation.assessment&version=v2 document }
                 */
                delete: async (
                    payload?: {
                        path: { assessment_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/probation/assessments/:assessment_id`,
                                path
                            ),
                            method: "DELETE",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=probation.assessment&apiName=patch&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=corehr&resource=probation.assessment&version=v2 document }
                 */
                patch: async (
                    payload?: {
                        data: {
                            assessment_status:
                                | "not_started"
                                | "in_process"
                                | "completed"
                                | "no_need";
                            assessment_result?: "approved" | "rejected";
                            assessment_score?: number;
                            assessment_grade?: string;
                            assessment_comment?: string;
                            assessment_detail?: string;
                            is_final_asssessment: boolean;
                        };
                        params?: { client_token?: string };
                        path: { assessment_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/probation/assessments/:assessment_id`,
                                path
                            ),
                            method: "PATCH",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * probation
             */
            probation: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=probation&apiName=enable_disable_assessment&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=enable_disable_assessment&project=corehr&resource=probation&version=v2 document }
                 */
                enableDisableAssessment: async (
                    payload?: {
                        data: { active: boolean; app_url?: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/probation/enable_disable_assessment`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                searchWithIterator: async (
                    payload?: {
                        data?: {
                            employment_ids?: Array<string>;
                            department_ids?: Array<string>;
                            probation_start_date_start?: string;
                            probation_start_date_end?: string;
                            probation_expected_end_date_start?: string;
                            probation_expected_end_date_end?: string;
                            actual_probation_end_date_start?: string;
                            actual_probation_end_date_end?: string;
                            initiating_time_start?: string;
                            initiating_time_end?: string;
                            probation_status?:
                                | "pending"
                                | "rejected"
                                | "waiting"
                                | "approved"
                                | "converted"
                                | "offboarded";
                            final_assessment_result?: "approved" | "rejected";
                            final_assessment_grade?: string;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/probation/search`,
                                    path
                                ),
                                method: "POST",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        employment_id?: string;
                                                        probation_id?: string;
                                                        probation_start_date?: string;
                                                        probation_expected_end_date?: string;
                                                        actual_probation_end_date?: string;
                                                        initiating_time?: string;
                                                        submission_type?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        initiator_id?: string;
                                                        probation_status?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        self_review?: string;
                                                        notes?: string;
                                                        process_id?: string;
                                                        converted_via_bpm?: boolean;
                                                        custom_fields?: Array<{
                                                            custom_api_name: string;
                                                            name?: {
                                                                zh_cn?: string;
                                                                en_us?: string;
                                                            };
                                                            type?: number;
                                                            value: string;
                                                        }>;
                                                        final_assessment_status?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        final_assessment_result?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        final_assessment_score?: number;
                                                        final_assessment_grade?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        final_assessment_comment?: string;
                                                        final_assessment_detail?: string;
                                                        assessments?: Array<{
                                                            assessment_id?: string;
                                                            assessment_status?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            assessment_result?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            assessment_score?: number;
                                                            assessment_grade?: {
                                                                enum_name: string;
                                                                display?: Array<{
                                                                    lang: string;
                                                                    value: string;
                                                                }>;
                                                            };
                                                            assessment_comment?: string;
                                                            assessment_detail?: string;
                                                            is_final_asssessment?: boolean;
                                                        }>;
                                                        probation_extend_expected_end_date?: string;
                                                        extended_probation_period_duration?: number;
                                                        extended_probation_period_unit?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                        probation_outcome?: {
                                                            enum_name: string;
                                                            display?: Array<{
                                                                lang: string;
                                                                value: string;
                                                            }>;
                                                        };
                                                    }>;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=probation&apiName=search&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=probation&version=v2 document }
                 */
                search: async (
                    payload?: {
                        data?: {
                            employment_ids?: Array<string>;
                            department_ids?: Array<string>;
                            probation_start_date_start?: string;
                            probation_start_date_end?: string;
                            probation_expected_end_date_start?: string;
                            probation_expected_end_date_end?: string;
                            actual_probation_end_date_start?: string;
                            actual_probation_end_date_end?: string;
                            initiating_time_start?: string;
                            initiating_time_end?: string;
                            probation_status?:
                                | "pending"
                                | "rejected"
                                | "waiting"
                                | "approved"
                                | "converted"
                                | "offboarded";
                            final_assessment_result?: "approved" | "rejected";
                            final_assessment_grade?: string;
                        };
                        params: {
                            page_size: number;
                            page_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        employment_id?: string;
                                        probation_id?: string;
                                        probation_start_date?: string;
                                        probation_expected_end_date?: string;
                                        actual_probation_end_date?: string;
                                        initiating_time?: string;
                                        submission_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        initiator_id?: string;
                                        probation_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        self_review?: string;
                                        notes?: string;
                                        process_id?: string;
                                        converted_via_bpm?: boolean;
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                        final_assessment_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        final_assessment_result?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        final_assessment_score?: number;
                                        final_assessment_grade?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        final_assessment_comment?: string;
                                        final_assessment_detail?: string;
                                        assessments?: Array<{
                                            assessment_id?: string;
                                            assessment_status?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            assessment_result?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            assessment_score?: number;
                                            assessment_grade?: {
                                                enum_name: string;
                                                display?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                            assessment_comment?: string;
                                            assessment_detail?: string;
                                            is_final_asssessment?: boolean;
                                        }>;
                                        probation_extend_expected_end_date?: string;
                                        extended_probation_period_duration?: number;
                                        extended_probation_period_unit?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        probation_outcome?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/probation/search`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=probation&apiName=submit&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=submit&project=corehr&resource=probation&version=v2 document }
                 */
                submit: async (
                    payload?: {
                        data: {
                            employment_id: string;
                            conversion_mode: number;
                            actual_probation_end_date?: string;
                            submission_type:
                                | "self_submission"
                                | "system"
                                | "hr_submission";
                            initiator_id?: string;
                            notes?: string;
                            self_review?: string;
                            custom_fields?: Array<{
                                custom_api_name: string;
                                name?: { zh_cn?: string; en_us?: string };
                                type?: number;
                                value: string;
                            }>;
                        };
                        params?: {
                            client_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    probation_info?: {
                                        employment_id?: string;
                                        probation_id?: string;
                                        probation_start_date?: string;
                                        probation_expected_end_date?: string;
                                        actual_probation_end_date?: string;
                                        initiating_time?: string;
                                        submission_type?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        initiator_id?: string;
                                        probation_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        self_review?: string;
                                        notes?: string;
                                        process_id?: string;
                                        converted_via_bpm?: boolean;
                                        custom_fields?: Array<{
                                            custom_api_name: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            type?: number;
                                            value: string;
                                        }>;
                                        final_assessment_status?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        final_assessment_result?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        final_assessment_score?: number;
                                        final_assessment_grade?: {
                                            enum_name: string;
                                            display?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        final_assessment_comment?: string;
                                        final_assessment_detail?: string;
                                    };
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/probation/submit`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=probation&apiName=withdraw&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=withdraw&project=corehr&resource=probation&version=v2 document }
                 */
                withdraw: async (
                    payload?: {
                        data: { employment_id: string };
                        params?: {
                            client_token?: string;
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/probation/withdraw`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * process.approver
             */
            processApprover: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=process.approver&apiName=update&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=update&project=corehr&resource=process.approver&version=v2 document }
                 */
                update: async (
                    payload?: {
                        data: {
                            status: number;
                            user_id?: string;
                            system_approval?: boolean;
                            reason?: string;
                            field_values_v2?: Array<{
                                variable_api_name?: string;
                                variable_value?: {
                                    text_value?: string;
                                    bool_value?: boolean;
                                    number_value?: string;
                                    enum_value?: string;
                                    date_value?: string;
                                    date_time_value?: string;
                                    i18n_value?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                    };
                                    object_value?: {
                                        wk_id?: string;
                                        wk_api_name?: string;
                                    };
                                    department_value?: string;
                                    employment_value?: string;
                                    list_values?: Array<string>;
                                    file_value?: {
                                        open_file_id?: string;
                                        file_name?: string;
                                        length?: number;
                                    };
                                    record_values?: Array<{
                                        variable_api_name?: string;
                                        sub_value_key?: string;
                                        record_id?: string;
                                    }>;
                                };
                                sub_values?: Array<{
                                    key?: string;
                                    value?: {
                                        text_value?: string;
                                        bool_value?: boolean;
                                        number_value?: string;
                                        enum_value?: string;
                                        date_value?: string;
                                        date_time_value?: string;
                                        i18n_value?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        object_value?: {
                                            wk_id?: string;
                                            wk_api_name?: string;
                                        };
                                        department_value?: string;
                                        employment_value?: string;
                                        list_values?: Array<string>;
                                        file_value?: {
                                            open_file_id?: string;
                                            file_name?: string;
                                            length?: number;
                                        };
                                        record_values?: Array<{
                                            variable_api_name?: string;
                                            sub_value_key?: string;
                                            record_id?: string;
                                        }>;
                                    };
                                }>;
                            }>;
                        };
                        params?: {
                            user_id_type?:
                                | "open_id"
                                | "union_id"
                                | "user_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                        path: { process_id: string; approver_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: { code: number; msg?: string };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/processes/:process_id/approvers/:approver_id`,
                                path
                            ),
                            method: "PUT",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * process.extra
             */
            processExtra: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=process.extra&apiName=update&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=update&project=corehr&resource=process.extra&version=v2 document }
                 */
                update: async (
                    payload?: {
                        data: {
                            operator?: string;
                            node_id?: string;
                            approver_id?: string;
                            extra_type: number;
                            approval_type?: number;
                            extra_user_ids: Array<string>;
                            remark?: string;
                            system_user?: boolean;
                        };
                        params?: {
                            user_id_type?:
                                | "open_id"
                                | "union_id"
                                | "user_id"
                                | "people_corehr_id";
                        };
                        path: { process_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/processes/:process_id/extra`,
                                path
                            ),
                            method: "PUT",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * process.form_variable_data
             */
            processFormVariableData: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=process.form_variable_data&apiName=get&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=corehr&resource=process.form_variable_data&version=v2 document }
                 */
                get: async (
                    payload?: {
                        params?: {
                            user_id_type?:
                                | "open_id"
                                | "union_id"
                                | "user_id"
                                | "people_corehr_id";
                            department_id_type?:
                                | "open_department_id"
                                | "department_id"
                                | "people_corehr_department_id";
                        };
                        path: { process_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    field_variable_values?: Array<{
                                        variable_api_name?: string;
                                        variable_name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        variable_value?: {
                                            text_value?: string;
                                            bool_value?: boolean;
                                            number_value?: string;
                                            enum_value?: string;
                                            date_value?: string;
                                            date_time_value?: string;
                                            i18n_value?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_value?: {
                                                wk_id?: string;
                                                wk_api_name?: string;
                                            };
                                            user_value?: string;
                                            department_value?: string;
                                            record_values?: Array<{
                                                variable_api_name?: string;
                                                sub_value_key?: string;
                                                record_id?: string;
                                            }>;
                                            employment_value?: string;
                                            list_values?: Array<string>;
                                            file_value?: {
                                                open_file_id?: string;
                                                file_name?: string;
                                                length?: string;
                                                mime_type?: string;
                                            };
                                        };
                                        sub_values?: Array<{
                                            key?: string;
                                            value?: {
                                                text_value?: string;
                                                bool_value?: boolean;
                                                number_value?: string;
                                                enum_value?: string;
                                                date_value?: string;
                                                date_time_value?: string;
                                                i18n_value?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                                object_value?: {
                                                    wk_id?: string;
                                                    wk_api_name?: string;
                                                };
                                                user_value?: string;
                                                department_value?: string;
                                                record_values?: Array<{
                                                    variable_api_name?: string;
                                                    sub_value_key?: string;
                                                    record_id?: string;
                                                }>;
                                                employment_value?: string;
                                                list_values?: Array<string>;
                                                file_value?: {
                                                    open_file_id?: string;
                                                    file_name?: string;
                                                    length?: string;
                                                    mime_type?: string;
                                                };
                                            };
                                        }>;
                                    }>;
                                    process_id?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/processes/:process_id/form_variable_data`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * process
             */
            process: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=process&apiName=get&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=corehr&resource=process&version=v2 document }
                 */
                get: async (
                    payload?: {
                        params?: {
                            user_id_type?:
                                | "user_id"
                                | "union_id"
                                | "open_id"
                                | "people_corehr_id";
                        };
                        path: { process_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    process_id?: string;
                                    status?: number;
                                    flow_template_id?: string;
                                    flow_template_name?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                    };
                                    flow_definition_id?: string;
                                    flow_definition_name?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                    };
                                    initiator_id?: string;
                                    initiator_name?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                    };
                                    create_time?: string;
                                    complete_time?: string;
                                    start_links?: {
                                        web_link?: string;
                                        pc_link?: string;
                                        mobile_link?: string;
                                    };
                                    abstracts?: Array<{
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        value?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    }>;
                                    todos?: Array<{
                                        approver_id?: string;
                                        type?: number;
                                        links?: {
                                            web_link?: string;
                                            pc_link?: string;
                                            mobile_link?: string;
                                        };
                                        operator_id?: string;
                                        operator_name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        node_name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        create_time?: string;
                                        node_definition_id?: string;
                                    }>;
                                    cc_list?: Array<{
                                        approver_id?: string;
                                        links?: {
                                            web_link?: string;
                                            pc_link?: string;
                                            mobile_link?: string;
                                        };
                                        operator_id?: string;
                                        operator_name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        node_name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        create_time?: string;
                                        node_definition_id?: string;
                                    }>;
                                    done_list?: Array<{
                                        approver_id?: string;
                                        type?: number;
                                        status?: number;
                                        links?: {
                                            web_link?: string;
                                            pc_link?: string;
                                            mobile_link?: string;
                                        };
                                        operator_id?: string;
                                        operator_name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        node_name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        create_time?: string;
                                        complete_time?: string;
                                        node_definition_id?: string;
                                        approval_opinion?: string;
                                    }>;
                                    properties?: number;
                                    system_todos?: Array<{
                                        approver_id?: string;
                                        type?: number;
                                        links?: {
                                            web_link?: string;
                                            pc_link?: string;
                                            mobile_link?: string;
                                        };
                                        operator_name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        node_name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        create_time?: string;
                                        node_definition_id?: string;
                                    }>;
                                    system_done_list?: Array<{
                                        approver_id?: string;
                                        type?: number;
                                        status?: number;
                                        links?: {
                                            web_link?: string;
                                            pc_link?: string;
                                            mobile_link?: string;
                                        };
                                        operator_name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        node_name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        create_time?: string;
                                        complete_time?: string;
                                        node_definition_id?: string;
                                        approval_opinion?: string;
                                    }>;
                                    comment_infos?: Array<{
                                        commentor_id?: string;
                                        commentor_name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        comment_time?: string;
                                        comment_msg?: string;
                                    }>;
                                    original_process_id?: string;
                                    is_last_completed_correct_process?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/processes/:process_id`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                listWithIterator: async (
                    payload?: {
                        params: {
                            statuses?: Array<number>;
                            page_token?: string;
                            page_size: number;
                            modify_time_from: string;
                            modify_time_to: string;
                            flow_definition_id?: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/processes`,
                                    path
                                ),
                                method: "GET",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    process_ids?: Array<string>;
                                                    has_more?: boolean;
                                                    page_token?: string;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=process&apiName=list&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=corehr&resource=process&version=v2 document }
                 */
                list: async (
                    payload?: {
                        params: {
                            statuses?: Array<number>;
                            page_token?: string;
                            page_size: number;
                            modify_time_from: string;
                            modify_time_to: string;
                            flow_definition_id?: string;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    process_ids?: Array<string>;
                                    has_more?: boolean;
                                    page_token?: string;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/processes`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * process.transfer
             */
            processTransfer: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=process.transfer&apiName=update&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=update&project=corehr&resource=process.transfer&version=v2 document }
                 */
                update: async (
                    payload?: {
                        data: {
                            operator?: string;
                            to_user_id: string;
                            approver_ids: Array<string>;
                            remark?: string;
                            system_user?: boolean;
                        };
                        params?: {
                            user_id_type?:
                                | "open_id"
                                | "union_id"
                                | "user_id"
                                | "people_corehr_id";
                        };
                        path: { process_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/processes/:process_id/transfer`,
                                path
                            ),
                            method: "PUT",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * process_revoke
             */
            processRevoke: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=process_revoke&apiName=update&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=update&project=corehr&resource=process_revoke&version=v2 document }
                 */
                update: async (
                    payload?: {
                        data?: {
                            user_id?: string;
                            reason?: string;
                            system_user?: boolean;
                        };
                        params?: {
                            user_id_type?:
                                | "open_id"
                                | "union_id"
                                | "user_id"
                                | "people_corehr_id";
                        };
                        path: { process_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/process_revoke/:process_id`,
                                path
                            ),
                            method: "PUT",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * process_withdraw
             */
            processWithdraw: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=process_withdraw&apiName=update&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=update&project=corehr&resource=process_withdraw&version=v2 document }
                 */
                update: async (
                    payload?: {
                        data?: {
                            user_id?: string;
                            reason?: string;
                            system_user?: boolean;
                        };
                        params?: {
                            user_id_type?:
                                | "open_id"
                                | "union_id"
                                | "user_id"
                                | "people_corehr_id";
                        };
                        path: { process_id: string };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/process_withdraw/:process_id`,
                                path
                            ),
                            method: "PUT",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * report_detail_row
             */
            reportDetailRow: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=report_detail_row&apiName=batchDelete&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batchDelete&project=corehr&resource=report_detail_row&version=v2 document }
                 *
                 * 批量删除填报行
                 */
                batchDelete: async (
                    payload?: {
                        data: {
                            workforce_plan_id: string;
                            centralized_reporting_project_id: string;
                            items: Array<{
                                dimensions: Array<{
                                    dimension_key: string;
                                    dimension_value: string;
                                }>;
                                eai_details?: Array<{
                                    date?: string;
                                    estimated_active_individuals?: string;
                                }>;
                                plan_value?: string;
                                multi_period_values?: Array<{
                                    period_date?: string;
                                    workforce_plan?: string;
                                    individuals_to_be_added?: string;
                                    individuals_to_be_removed?: string;
                                }>;
                            }>;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/report_detail_row/batchDelete`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=report_detail_row&apiName=batchSave&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batchSave&project=corehr&resource=report_detail_row&version=v2 document }
                 *
                 * 批量创建/更新填报行
                 */
                batchSave: async (
                    payload?: {
                        data: {
                            workforce_plan_id: string;
                            centralized_reporting_project_id: string;
                            items: Array<{
                                dimensions: Array<{
                                    dimension_key: string;
                                    dimension_value: string;
                                }>;
                                eai_details?: Array<{
                                    date?: string;
                                    estimated_active_individuals?: string;
                                }>;
                                plan_value?: string;
                                multi_period_values?: Array<{
                                    period_date?: string;
                                    workforce_plan?: string;
                                    individuals_to_be_added?: string;
                                    individuals_to_be_removed?: string;
                                }>;
                            }>;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/report_detail_row/batchSave`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * workforce_plan
             */
            workforcePlan: {
                listWithIterator: async (
                    payload?: {
                        params?: {
                            limit?: number;
                            offset?: number;
                            get_all_plan?: boolean;
                            active?: boolean;
                            page_token?: string;
                            page_size?: number;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    const sendRequest = async (innerPayload: {
                        headers: any;
                        params: any;
                        data: any;
                    }) => {
                        const res = await this.httpInstance
                            .request<any, any>({
                                url: fillApiPath(
                                    `${this.domain}/open-apis/corehr/v2/workforce_plans`,
                                    path
                                ),
                                method: "GET",
                                headers: pickBy(innerPayload.headers, identity),
                                params: pickBy(innerPayload.params, identity),
                                data,
                                paramsSerializer: (params) =>
                                    stringify(params, {
                                        arrayFormat: "repeat",
                                    }),
                            })
                            .catch((e) => {
                                this.logger.error(formatErrors(e));
                            });
                        return res;
                    };

                    const Iterable = {
                        async *[Symbol.asyncIterator]() {
                            let hasMore = true;
                            let pageToken;

                            while (hasMore) {
                                try {
                                    const res = await sendRequest({
                                        headers,
                                        params: {
                                            ...params,
                                            page_token: pageToken,
                                        },
                                        data,
                                    });

                                    const {
                                        // @ts-ignore
                                        has_more,
                                        // @ts-ignore
                                        page_token,
                                        // @ts-ignore
                                        next_page_token,
                                        ...rest
                                    } =
                                        (
                                            res as {
                                                code?: number;
                                                msg?: string;
                                                data?: {
                                                    items?: Array<{
                                                        workforce_plan_id: string;
                                                        workforce_plan_name?: Array<{
                                                            lang: string;
                                                            value: string;
                                                        }>;
                                                        start_date?: string;
                                                        end_date?: string;
                                                        active?: boolean;
                                                    }>;
                                                    total?: number;
                                                    page_token?: string;
                                                    has_more?: boolean;
                                                };
                                            }
                                        )?.data || {};

                                    yield rest;

                                    hasMore = Boolean(has_more);
                                    pageToken = page_token || next_page_token;
                                } catch (e) {
                                    yield null;
                                    break;
                                }
                            }
                        },
                    };

                    return Iterable;
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=workforce_plan&apiName=list&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=corehr&resource=workforce_plan&version=v2 document }
                 */
                list: async (
                    payload?: {
                        params?: {
                            limit?: number;
                            offset?: number;
                            get_all_plan?: boolean;
                            active?: boolean;
                            page_token?: string;
                            page_size?: number;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    items?: Array<{
                                        workforce_plan_id: string;
                                        workforce_plan_name?: Array<{
                                            lang: string;
                                            value: string;
                                        }>;
                                        start_date?: string;
                                        end_date?: string;
                                        active?: boolean;
                                    }>;
                                    total?: number;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/workforce_plans`,
                                path
                            ),
                            method: "GET",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * workforce_plan_detail
             */
            workforcePlanDetail: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=workforce_plan_detail&apiName=batch&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch&project=corehr&resource=workforce_plan_detail&version=v2 document }
                 */
                batch: async (
                    payload?: {
                        data?: {
                            workforce_plan_id?: string;
                            is_centralized_reporting_project?: boolean;
                            centralized_reporting_project_id?: string;
                            department_ids?: Array<string>;
                            employee_type_ids?: Array<string>;
                            work_location_ids?: Array<string>;
                            job_family_ids?: Array<string>;
                            job_level_ids?: Array<string>;
                            job_ids?: Array<string>;
                            cost_center_ids?: Array<string>;
                        };
                        params?: { page_token?: string; page_size?: number };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    workforce_plan_id?: string;
                                    centralized_reporting_project_id?: string;
                                    items?: Array<{
                                        workforce_plan_detail_id?: string;
                                        department?: {
                                            id: string;
                                            name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        employee_type?: {
                                            id: string;
                                            name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        work_location?: {
                                            id: string;
                                            name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        job_family?: {
                                            id: string;
                                            name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        job_level?: {
                                            id: string;
                                            name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        job?: {
                                            id: string;
                                            name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        cost_center?: {
                                            id: string;
                                            name?: Array<{
                                                lang: string;
                                                value: string;
                                            }>;
                                        };
                                        workforce_plan?: string;
                                        active_individuals?: string;
                                        individuals_to_be_added?: string;
                                        individuals_to_be_removed?: string;
                                        vacancy?: string;
                                        vacancy_including_individuals_to_be_added_and_removed?: string;
                                        fulfillment_rate?: string;
                                        fulfillment_rate_including_individuals_to_be_added_and_removed?: string;
                                        estimated_active_individuals_detail?: Array<{
                                            date?: string;
                                            estimated_active_individuals?: string;
                                        }>;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/workforce_plan_details/batch`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=workforce_plan_detail&apiName=batch_v2&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_v2&project=corehr&resource=workforce_plan_detail&version=v2 document }
                 */
                batchV2: async (
                    payload?: {
                        data?: {
                            workforce_plan_id?: string;
                            is_centralized_reporting_project?: boolean;
                            centralized_reporting_project_id?: string;
                            dimension_id_in_datas?: Array<{
                                dimension_key?: string;
                                dimension_ids?: Array<string>;
                            }>;
                        };
                        params?: { page_token?: string; page_size?: number };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            {
                                code?: number;
                                msg?: string;
                                data?: {
                                    workforce_plan_id?: string;
                                    centralized_reporting_project_id?: string;
                                    items?: Array<{
                                        workforce_plan_detail_id?: string;
                                        dimension_info_datas?: Array<{
                                            dimension_key?: string;
                                            dimension_info?: {
                                                id: string;
                                                name?: Array<{
                                                    lang: string;
                                                    value: string;
                                                }>;
                                            };
                                        }>;
                                        workforce_plan?: string;
                                        active_individuals?: string;
                                        individuals_to_be_added?: string;
                                        individuals_to_be_removed?: string;
                                        vacancy?: string;
                                        vacancy_including_individuals_to_be_added_and_removed?: string;
                                        fulfillment_rate?: string;
                                        fulfillment_rate_including_individuals_to_be_added_and_removed?: string;
                                        estimated_active_individuals_details?: Array<{
                                            date?: string;
                                            estimated_active_individuals?: string;
                                        }>;
                                        multi_period_values?: Array<{
                                            period_date?: string;
                                            workforce_plan?: string;
                                            individuals_to_be_added?: string;
                                            individuals_to_be_removed?: string;
                                        }>;
                                    }>;
                                    page_token?: string;
                                    has_more?: boolean;
                                };
                            }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/workforce_plan_details/batch_v2`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
            /**
             * workforce_plan_detail_row
             */
            workforcePlanDetailRow: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=workforce_plan_detail_row&apiName=batchDelete&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batchDelete&project=corehr&resource=workforce_plan_detail_row&version=v2 document }
                 *
                 * 批量删除明细行
                 */
                batchDelete: async (
                    payload?: {
                        data: {
                            workforce_plan_id: string;
                            items: Array<{
                                dimensions: Array<{
                                    dimension_key: string;
                                    dimension_value: string;
                                }>;
                                eai_details?: Array<{
                                    date?: string;
                                    estimated_active_individuals?: string;
                                }>;
                                plan_value?: string;
                                multi_period_values?: Array<{
                                    period_date?: string;
                                    workforce_plan?: string;
                                    individuals_to_be_added?: string;
                                    individuals_to_be_removed?: string;
                                }>;
                            }>;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/workforce_plan_detail_row/batchDelete`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=workforce_plan_detail_row&apiName=batchSave&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batchSave&project=corehr&resource=workforce_plan_detail_row&version=v2 document }
                 *
                 * 批量创建/更新明细行
                 */
                batchSave: async (
                    payload?: {
                        data: {
                            workforce_plan_id: string;
                            items: Array<{
                                dimensions: Array<{
                                    dimension_key: string;
                                    dimension_value: string;
                                }>;
                                eai_details?: Array<{
                                    date?: string;
                                    estimated_active_individuals?: string;
                                }>;
                                plan_value?: string;
                                multi_period_values?: Array<{
                                    period_date?: string;
                                    workforce_plan?: string;
                                    individuals_to_be_added?: string;
                                    individuals_to_be_removed?: string;
                                }>;
                            }>;
                        };
                    },
                    options?: IRequestOptions
                ) => {
                    const { headers, params, data, path } =
                        await this.formatPayload(payload, options);

                    return this.httpInstance
                        .request<
                            any,
                            { code?: number; msg?: string; data?: {} }
                        >({
                            url: fillApiPath(
                                `${this.domain}/open-apis/corehr/v2/workforce_plan_detail_row/batchSave`,
                                path
                            ),
                            method: "POST",
                            data,
                            params,
                            headers,
                            paramsSerializer: (params) =>
                                stringify(params, { arrayFormat: "repeat" }),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                            throw e;
                        });
                },
            },
        },
    };
}

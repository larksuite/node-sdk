import identity from "lodash.identity";
import pickBy from "lodash.pickby";
import get from "lodash.get";
import fs from "fs";
import { fillApiPath } from "@node-sdk/utils";
import { Logger } from "@node-sdk/typings";
import { formatErrors } from "@node-sdk/client/utils";
import { IRequestOptions } from "./types";
import { IPayload } from "../client/types";
import { HttpInstance } from "@node-sdk/typings/http";

// auto gen
export default abstract class Client {
    declare tokenManager;

    declare domain;

    declare logger: Logger;

    declare httpInstance: HttpInstance;

    abstract formatPayload(
        // eslint-disable-next-line no-unused-vars
        payload?: IPayload,
        // eslint-disable-next-line no-unused-vars
        options?: IRequestOptions
    ): Promise<Required<IPayload>>;

    /**
     * 智能门禁
     */
    acs = {
        /**
         * access_record.access_photo
         */
        accessRecordAccessPhoto: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=access_record.access_photo&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/access_record-access_photo/get document }
             *
             * 下载开门时的人脸识别图片
             *
             * 用户在门禁考勤机上成功开门或打卡后，智能门禁应用都会生成一条门禁记录，对于使用人脸识别方式进行开门的识别记录，还会有抓拍图。;;可以用该接口下载开门时的人脸识别照片。
             */
            get: async (
                payload?: {
                    path?: { access_record_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/acs/v1/access_records/:access_record_id/access_photo`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        return new Promise((resolve, reject) => {
                            const writableStream =
                                fs.createWriteStream(filePath);
                            writableStream.on("finish", () => {
                                resolve(filePath);
                            });
                            writableStream.on("error", (e) => {
                                reject(e);
                            });
                            res.pipe(writableStream);
                        });
                    },
                };
            },
        },
        /**
         * 门禁记录
         */
        accessRecord: {
            listWithIterator: async (
                payload?: {
                    params: {
                        page_size?: number;
                        page_token?: string;
                        from: number;
                        to: number;
                        device_id?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/acs/v1/access_records`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    access_record_id?: string;
                                                    user_id?: string;
                                                    device_id?: string;
                                                    is_clock_in?: boolean;
                                                    access_time?: string;
                                                    access_type?: "FA";
                                                    access_data?: string;
                                                    is_door_open?: boolean;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=access_record&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/access_record/list document }
             *
             * 获取门禁记录列表
             *
             * 用户在门禁考勤机上成功开门或打卡后，智能门禁应用都会生成一条门禁记录。;;该接口返回满足查询参数的识别记录。
             */
            list: async (
                payload?: {
                    params: {
                        page_size?: number;
                        page_token?: string;
                        from: number;
                        to: number;
                        device_id?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    access_record_id?: string;
                                    user_id?: string;
                                    device_id?: string;
                                    is_clock_in?: boolean;
                                    access_time?: string;
                                    access_type?: "FA";
                                    access_data?: string;
                                    is_door_open?: boolean;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/acs/v1/access_records`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 门禁设备
         */
        device: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=device&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/device/list document }
             *
             * 获取门禁设备列表
             *
             * 使用该接口获取租户内所有门禁设备。
             */
            list: async (payload?: {}, options?: IRequestOptions) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    device_id?: string;
                                    device_name?: string;
                                    device_sn?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/acs/v1/devices`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * user.face
         */
        userFace: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=user.face&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user-face/get document }
             *
             * 下载人脸图片
             *
             * 对于已经录入人脸图片的用户，可以使用该接口下载用户人脸图片。
             */
            get: async (
                payload?: {
                    params?: {
                        is_cropped?: boolean;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { user_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/acs/v1/users/:user_id/face`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        return new Promise((resolve, reject) => {
                            const writableStream =
                                fs.createWriteStream(filePath);
                            writableStream.on("finish", () => {
                                resolve(filePath);
                            });
                            writableStream.on("error", (e) => {
                                reject(e);
                            });
                            res.pipe(writableStream);
                        });
                    },
                };
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=user.face&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user-face/update document }
             *
             * 上传人脸图片
             *
             * 用户需要录入人脸图片才可以使用门禁考勤机。使用该 API 上传门禁用户的人脸图片。
             */
            update: async (
                payload?: {
                    data: {
                        files: Buffer;
                        file_type: string;
                        file_name: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { user_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/acs/v1/users/:user_id/face`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
        },
        /**
         * 用户管理
         */
        user: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=user&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user/get document }
             *
             * 获取单个用户信息
             *
             * 该接口用于获取智能门禁中单个用户的信息。
             *
             * 只能获取已加入智能门禁权限组的用户
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { user_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user?: {
                                    feature?: {
                                        card?: number;
                                        face_uploaded?: boolean;
                                    };
                                    user_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/acs/v1/users/:user_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/acs/v1/users`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    feature?: {
                                                        card?: number;
                                                        face_uploaded?: boolean;
                                                    };
                                                    user_id?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=user&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user/list document }
             *
             * 获取用户列表
             *
             * 使用该接口获取智能门禁中所有用户信息。
             *
             * 只能获取已加入智能门禁权限组的用户。
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    feature?: {
                                        card?: number;
                                        face_uploaded?: boolean;
                                    };
                                    user_id?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/acs/v1/users`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=user&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user/patch document }
             *
             * 修改用户部分信息
             *
             * 飞书智能门禁在人脸识别成功后会有韦根信号输出，输出用户的卡号。;对于使用韦根协议的门禁系统，企业可使用该接口录入用户卡号。
             */
            patch: async (
                payload?: {
                    data?: { feature?: { card?: number } };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { user_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/acs/v1/users/:user_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * 管理后台-企业勋章
     */
    admin = {
        /**
         * 部门维度的数据报表
         */
        adminDeptStat: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=admin_dept_stat&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/admin_dept_stat/list document }
             *
             * 获取部门维度的用户活跃和功能使用数据
             *
             * 该接口用于获取部门维度的用户活跃和功能使用数据，即IM（即时通讯）、日历、云文档、音视频会议功能的使用数据。
             *
             * - 只有企业自建应用才有权限调用此接口;;- 当天的数据会在第二天的早上九点半产出（UTC+8）
             */
            list: async (
                payload?: {
                    params: {
                        department_id_type:
                            | "department_id"
                            | "open_department_id";
                        start_date: string;
                        end_date: string;
                        department_id: string;
                        contains_child_dept: boolean;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    date?: string;
                                    department_id?: string;
                                    department_name?: string;
                                    department_path?: string;
                                    total_user_num?: number;
                                    active_user_num?: number;
                                    active_user_rate?: string;
                                    suite_dau?: number;
                                    suite_active_rate?: string;
                                    new_user_num?: number;
                                    new_active_num?: number;
                                    resign_user_num?: number;
                                    im_dau?: number;
                                    send_messenger_user_num?: number;
                                    send_messenger_num?: number;
                                    avg_send_messenger_num?: string;
                                    docs_dau?: number;
                                    create_docs_user_num?: number;
                                    create_docs_num?: number;
                                    avg_create_docs_num?: string;
                                    cal_dau?: number;
                                    create_cal_user_num?: number;
                                    create_cal_num?: number;
                                    avg_create_cal_num?: string;
                                    vc_dau?: number;
                                    vc_duration?: number;
                                    avg_vc_duration?: string;
                                    avg_duration?: string;
                                    task_dau?: number;
                                    create_task_user_num?: number;
                                    create_task_num?: number;
                                    avg_create_task_num?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/admin_dept_stats`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 用户维度的数据报表
         */
        adminUserStat: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=admin_user_stat&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/admin_user_stat/list document }
             *
             * 获取用户维度的用户活跃和功能使用数据
             *
             * 用于获取用户维度的用户活跃和功能使用数据，即IM（即时通讯）、日历、云文档、音视频会议功能的使用数据。
             *
             * - 只有企业自建应用才有权限调用此接口;;- 当天的数据会在第二天的早上九点半产出（UTC+8）
             */
            list: async (
                payload?: {
                    params: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        start_date: string;
                        end_date: string;
                        department_id?: string;
                        user_id?: string;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    date?: string;
                                    user_id?: string;
                                    user_name?: string;
                                    department_name?: string;
                                    department_path?: string;
                                    create_time?: string;
                                    user_active_flag?: number;
                                    register_time?: string;
                                    suite_active_flag?: number;
                                    last_active_time?: string;
                                    im_active_flag?: number;
                                    send_messenger_num?: number;
                                    docs_active_flag?: number;
                                    create_docs_num?: number;
                                    cal_active_flag?: number;
                                    create_cal_num?: number;
                                    vc_active_flag?: number;
                                    vc_duration?: number;
                                    active_os?: string;
                                    create_task_num?: number;
                                    vc_num?: number;
                                    app_package_type?: string;
                                    os_name?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/admin_user_stats`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 勋章
         */
        badge: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge/create document }
             *
             * 创建勋章
             *
             * 使用该接口可以创建一枚完整的勋章信息，一个租户下最多可创建1000枚勋章。
             */
            create: async (
                payload?: {
                    data: {
                        name: string;
                        explanation?: string;
                        detail_image: string;
                        show_image: string;
                        i18n_name?: {
                            zh_cn?: string;
                            en_us?: string;
                            ja_jp?: string;
                        };
                        i18n_explanation?: {
                            zh_cn?: string;
                            en_us?: string;
                            ja_jp?: string;
                        };
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                badge?: {
                                    id?: string;
                                    name: string;
                                    explanation?: string;
                                    detail_image: string;
                                    show_image: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    i18n_explanation?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge/get document }
             *
             * 获取勋章详情
             *
             * 可以通过该接口查询勋章的详情
             */
            get: async (
                payload?: {
                    path: { badge_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                badge?: {
                                    id?: string;
                                    name: string;
                                    explanation?: string;
                                    detail_image: string;
                                    show_image: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    i18n_explanation?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges/:badge_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params: {
                        page_size: number;
                        page_token?: string;
                        name?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/admin/v1/badges`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                badges?: Array<{
                                                    id?: string;
                                                    name: string;
                                                    explanation?: string;
                                                    detail_image: string;
                                                    show_image: string;
                                                    i18n_name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                        ja_jp?: string;
                                                    };
                                                    i18n_explanation?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                        ja_jp?: string;
                                                    };
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge/list document }
             *
             * 获取勋章列表
             *
             * 可以通过该接口列出租户下所有的勋章，勋章的排列顺序是按照创建时间倒序排列。
             */
            list: async (
                payload?: {
                    params: {
                        page_size: number;
                        page_token?: string;
                        name?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                badges?: Array<{
                                    id?: string;
                                    name: string;
                                    explanation?: string;
                                    detail_image: string;
                                    show_image: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    i18n_explanation?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge/update document }
             *
             * 修改勋章信息
             *
             * 通过该接口可以修改勋章的信息
             */
            update: async (
                payload?: {
                    data: {
                        name: string;
                        explanation?: string;
                        detail_image: string;
                        show_image: string;
                        i18n_name?: {
                            zh_cn?: string;
                            en_us?: string;
                            ja_jp?: string;
                        };
                        i18n_explanation?: {
                            zh_cn?: string;
                            en_us?: string;
                            ja_jp?: string;
                        };
                    };
                    path: { badge_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                badge?: {
                                    id?: string;
                                    name: string;
                                    explanation?: string;
                                    detail_image: string;
                                    show_image: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    i18n_explanation?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges/:badge_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 勋章授予名单
         */
        badgeGrant: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge.grant&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge-grant/create document }
             *
             * 创建勋章的授予名单
             *
             * 通过该接口可以为特定勋章创建一份授予名单，一枚勋章下最多可创建1000份授予名单。
             */
            create: async (
                payload?: {
                    data: {
                        name: string;
                        grant_type: number;
                        time_zone: string;
                        rule_detail: {
                            effective_time?: string;
                            expiration_time?: string;
                            anniversary?: number;
                            effective_period?: number;
                        };
                        is_grant_all: boolean;
                        user_ids?: Array<string>;
                        department_ids?: Array<string>;
                        group_ids?: Array<string>;
                    };
                    params?: {
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path: { badge_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                grant?: {
                                    id?: string;
                                    badge_id?: string;
                                    name: string;
                                    grant_type: number;
                                    time_zone: string;
                                    rule_detail: {
                                        effective_time?: string;
                                        expiration_time?: string;
                                        anniversary?: number;
                                        effective_period?: number;
                                    };
                                    is_grant_all: boolean;
                                    user_ids?: Array<string>;
                                    department_ids?: Array<string>;
                                    group_ids?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges/:badge_id/grants`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge.grant&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge-grant/delete document }
             *
             * 删除授予名单
             *
             * 通过该接口可以删除特定授予名单的信息
             */
            delete: async (
                payload?: {
                    path: { badge_id: string; grant_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges/:badge_id/grants/:grant_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge.grant&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge-grant/get document }
             *
             * 获取授予名单的信息
             *
             * 通过该接口可以获取特定授予名单的信息
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path: { badge_id: string; grant_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                grant?: {
                                    id?: string;
                                    badge_id?: string;
                                    name: string;
                                    grant_type: number;
                                    time_zone: string;
                                    rule_detail: {
                                        effective_time?: string;
                                        expiration_time?: string;
                                        anniversary?: number;
                                        effective_period?: number;
                                    };
                                    is_grant_all: boolean;
                                    user_ids?: Array<string>;
                                    department_ids?: Array<string>;
                                    group_ids?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges/:badge_id/grants/:grant_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params: {
                        page_size: number;
                        page_token?: string;
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        name?: string;
                    };
                    path: { badge_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/admin/v1/badges/:badge_id/grants`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                grants?: Array<{
                                                    id?: string;
                                                    badge_id?: string;
                                                    name: string;
                                                    grant_type: number;
                                                    time_zone: string;
                                                    rule_detail: {
                                                        effective_time?: string;
                                                        expiration_time?: string;
                                                        anniversary?: number;
                                                        effective_period?: number;
                                                    };
                                                    is_grant_all: boolean;
                                                    user_ids?: Array<string>;
                                                    department_ids?: Array<string>;
                                                    group_ids?: Array<string>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge.grant&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge-grant/list document }
             *
             * 获取勋章的授予名单列表
             *
             * 通过该接口可以获取特定勋章下的授予名单列表，授予名单的排列顺序按照创建时间倒序排列。
             */
            list: async (
                payload?: {
                    params: {
                        page_size: number;
                        page_token?: string;
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        name?: string;
                    };
                    path: { badge_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                grants?: Array<{
                                    id?: string;
                                    badge_id?: string;
                                    name: string;
                                    grant_type: number;
                                    time_zone: string;
                                    rule_detail: {
                                        effective_time?: string;
                                        expiration_time?: string;
                                        anniversary?: number;
                                        effective_period?: number;
                                    };
                                    is_grant_all: boolean;
                                    user_ids?: Array<string>;
                                    department_ids?: Array<string>;
                                    group_ids?: Array<string>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges/:badge_id/grants`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge.grant&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge-grant/update document }
             *
             * 修改授予名单
             *
             * 通过该接口可以修改特定授予名单的相关信息
             */
            update: async (
                payload?: {
                    data: {
                        name: string;
                        grant_type: number;
                        time_zone: string;
                        rule_detail: {
                            effective_time?: string;
                            expiration_time?: string;
                            anniversary?: number;
                            effective_period?: number;
                        };
                        is_grant_all: boolean;
                        user_ids?: Array<string>;
                        department_ids?: Array<string>;
                        group_ids?: Array<string>;
                    };
                    params?: {
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path: { badge_id: string; grant_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                grant?: {
                                    id?: string;
                                    badge_id?: string;
                                    name: string;
                                    grant_type: number;
                                    time_zone: string;
                                    rule_detail: {
                                        effective_time?: string;
                                        expiration_time?: string;
                                        anniversary?: number;
                                        effective_period?: number;
                                    };
                                    is_grant_all: boolean;
                                    user_ids?: Array<string>;
                                    department_ids?: Array<string>;
                                    group_ids?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges/:badge_id/grants/:grant_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 勋章图片
         */
        badgeImage: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge_image&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge_image/create document }
             *
             * 上传勋章图片
             *
             * 通过该接口可以上传勋章详情图、挂饰图的文件，获取对应的文件key
             */
            create: async (
                payload?: {
                    data: { image_file: Buffer; image_type: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { image_key?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badge_images`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
        },
        /**
         * 登录密码管理
         */
        password: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=password&apiName=reset&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/password/reset document }
             *
             * 重置密码
             *
             * 重置用户的企业邮箱密码，仅当用户的邮箱和企业邮箱(别名)一致时生效，可用于处理飞书企业邮箱登录死锁的问题。;;邮箱死锁：当用户的登录凭证与飞书企业邮箱一致时，目前飞书登录流程要求用户输入验证码，由于飞书邮箱无单独的帐号体系，则未登录时无法收取邮箱验证码，即陷入死锁
             */
            reset: async (
                payload?: {
                    data: {
                        password: { ent_email_password: string };
                        user_id: string;
                    };
                    params: {
                        user_id_type: "open_id" | "union_id" | "user_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/password/reset`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * 应用信息
     */
    application = {
        /**
         * 我的常用推荐规则
         */
        appRecommendRule: {
            listWithIterator: async (
                payload?: {
                    params: {
                        page_size: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/application/v6/app_recommend_rules`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                rules?: Array<{
                                                    id?: string;
                                                    name?: string;
                                                    status?: "open" | "closed";
                                                    visibility_info?: {
                                                        is_all?: boolean;
                                                        department_ids?: Array<string>;
                                                        user_ids?: Array<string>;
                                                        group_ids?: Array<string>;
                                                    };
                                                    recommend_item_infos?: Array<{
                                                        item_id?: string;
                                                        item_type?:
                                                            | "application"
                                                            | "link";
                                                        name?: string;
                                                        description?: string;
                                                        link_url?: string;
                                                        client_id?: string;
                                                        icon_url?: string;
                                                        default_locale?:
                                                            | "zh_cn"
                                                            | "zh_hk"
                                                            | "zh_tw"
                                                            | "en_us"
                                                            | "ja_jp";
                                                        i18n_name?: {
                                                            zh_cn?: string;
                                                            zh_hk?: string;
                                                            zh_tw?: string;
                                                            en_us?: string;
                                                            ja_jp?: string;
                                                        };
                                                    }>;
                                                    distributed_recommend_item_infos?: Array<{
                                                        item_id?: string;
                                                        item_type?:
                                                            | "application"
                                                            | "link";
                                                        name?: string;
                                                        description?: string;
                                                        link_url?: string;
                                                        client_id?: string;
                                                        icon_url?: string;
                                                        default_locale?:
                                                            | "zh_cn"
                                                            | "zh_hk"
                                                            | "zh_tw"
                                                            | "en_us"
                                                            | "ja_jp";
                                                        i18n_name?: {
                                                            zh_cn?: string;
                                                            zh_hk?: string;
                                                            zh_tw?: string;
                                                            en_us?: string;
                                                            ja_jp?: string;
                                                        };
                                                    }>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=app_recommend_rule&apiName=list&version=v6 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/app_recommend_rule/list document }
             *
             * 获取当前设置的推荐规则列表
             *
             * 获取当前设置的推荐规则列表。
             */
            list: async (
                payload?: {
                    params: {
                        page_size: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                rules?: Array<{
                                    id?: string;
                                    name?: string;
                                    status?: "open" | "closed";
                                    visibility_info?: {
                                        is_all?: boolean;
                                        department_ids?: Array<string>;
                                        user_ids?: Array<string>;
                                        group_ids?: Array<string>;
                                    };
                                    recommend_item_infos?: Array<{
                                        item_id?: string;
                                        item_type?: "application" | "link";
                                        name?: string;
                                        description?: string;
                                        link_url?: string;
                                        client_id?: string;
                                        icon_url?: string;
                                        default_locale?:
                                            | "zh_cn"
                                            | "zh_hk"
                                            | "zh_tw"
                                            | "en_us"
                                            | "ja_jp";
                                        i18n_name?: {
                                            zh_cn?: string;
                                            zh_hk?: string;
                                            zh_tw?: string;
                                            en_us?: string;
                                            ja_jp?: string;
                                        };
                                    }>;
                                    distributed_recommend_item_infos?: Array<{
                                        item_id?: string;
                                        item_type?: "application" | "link";
                                        name?: string;
                                        description?: string;
                                        link_url?: string;
                                        client_id?: string;
                                        icon_url?: string;
                                        default_locale?:
                                            | "zh_cn"
                                            | "zh_hk"
                                            | "zh_tw"
                                            | "en_us"
                                            | "ja_jp";
                                        i18n_name?: {
                                            zh_cn?: string;
                                            zh_hk?: string;
                                            zh_tw?: string;
                                            en_us?: string;
                                            ja_jp?: string;
                                        };
                                    }>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/app_recommend_rules`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 应用使用情况
         */
        applicationAppUsage: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.app_usage&apiName=overview&version=v6 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-app_usage/overview document }
             *
             * 获取应用使用概览
             *
             * 查看应用在某一天/某一周/某一个月的使用数据，可以查看租户整体对应用的使用情况，也可以分部门查看。
             *
             * 1. 仅支持企业版/旗舰版租户使用;2. 一般每天早上10点产出前一天的数据;3. 已经支持的指标包括：应用的活跃用户数、累计用户数、新增用户数、访问页面数、打开次数;4. 数据从飞书4.10版本开始统计，使用飞书版本4.10及以下版本的用户数据不会被统计到;5. 按照部门查看数据时，会展示当前部门以及其子部门的整体使用情况;6. 调用频控为100次/分
             */
            overview: async (
                payload?: {
                    data: {
                        date: string;
                        cycle_type: number;
                        department_id?: string;
                        ability: "app" | "mp" | "h5" | "bot";
                    };
                    params?: {
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path: { app_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    metric_name: string;
                                    metric_value: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/applications/:app_id/app_usage/overview`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 事件
         */
        applicationAppVersion: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.app_version&apiName=get&version=v6 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-app_version/get document }
             *
             * 获取应用版本信息
             *
             * 根据应用 ID 和应用版本 ID 来获取同租户下的应用版本的信息
             */
            get: async (
                payload?: {
                    params: {
                        lang: "zh_cn" | "en_us" | "ja_jp";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { app_id: string; version_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                app_version?: {
                                    app_id: string;
                                    version?: string;
                                    version_id: string;
                                    app_name?: string;
                                    avatar_url?: string;
                                    description?: string;
                                    scopes?: Array<{
                                        scope: string;
                                        description?: string;
                                        level?: number;
                                    }>;
                                    back_home_url?: string;
                                    i18n?: Array<{
                                        i18n_key: "zh_cn" | "en_us" | "ja_jp";
                                        name?: string;
                                        description?: string;
                                        help_use?: string;
                                    }>;
                                    common_categories?: Array<string>;
                                    events?: Array<string>;
                                    status?: number;
                                    create_time?: string;
                                    publish_time?: string;
                                    ability?: {
                                        gadget?: {
                                            enable_pc_mode?: number;
                                            schema_urls?: Array<string>;
                                            pc_use_mobile_pkg?: boolean;
                                            pc_version?: string;
                                            mobile_version?: string;
                                            mobile_min_lark_version?: string;
                                            pc_min_lark_version?: string;
                                        };
                                        web_app?: {
                                            pc_url?: string;
                                            mobile_url?: string;
                                        };
                                        bot?: { card_request_url?: string };
                                        workplace_widgets?: Array<{
                                            min_lark_version?: string;
                                        }>;
                                        navigate?: {
                                            pc?: {
                                                version?: string;
                                                image_url?: string;
                                                hover_image_url?: string;
                                            };
                                            mobile?: {
                                                version?: string;
                                                image_url?: string;
                                                hover_image_url?: string;
                                            };
                                        };
                                        cloud_doc?: {
                                            space_url?: string;
                                            i18n?: Array<{
                                                i18n_key:
                                                    | "zh_cn"
                                                    | "en_us"
                                                    | "ja_jp";
                                                name?: string;
                                                read_description?: string;
                                                write_description?: string;
                                            }>;
                                            icon_url?: string;
                                            mode?: number;
                                        };
                                        docs_blocks?: Array<{
                                            block_type_id?: string;
                                            i18n?: Array<{
                                                i18n_key?:
                                                    | "zh_cn"
                                                    | "en_us"
                                                    | "ja_jp";
                                                name?: string;
                                            }>;
                                            mobile_icon_url?: string;
                                            pc_icon_url?: string;
                                        }>;
                                        message_action?: {
                                            pc_app_link?: string;
                                            mobile_app_link?: string;
                                            i18n?: Array<{
                                                i18n_key?:
                                                    | "zh_cn"
                                                    | "en_us"
                                                    | "ja_jp";
                                                name?: string;
                                            }>;
                                        };
                                        plus_menu?: {
                                            pc_app_link?: string;
                                            mobile_app_link?: string;
                                        };
                                    };
                                    remark?: {
                                        remark?: string;
                                        update_remark?: string;
                                        visibility?: {
                                            is_all?: boolean;
                                            visible_list?: {
                                                open_ids?: Array<string>;
                                                department_ids?: Array<string>;
                                            };
                                            invisible_list?: {
                                                open_ids?: Array<string>;
                                                department_ids?: Array<string>;
                                            };
                                        };
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/applications/:app_id/app_versions/:version_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params: {
                        lang: "zh_cn" | "en_us" | "ja_jp";
                        page_size?: number;
                        page_token?: string;
                        order?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { app_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/application/v6/applications/:app_id/app_versions`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    app_id: string;
                                                    version?: string;
                                                    version_id: string;
                                                    app_name?: string;
                                                    avatar_url?: string;
                                                    description?: string;
                                                    scopes?: Array<{
                                                        scope: string;
                                                        description?: string;
                                                        level?: number;
                                                    }>;
                                                    back_home_url?: string;
                                                    i18n?: Array<{
                                                        i18n_key:
                                                            | "zh_cn"
                                                            | "en_us"
                                                            | "ja_jp";
                                                        name?: string;
                                                        description?: string;
                                                        help_use?: string;
                                                    }>;
                                                    common_categories?: Array<string>;
                                                    events?: Array<string>;
                                                    status?: number;
                                                    create_time?: string;
                                                    publish_time?: string;
                                                    ability?: {
                                                        gadget?: {
                                                            enable_pc_mode?: number;
                                                            schema_urls?: Array<string>;
                                                            pc_use_mobile_pkg?: boolean;
                                                            pc_version?: string;
                                                            mobile_version?: string;
                                                            mobile_min_lark_version?: string;
                                                            pc_min_lark_version?: string;
                                                        };
                                                        web_app?: {
                                                            pc_url?: string;
                                                            mobile_url?: string;
                                                        };
                                                        bot?: {
                                                            card_request_url?: string;
                                                        };
                                                        workplace_widgets?: Array<{
                                                            min_lark_version?: string;
                                                        }>;
                                                        navigate?: {
                                                            pc?: {
                                                                version?: string;
                                                                image_url?: string;
                                                                hover_image_url?: string;
                                                            };
                                                            mobile?: {
                                                                version?: string;
                                                                image_url?: string;
                                                                hover_image_url?: string;
                                                            };
                                                        };
                                                        cloud_doc?: {
                                                            space_url?: string;
                                                            i18n?: Array<{
                                                                i18n_key:
                                                                    | "zh_cn"
                                                                    | "en_us"
                                                                    | "ja_jp";
                                                                name?: string;
                                                                read_description?: string;
                                                                write_description?: string;
                                                            }>;
                                                            icon_url?: string;
                                                            mode?: number;
                                                        };
                                                        docs_blocks?: Array<{
                                                            block_type_id?: string;
                                                            i18n?: Array<{
                                                                i18n_key?:
                                                                    | "zh_cn"
                                                                    | "en_us"
                                                                    | "ja_jp";
                                                                name?: string;
                                                            }>;
                                                            mobile_icon_url?: string;
                                                            pc_icon_url?: string;
                                                        }>;
                                                        message_action?: {
                                                            pc_app_link?: string;
                                                            mobile_app_link?: string;
                                                            i18n?: Array<{
                                                                i18n_key?:
                                                                    | "zh_cn"
                                                                    | "en_us"
                                                                    | "ja_jp";
                                                                name?: string;
                                                            }>;
                                                        };
                                                        plus_menu?: {
                                                            pc_app_link?: string;
                                                            mobile_app_link?: string;
                                                        };
                                                    };
                                                    remark?: {
                                                        remark?: string;
                                                        update_remark?: string;
                                                        visibility?: {
                                                            is_all?: boolean;
                                                            visible_list?: {
                                                                open_ids?: Array<string>;
                                                                department_ids?: Array<string>;
                                                            };
                                                            invisible_list?: {
                                                                open_ids?: Array<string>;
                                                                department_ids?: Array<string>;
                                                            };
                                                        };
                                                    };
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.app_version&apiName=list&version=v6 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-app_version/list document }
             *
             * 获取应用版本列表
             *
             * 根据 app_id 获取对应应用版本列表。
             */
            list: async (
                payload?: {
                    params: {
                        lang: "zh_cn" | "en_us" | "ja_jp";
                        page_size?: number;
                        page_token?: string;
                        order?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { app_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    app_id: string;
                                    version?: string;
                                    version_id: string;
                                    app_name?: string;
                                    avatar_url?: string;
                                    description?: string;
                                    scopes?: Array<{
                                        scope: string;
                                        description?: string;
                                        level?: number;
                                    }>;
                                    back_home_url?: string;
                                    i18n?: Array<{
                                        i18n_key: "zh_cn" | "en_us" | "ja_jp";
                                        name?: string;
                                        description?: string;
                                        help_use?: string;
                                    }>;
                                    common_categories?: Array<string>;
                                    events?: Array<string>;
                                    status?: number;
                                    create_time?: string;
                                    publish_time?: string;
                                    ability?: {
                                        gadget?: {
                                            enable_pc_mode?: number;
                                            schema_urls?: Array<string>;
                                            pc_use_mobile_pkg?: boolean;
                                            pc_version?: string;
                                            mobile_version?: string;
                                            mobile_min_lark_version?: string;
                                            pc_min_lark_version?: string;
                                        };
                                        web_app?: {
                                            pc_url?: string;
                                            mobile_url?: string;
                                        };
                                        bot?: { card_request_url?: string };
                                        workplace_widgets?: Array<{
                                            min_lark_version?: string;
                                        }>;
                                        navigate?: {
                                            pc?: {
                                                version?: string;
                                                image_url?: string;
                                                hover_image_url?: string;
                                            };
                                            mobile?: {
                                                version?: string;
                                                image_url?: string;
                                                hover_image_url?: string;
                                            };
                                        };
                                        cloud_doc?: {
                                            space_url?: string;
                                            i18n?: Array<{
                                                i18n_key:
                                                    | "zh_cn"
                                                    | "en_us"
                                                    | "ja_jp";
                                                name?: string;
                                                read_description?: string;
                                                write_description?: string;
                                            }>;
                                            icon_url?: string;
                                            mode?: number;
                                        };
                                        docs_blocks?: Array<{
                                            block_type_id?: string;
                                            i18n?: Array<{
                                                i18n_key?:
                                                    | "zh_cn"
                                                    | "en_us"
                                                    | "ja_jp";
                                                name?: string;
                                            }>;
                                            mobile_icon_url?: string;
                                            pc_icon_url?: string;
                                        }>;
                                        message_action?: {
                                            pc_app_link?: string;
                                            mobile_app_link?: string;
                                            i18n?: Array<{
                                                i18n_key?:
                                                    | "zh_cn"
                                                    | "en_us"
                                                    | "ja_jp";
                                                name?: string;
                                            }>;
                                        };
                                        plus_menu?: {
                                            pc_app_link?: string;
                                            mobile_app_link?: string;
                                        };
                                    };
                                    remark?: {
                                        remark?: string;
                                        update_remark?: string;
                                        visibility?: {
                                            is_all?: boolean;
                                            visible_list?: {
                                                open_ids?: Array<string>;
                                                department_ids?: Array<string>;
                                            };
                                            invisible_list?: {
                                                open_ids?: Array<string>;
                                                department_ids?: Array<string>;
                                            };
                                        };
                                    };
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/applications/:app_id/app_versions`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.app_version&apiName=patch&version=v6 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-app_version/patch document }
             *
             * 更新应用审核状态
             *
             * 通过接口来更新应用版本的审核结果：通过后应用可以直接上架；拒绝后则开发者可以看到拒绝理由，并在修改后再次申请发布。
             */
            patch: async (
                payload?: {
                    data?: { status?: number };
                    params: {
                        user_id_type: "user_id" | "union_id" | "open_id";
                        operator_id: string;
                        reject_reason?: string;
                    };
                    path: { app_id: string; version_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/applications/:app_id/app_versions/:version_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 应用反馈
         */
        applicationFeedback: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.feedback&apiName=list&version=v6 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-feedback/list document }
             *
             * 获取应用反馈列表
             *
             * 查询应用的反馈数据
             */
            list: async (
                payload?: {
                    params?: {
                        from_date?: string;
                        to_date?: string;
                        feedback_type?: number;
                        status?: number;
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { app_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                feedback_list?: Array<{
                                    feedback_id: string;
                                    app_id: string;
                                    feedback_time: string;
                                    tenant_name?: string;
                                    feedback_type: number;
                                    status: number;
                                    fault_type?: Array<number>;
                                    fault_time?: string;
                                    source?: number;
                                    contact?: string;
                                    update_time?: string;
                                    description: string;
                                    user_id?: string;
                                    operator_id?: string;
                                    images?: Array<string>;
                                    feedback_path?: string;
                                }>;
                                has_more: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/applications/:app_id/feedbacks`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.feedback&apiName=patch&version=v6 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-feedback/patch document }
             *
             * 更新应用反馈
             *
             * 更新应用的反馈数据
             */
            patch: async (
                payload?: {
                    params: {
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        status: number;
                        operator_id: string;
                    };
                    path: { app_id: string; feedback_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/applications/:app_id/feedbacks/:feedback_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 应用
         */
        application: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application&apiName=get&version=v6 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application/get document }
             *
             * 获取应用信息
             *
             * 根据app_id获取应用的基础信息
             */
            get: async (
                payload?: {
                    params: {
                        lang: "zh_cn" | "en_us" | "ja_jp";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { app_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                app?: {
                                    app_id: string;
                                    creator_id?: string;
                                    status?: number;
                                    scene_type?: number;
                                    payment_type?: number;
                                    redirect_urls?: Array<string>;
                                    online_version_id?: string;
                                    unaudit_version_id?: string;
                                    app_name?: string;
                                    avatar_url?: string;
                                    description?: string;
                                    scopes?: Array<{
                                        scope: string;
                                        description?: string;
                                        level?: number;
                                    }>;
                                    back_home_url?: string;
                                    i18n?: Array<{
                                        i18n_key: "zh_cn" | "en_us" | "ja_jp";
                                        name?: string;
                                        description?: string;
                                        help_use?: string;
                                    }>;
                                    primary_language?:
                                        | "zh_cn"
                                        | "en_us"
                                        | "ja_jp";
                                    common_categories?: Array<string>;
                                    owner?: {
                                        type: number;
                                        owner_id?: string;
                                        name?: string;
                                        help_desk?: string;
                                        email?: string;
                                        phone?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/applications/:app_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application&apiName=patch&version=v6 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application/patch document }
             *
             * 更新应用分组信息
             *
             * 更新应用的分组信息（分组会影响应用在工作台中的分类情况，请谨慎更新）
             */
            patch: async (
                payload?: {
                    data?: { common_categories?: Array<string> };
                    params: { lang: "zh_cn" | "en_us" | "ja_jp" };
                    path: { app_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/applications/:app_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            underauditlistWithIterator: async (
                payload?: {
                    params: {
                        lang: "zh_cn" | "en_us" | "ja_jp";
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/application/v6/applications/underauditlist`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items: Array<{
                                                    app_id: string;
                                                    creator_id?: string;
                                                    status?: number;
                                                    scene_type?: number;
                                                    payment_type?: number;
                                                    redirect_urls?: Array<string>;
                                                    online_version_id?: string;
                                                    unaudit_version_id?: string;
                                                    app_name?: string;
                                                    avatar_url?: string;
                                                    description?: string;
                                                    scopes?: Array<{
                                                        scope: string;
                                                        description?: string;
                                                        level?: number;
                                                    }>;
                                                    back_home_url?: string;
                                                    i18n?: Array<{
                                                        i18n_key:
                                                            | "zh_cn"
                                                            | "en_us"
                                                            | "ja_jp";
                                                        name?: string;
                                                        description?: string;
                                                        help_use?: string;
                                                    }>;
                                                    primary_language?:
                                                        | "zh_cn"
                                                        | "en_us"
                                                        | "ja_jp";
                                                    common_categories?: Array<string>;
                                                    owner?: {
                                                        type: number;
                                                        owner_id?: string;
                                                        name?: string;
                                                        help_desk?: string;
                                                        email?: string;
                                                        phone?: string;
                                                    };
                                                }>;
                                                has_more: boolean;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application&apiName=underauditlist&version=v6 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application/underauditlist document }
             *
             * 查看待审核的应用列表
             *
             * 查看本企业下所有待审核的自建应用列表
             */
            underauditlist: async (
                payload?: {
                    params: {
                        lang: "zh_cn" | "en_us" | "ja_jp";
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items: Array<{
                                    app_id: string;
                                    creator_id?: string;
                                    status?: number;
                                    scene_type?: number;
                                    payment_type?: number;
                                    redirect_urls?: Array<string>;
                                    online_version_id?: string;
                                    unaudit_version_id?: string;
                                    app_name?: string;
                                    avatar_url?: string;
                                    description?: string;
                                    scopes?: Array<{
                                        scope: string;
                                        description?: string;
                                        level?: number;
                                    }>;
                                    back_home_url?: string;
                                    i18n?: Array<{
                                        i18n_key: "zh_cn" | "en_us" | "ja_jp";
                                        name?: string;
                                        description?: string;
                                        help_use?: string;
                                    }>;
                                    primary_language?:
                                        | "zh_cn"
                                        | "en_us"
                                        | "ja_jp";
                                    common_categories?: Array<string>;
                                    owner?: {
                                        type: number;
                                        owner_id?: string;
                                        name?: string;
                                        help_desk?: string;
                                        email?: string;
                                        phone?: string;
                                    };
                                }>;
                                has_more: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/applications/underauditlist`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * 审批
     */
    approval = {
        /**
         * 事件
         */
        approval: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=approval&apiName=create&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/create document }
             *
             * 创建审批定义
             *
             * 用于通过接口创建简单的审批定义，可以灵活指定定义的基础信息、表单和流程等。创建成功后，不支持从审批管理后台删除该定义。不推荐企业自建应用使用，如有需要尽量联系管理员在审批管理后台创建定义。
             *
             * 接口谨慎调用，创建后的审批定义无法停用/删除
             */
            create: async (
                payload?: {
                    data: {
                        approval_name: string;
                        approval_code?: string;
                        description?: string;
                        viewers: Array<{
                            viewer_type?:
                                | "TENANT"
                                | "DEPARTMENT"
                                | "USER"
                                | "NONE";
                            viewer_user_id?: string;
                            viewer_department_id?: string;
                        }>;
                        form: { form_content: string };
                        node_list: Array<{
                            id: string;
                            name?: string;
                            node_type?: "AND" | "OR" | "SEQUENTIAL";
                            approver?: Array<{
                                type:
                                    | "Supervisor"
                                    | "SupervisorTopDown"
                                    | "DepartmentManager"
                                    | "DepartmentManagerTopDown"
                                    | "Personal"
                                    | "Free";
                                user_id?: string;
                                level?: string;
                            }>;
                            ccer?: Array<{
                                type:
                                    | "Supervisor"
                                    | "SupervisorTopDown"
                                    | "DepartmentManager"
                                    | "DepartmentManagerTopDown"
                                    | "Personal"
                                    | "Free";
                                user_id?: string;
                                level?: string;
                            }>;
                            privilege_field?: {
                                writable: Array<string>;
                                readable: Array<string>;
                            };
                            approver_chosen_multi?: boolean;
                            approver_chosen_range?: Array<{
                                type?: "ALL" | "PERSONAL" | "ROLE";
                                id_list?: Array<string>;
                            }>;
                            starter_assignee?:
                                | "STARTER"
                                | "AUTO_PASS"
                                | "SUPERVISOR"
                                | "DEPARTMENT_MANAGER";
                        }>;
                        settings?: {
                            revert_interval?: number;
                            revert_option?: number;
                            reject_option?: number;
                        };
                        config?: {
                            can_update_viewer: boolean;
                            can_update_form: boolean;
                            can_update_process: boolean;
                            can_update_revert: boolean;
                            help_url?: string;
                        };
                        icon?: number;
                        i18n_resources: Array<{
                            locale: "zh-CN" | "en-US" | "ja-JP";
                            texts: Array<{ key: string; value: string }>;
                            is_default: boolean;
                        }>;
                        process_manager_ids?: Array<string>;
                    };
                    params?: {
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                approval_code?: string;
                                approval_id?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/approvals`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=approval&apiName=get&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/get document }
             *
             * 查看审批定义
             *
             * 根据 Approval Code 获取某个审批定义的详情，用于构造创建审批实例的请求。
             */
            get: async (
                payload?: {
                    params?: {
                        locale?: "zh-CN" | "en-US" | "ja-JP";
                        with_admin_id?: boolean;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { approval_code: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                approval_name: string;
                                status:
                                    | "ACTIVE"
                                    | "INACTIVE"
                                    | "DELETED"
                                    | "UNKNOWN";
                                form: string;
                                node_list: Array<{
                                    name: string;
                                    need_approver: boolean;
                                    node_id: string;
                                    custom_node_id?: string;
                                    node_type:
                                        | "AND"
                                        | "OR"
                                        | "SEQUENTIAL"
                                        | "CC_NODE";
                                    approver_chosen_multi: boolean;
                                    approver_chosen_range?: Array<{
                                        approver_range_type?: number;
                                        approver_range_ids?: Array<string>;
                                    }>;
                                    require_signature?: boolean;
                                }>;
                                viewers: Array<{
                                    type:
                                        | "TENANT"
                                        | "DEPARTMENT"
                                        | "USER"
                                        | "ROLE"
                                        | "USER_GROUP"
                                        | "NONE";
                                    id?: string;
                                    user_id?: string;
                                }>;
                                approval_admin_ids?: Array<string>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/approvals/:approval_code`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        locale?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/approval/v4/approvals`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    approval_code: string;
                                                    approval_name?: string;
                                                }>;
                                                page_token?: string;
                                                has_more: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=approval&apiName=list&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/list document }
             *
             * 查询审批定义列表
             *
             * 查询当前用户可发起的审批定义列表。
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        locale?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    approval_code: string;
                                    approval_name?: string;
                                }>;
                                page_token?: string;
                                has_more: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/approvals`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=approval&apiName=subscribe&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/subscribe document }
             *
             * 订阅审批事件
             *
             * 应用订阅 approval_code 后，该应用就可以收到该审批定义对应实例的事件通知。同一应用只需要订阅一次，无需重复订阅。;;当应用不希望再收到审批事件时，可以使用取消订阅接口进行取消，取消后将不再给应用推送消息。;;订阅和取消订阅都是应用维度的，多个应用可以同时订阅同一个 approval_code，每个应用都能收到审批事件。
             */
            subscribe: async (
                payload?: {
                    path: { approval_code: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/approvals/:approval_code/subscribe`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=approval&apiName=unsubscribe&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/unsubscribe document }
             *
             * 取消订阅审批事件
             *
             * 取消订阅 approval_code 后，无法再收到该审批定义对应实例的事件通知
             */
            unsubscribe: async (
                payload?: {
                    path?: { approval_code?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/approvals/:approval_code/unsubscribe`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 三方审批定义
         */
        externalApproval: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=external_approval&apiName=create&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_approval/create document }
             *
             * 三方审批定义创建
             *
             * 审批定义是审批的描述，包括审批名称、图标、描述等基础信息。创建好审批定义，用户就可以在审批应用的发起页中看到审批，如果用户点击发起，则会跳转到配置的发起三方系统地址去发起审批。;;另外，审批定义还配置了审批操作时的回调地址：审批人在待审批列表中进行【同意】【拒绝】操作时，审批中心会调用回调地址通知三方系统。
             *
             * 注意，审批中心不负责审批流程的流转，只负责展示、操作、消息通知。因此审批定义创建时没有审批流程的信息。
             */
            create: async (
                payload?: {
                    data: {
                        approval_name: string;
                        approval_code: string;
                        group_code: string;
                        group_name?: string;
                        description?: string;
                        external: {
                            biz_name?: string;
                            biz_type?: string;
                            create_link_mobile?: string;
                            create_link_pc?: string;
                            support_pc?: boolean;
                            support_mobile?: boolean;
                            support_batch_read?: boolean;
                            enable_mark_readed?: boolean;
                            enable_quick_operate?: boolean;
                            action_callback_url?: string;
                            action_callback_token?: string;
                            action_callback_key?: string;
                            allow_batch_operate?: boolean;
                            exclude_efficiency_statistics?: boolean;
                        };
                        viewers?: Array<{
                            viewer_type?:
                                | "TENANT"
                                | "DEPARTMENT"
                                | "USER"
                                | "NONE";
                            viewer_user_id?: string;
                            viewer_department_id?: string;
                        }>;
                        i18n_resources?: Array<{
                            locale: "zh-CN" | "en-US" | "ja-JP";
                            texts: Array<{ key: string; value: string }>;
                            is_default: boolean;
                        }>;
                        managers?: Array<string>;
                    };
                    params?: {
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { approval_code: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/external_approvals`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 三方审批实例
         */
        externalInstance: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=external_instance&apiName=check&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_instance/check document }
             *
             * 三方审批实例校验
             *
             * 校验三方审批实例数据，用于判断服务端数据是否为最新的。用户提交实例最新更新时间，如果服务端不存在该实例，或者服务端实例更新时间不是最新的，则返回对应实例 id。;;例如，用户可以每隔5分钟，将最近5分钟产生的实例使用该接口进行对比。
             */
            check: async (
                payload?: {
                    data: {
                        instances: Array<{
                            instance_id: string;
                            update_time: string;
                            tasks: Array<{
                                task_id: string;
                                update_time: string;
                            }>;
                        }>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                diff_instances?: Array<{
                                    instance_id: string;
                                    update_time?: string;
                                    tasks?: Array<{
                                        task_id: string;
                                        update_time: string;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/external_instances/check`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=external_instance&apiName=create&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_instance/create document }
             *
             * 三方审批实例同步
             *
             * 审批中心不负责审批的流转，审批的流转在三方系统，三方系统在审批流转后生成的审批实例、审批任务、审批抄送数据同步到审批中心。;;用户可以在审批中心中浏览三方系统同步过来的实例、任务、抄送信息，并且可以跳转回三方系统进行更详细的查看和操作，其中实例信息在【已发起】列表，任务信息在【待审批】和【已审批】列表，抄送信息在【抄送我】列表;;:::html;<img src="//sf3-cn.feishucdn.com/obj/open-platform-opendoc/9dff4434afbeb0ef69de7f36b9a6e995_z5iwmTzEgg.png" alt="" style="zoom:17%;" />;;;<img src="//sf3-cn.feishucdn.com/obj/open-platform-opendoc/ca6e0e984a7a6d64e1b16a0bac4bf868_tfqjCiaJQM.png" alt="" style="zoom:17%;" />;;;<img src="//sf3-cn.feishucdn.com/obj/open-platform-opendoc/529377e238df78d391bbd22e962ad195_T7eefLI1GA.png" alt="" style="zoom:17%;" />;:::;;对于审批任务，三方系统也可以配置审批任务的回调接口，这样审批人可以在审批中心中直接进行审批操作，审批中心会回调三方系统，三方系统收到回调后更新任务信息，并将新的任务信息同步回审批中心，形成闭环。;;:::html;<img src="//sf3-cn.feishucdn.com/obj/open-platform-opendoc/721c35428bc1187db3318c572f9979ad_je75QpElcg.png" alt=""  style="zoom:25%;" />;:::;<br>
             */
            create: async (
                payload?: {
                    data: {
                        approval_code: string;
                        status:
                            | "PENDING"
                            | "APPROVED"
                            | "REJECTED"
                            | "CANCELED"
                            | "DELETED"
                            | "HIDDEN"
                            | "TERMINATED";
                        extra?: string;
                        instance_id: string;
                        links: { pc_link: string; mobile_link?: string };
                        title?: string;
                        form?: Array<{ name?: string; value?: string }>;
                        user_id?: string;
                        user_name?: string;
                        open_id?: string;
                        department_id?: string;
                        department_name?: string;
                        start_time: string;
                        end_time: string;
                        update_time: string;
                        display_method?:
                            | "BROWSER"
                            | "SIDEBAR"
                            | "NORMAL"
                            | "TRUSTEESHIP";
                        update_mode?: "REPLACE" | "UPDATE";
                        task_list?: Array<{
                            task_id: string;
                            user_id?: string;
                            open_id?: string;
                            title?: string;
                            links: { pc_link: string; mobile_link?: string };
                            status:
                                | "PENDING"
                                | "APPROVED"
                                | "REJECTED"
                                | "TRANSFERRED"
                                | "DONE";
                            extra?: string;
                            create_time: string;
                            end_time: string;
                            update_time?: string;
                            action_context?: string;
                            action_configs?: Array<{
                                action_type: string;
                                action_name?: string;
                                is_need_reason?: boolean;
                                is_reason_required?: boolean;
                                is_need_attachment?: boolean;
                            }>;
                            display_method?:
                                | "BROWSER"
                                | "SIDEBAR"
                                | "NORMAL"
                                | "TRUSTEESHIP";
                            exclude_statistics?: boolean;
                            node_id?: string;
                            node_name?: string;
                        }>;
                        cc_list?: Array<{
                            cc_id: string;
                            user_id?: string;
                            open_id?: string;
                            links: { pc_link: string; mobile_link?: string };
                            read_status: "READ" | "UNREAD";
                            extra?: string;
                            title?: string;
                            create_time: string;
                            update_time: string;
                            display_method?:
                                | "BROWSER"
                                | "SIDEBAR"
                                | "NORMAL"
                                | "TRUSTEESHIP";
                        }>;
                        i18n_resources: Array<{
                            locale: "zh-CN" | "en-US" | "ja-JP";
                            texts: Array<{ key: string; value: string }>;
                            is_default: boolean;
                        }>;
                        trusteeship_url_token?: string;
                        trusteeship_user_id_type?: string;
                        trusteeship_urls?: {
                            form_detail_url?: string;
                            action_definition_url?: string;
                            approval_node_url?: string;
                            action_callback_url?: string;
                            pull_business_data_url?: string;
                        };
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                data?: {
                                    approval_code: string;
                                    status:
                                        | "PENDING"
                                        | "APPROVED"
                                        | "REJECTED"
                                        | "CANCELED"
                                        | "DELETED"
                                        | "HIDDEN"
                                        | "TERMINATED";
                                    extra?: string;
                                    instance_id: string;
                                    links: {
                                        pc_link: string;
                                        mobile_link?: string;
                                    };
                                    title?: string;
                                    form?: Array<{
                                        name?: string;
                                        value?: string;
                                    }>;
                                    user_id?: string;
                                    user_name?: string;
                                    open_id?: string;
                                    department_id?: string;
                                    department_name?: string;
                                    start_time: string;
                                    end_time: string;
                                    update_time: string;
                                    display_method?:
                                        | "BROWSER"
                                        | "SIDEBAR"
                                        | "NORMAL"
                                        | "TRUSTEESHIP";
                                    update_mode?: "REPLACE" | "UPDATE";
                                    task_list?: Array<{
                                        task_id: string;
                                        user_id?: string;
                                        open_id?: string;
                                        title?: string;
                                        links: {
                                            pc_link: string;
                                            mobile_link?: string;
                                        };
                                        status:
                                            | "PENDING"
                                            | "APPROVED"
                                            | "REJECTED"
                                            | "TRANSFERRED"
                                            | "DONE";
                                        extra?: string;
                                        create_time: string;
                                        end_time: string;
                                        update_time?: string;
                                        action_context?: string;
                                        action_configs?: Array<{
                                            action_type: string;
                                            action_name?: string;
                                            is_need_reason?: boolean;
                                            is_reason_required?: boolean;
                                            is_need_attachment?: boolean;
                                        }>;
                                        display_method?:
                                            | "BROWSER"
                                            | "SIDEBAR"
                                            | "NORMAL"
                                            | "TRUSTEESHIP";
                                        exclude_statistics?: boolean;
                                        node_id?: string;
                                        node_name?: string;
                                    }>;
                                    cc_list?: Array<{
                                        cc_id: string;
                                        user_id?: string;
                                        open_id?: string;
                                        links: {
                                            pc_link: string;
                                            mobile_link?: string;
                                        };
                                        read_status: "READ" | "UNREAD";
                                        extra?: string;
                                        title?: string;
                                        create_time: string;
                                        update_time: string;
                                        display_method?:
                                            | "BROWSER"
                                            | "SIDEBAR"
                                            | "NORMAL"
                                            | "TRUSTEESHIP";
                                    }>;
                                    i18n_resources: Array<{
                                        locale: "zh-CN" | "en-US" | "ja-JP";
                                        texts: Array<{
                                            key: string;
                                            value: string;
                                        }>;
                                        is_default: boolean;
                                    }>;
                                    trusteeship_url_token?: string;
                                    trusteeship_user_id_type?: string;
                                    trusteeship_urls?: {
                                        form_detail_url?: string;
                                        action_definition_url?: string;
                                        approval_node_url?: string;
                                        action_callback_url?: string;
                                        pull_business_data_url?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/external_instances`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 三方审批任务
         */
        externalTask: {
            listWithIterator: async (
                payload?: {
                    data?: {
                        approval_codes?: Array<string>;
                        instance_ids?: Array<string>;
                        user_ids?: Array<string>;
                        status?:
                            | "PENDING"
                            | "APPROVED"
                            | "REJECTED"
                            | "TRANSFERRED"
                            | "DONE";
                    };
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/approval/v4/external_tasks`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                data?: Array<{
                                                    instance_id: string;
                                                    approval_id: string;
                                                    approval_code: string;
                                                    status:
                                                        | "PENDING"
                                                        | "APPROVED"
                                                        | "REJECTED"
                                                        | "CANCELED"
                                                        | "DELETED"
                                                        | "HIDDEN";
                                                    update_time: string;
                                                    tasks?: Array<{
                                                        id: string;
                                                        status:
                                                            | "PENDING"
                                                            | "APPROVED"
                                                            | "REJECTED"
                                                            | "TRANSFERRED"
                                                            | "DONE";
                                                        update_time: string;
                                                    }>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=external_task&apiName=list&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_task/list document }
             *
             * 获取三方审批任务状态
             *
             * 该接口用于获取三方审批的状态。用户传入查询条件，接口返回满足条件的审批实例的状态。该接口支持多种参数的组合，包括如下组合：;;1.通过 instance_ids 获取指定实例的任务状态;;2.通过 user_ids 获取指定用户的任务状态;;3.通过 status 获取指定状态的所有任务;;4.通过page_token获取下一批数据
             */
            list: async (
                payload?: {
                    data?: {
                        approval_codes?: Array<string>;
                        instance_ids?: Array<string>;
                        user_ids?: Array<string>;
                        status?:
                            | "PENDING"
                            | "APPROVED"
                            | "REJECTED"
                            | "TRANSFERRED"
                            | "DONE";
                    };
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                data?: Array<{
                                    instance_id: string;
                                    approval_id: string;
                                    approval_code: string;
                                    status:
                                        | "PENDING"
                                        | "APPROVED"
                                        | "REJECTED"
                                        | "CANCELED"
                                        | "DELETED"
                                        | "HIDDEN";
                                    update_time: string;
                                    tasks?: Array<{
                                        id: string;
                                        status:
                                            | "PENDING"
                                            | "APPROVED"
                                            | "REJECTED"
                                            | "TRANSFERRED"
                                            | "DONE";
                                        update_time: string;
                                    }>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/external_tasks`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 原生审批实例
         */
        instance: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=add_sign&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/ukTM5UjL5ETO14SOxkTN/approval-task-addsign document }
             */
            addSign: async (
                payload?: {
                    data: {
                        user_id: string;
                        approval_code: string;
                        instance_code: string;
                        task_id: string;
                        comment?: string;
                        add_sign_user_ids: Array<string>;
                        add_sign_type: number;
                        approval_method?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/add_sign`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=cancel&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/cancel document }
             *
             * 审批实例撤回
             *
             * 对于状态为“审批中”的单个审批实例进行撤销操作，撤销后审批流程结束
             */
            cancel: async (
                payload?: {
                    data: {
                        approval_code: string;
                        instance_code: string;
                        user_id: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/cancel`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=cc&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/cc document }
             *
             * 审批实例抄送
             *
             * 通过接口可以将当前审批实例抄送给其他人。
             */
            cc: async (
                payload?: {
                    data: {
                        approval_code: string;
                        instance_code: string;
                        user_id: string;
                        cc_user_ids: Array<string>;
                        comment?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/cc`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=create&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/create document }
             *
             * 创建审批实例
             *
             * 创建一个审批实例，调用方需对审批定义的表单有详细了解，将按照定义的表单结构，将表单 Value 通过接口传入
             */
            create: async (
                payload?: {
                    data: {
                        approval_code: string;
                        user_id?: string;
                        open_id?: string;
                        department_id?: string;
                        form: string;
                        node_approver_user_id_list?: Array<{
                            key?: string;
                            value?: Array<string>;
                        }>;
                        node_approver_open_id_list?: Array<{
                            key?: string;
                            value?: Array<string>;
                        }>;
                        node_cc_user_id_list?: Array<{
                            key?: string;
                            value?: Array<string>;
                        }>;
                        node_cc_open_id_list?: Array<{
                            key?: string;
                            value?: Array<string>;
                        }>;
                        uuid?: string;
                        allow_resubmit?: boolean;
                        allow_submit_again?: boolean;
                        cancel_bot_notification?: string;
                        forbid_revoke?: boolean;
                        i18n_resources?: Array<{
                            locale: "zh-CN" | "en-US" | "ja-JP";
                            texts: Array<{ key: string; value: string }>;
                            is_default: boolean;
                        }>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { instance_code: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=get&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/get document }
             *
             * 获取单个审批实例详情
             *
             * 通过审批实例 Instance Code  获取审批实例详情。Instance Code 由 [批量获取审批实例](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/list) 接口获取。
             */
            get: async (
                payload?: {
                    params?: {
                        locale?: "zh-CN" | "en-US" | "ja-JP";
                        user_id?: string;
                        user_id_type?: "user_id" | "open_id" | "union_id";
                    };
                    path: { instance_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                approval_name: string;
                                start_time?: string;
                                end_time: string;
                                user_id: string;
                                open_id: string;
                                serial_number: string;
                                department_id: string;
                                status:
                                    | "PENDING"
                                    | "APPROVED"
                                    | "REJECTED"
                                    | "CANCELED"
                                    | "DELETED";
                                uuid: string;
                                form: string;
                                task_list: Array<{
                                    id: string;
                                    user_id: string;
                                    open_id?: string;
                                    status:
                                        | "PENDING"
                                        | "APPROVED"
                                        | "REJECTED"
                                        | "TRANSFERRED"
                                        | "DONE";
                                    node_id?: string;
                                    node_name?: string;
                                    custom_node_id?: string;
                                    type?:
                                        | "AND"
                                        | "OR"
                                        | "AUTO_PASS"
                                        | "AUTO_REJECT"
                                        | "SEQUENTIAL";
                                    start_time: string;
                                    end_time?: string;
                                }>;
                                comment_list: Array<{
                                    id: string;
                                    user_id: string;
                                    open_id: string;
                                    comment: string;
                                    create_time: string;
                                    files?: Array<{
                                        url?: string;
                                        file_size?: number;
                                        title?: string;
                                        type?: string;
                                    }>;
                                }>;
                                timeline: Array<{
                                    type:
                                        | "START"
                                        | "PASS"
                                        | "REJECT"
                                        | "AUTO_PASS"
                                        | "AUTO_REJECT"
                                        | "REMOVE_REPEAT"
                                        | "TRANSFER"
                                        | "ADD_APPROVER_BEFORE"
                                        | "ADD_APPROVER"
                                        | "ADD_APPROVER_AFTER"
                                        | "DELETE_APPROVER"
                                        | "ROLLBACK_SELECTED"
                                        | "ROLLBACK"
                                        | "CANCEL"
                                        | "DELETE"
                                        | "CC";
                                    create_time: string;
                                    user_id?: string;
                                    open_id?: string;
                                    user_id_list?: Array<string>;
                                    open_id_list?: Array<string>;
                                    task_id?: string;
                                    comment?: string;
                                    cc_user_list?: Array<{
                                        user_id?: string;
                                        cc_id?: string;
                                        open_id?: string;
                                    }>;
                                    ext: string;
                                    node_key?: string;
                                    files?: Array<{
                                        url?: string;
                                        file_size?: number;
                                        title?: string;
                                        type?: string;
                                    }>;
                                }>;
                                modified_instance_code?: string;
                                reverted_instance_code?: string;
                                approval_code: string;
                                reverted?: boolean;
                                instance_code: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/:instance_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params: {
                        page_size?: number;
                        page_token?: string;
                        approval_code: string;
                        start_time: string;
                        end_time: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/approval/v4/instances`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                instance_code_list: Array<string>;
                                                page_token: string;
                                                has_more: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=list&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/list document }
             *
             * 批量获取审批实例ID
             *
             * 根据 approval_code 批量获取审批实例的 instance_code，用于拉取租户下某个审批定义的全部审批实例。默认以审批创建时间先后顺序排列
             */
            list: async (
                payload?: {
                    params: {
                        page_size?: number;
                        page_token?: string;
                        approval_code: string;
                        start_time: string;
                        end_time: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                instance_code_list: Array<string>;
                                page_token: string;
                                has_more: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=preview&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/ukTM5UjL5ETO14SOxkTN/approval-preview document }
             */
            preview: async (
                payload?: {
                    data: {
                        user_id: string;
                        approval_code?: string;
                        department_id?: string;
                        form?: string;
                        instance_code?: string;
                        locale?: string;
                        task_id?: string;
                    };
                    params?: {
                        user_id_type?: "open_id" | "user_id" | "union_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                preview_nodes?: Array<{
                                    node_id?: string;
                                    node_name?: string;
                                    node_type?: string;
                                    comments?: Array<string>;
                                    custom_node_id?: string;
                                    user_id_list?: Array<string>;
                                    end_cc_id_list?: Array<string>;
                                    is_empty_logic?: boolean;
                                    is_approver_type_free?: boolean;
                                    has_cc_type_free?: boolean;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/preview`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            queryWithIterator: async (
                payload?: {
                    data?: {
                        user_id?: string;
                        approval_code?: string;
                        instance_code?: string;
                        instance_external_id?: string;
                        group_external_id?: string;
                        instance_title?: string;
                        instance_status?:
                            | "PENDING"
                            | "RECALL"
                            | "REJECT"
                            | "DELETED"
                            | "APPROVED"
                            | "ALL";
                        instance_start_time_from?: string;
                        instance_start_time_to?: string;
                        locale?: "zh-CN" | "en-US" | "ja-JP";
                    };
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/approval/v4/instances/query`,
                                path
                            ),
                            method: "POST",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                count?: number;
                                                instance_list?: Array<{
                                                    approval?: {
                                                        code?: string;
                                                        name?: string;
                                                        is_external?: boolean;
                                                        external?: {
                                                            batch_cc_read?: boolean;
                                                        };
                                                        approval_id?: string;
                                                        icon?: string;
                                                    };
                                                    group?: {
                                                        external_id?: string;
                                                        name?: string;
                                                    };
                                                    instance?: {
                                                        code?: string;
                                                        external_id?: string;
                                                        user_id?: string;
                                                        start_time?: string;
                                                        end_time?: string;
                                                        status?:
                                                            | "reject"
                                                            | "pending"
                                                            | "recall"
                                                            | "deleted"
                                                            | "approved";
                                                        title?: string;
                                                        extra?: string;
                                                        serial_id?: string;
                                                        link?: {
                                                            pc_link?: string;
                                                            mobile_link?: string;
                                                        };
                                                    };
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=query&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/query document }
             *
             * 查询实例列表
             *
             * 该接口通过不同条件查询审批系统中符合条件的审批实例列表。
             */
            query: async (
                payload?: {
                    data?: {
                        user_id?: string;
                        approval_code?: string;
                        instance_code?: string;
                        instance_external_id?: string;
                        group_external_id?: string;
                        instance_title?: string;
                        instance_status?:
                            | "PENDING"
                            | "RECALL"
                            | "REJECT"
                            | "DELETED"
                            | "APPROVED"
                            | "ALL";
                        instance_start_time_from?: string;
                        instance_start_time_to?: string;
                        locale?: "zh-CN" | "en-US" | "ja-JP";
                    };
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                count?: number;
                                instance_list?: Array<{
                                    approval?: {
                                        code?: string;
                                        name?: string;
                                        is_external?: boolean;
                                        external?: { batch_cc_read?: boolean };
                                        approval_id?: string;
                                        icon?: string;
                                    };
                                    group?: {
                                        external_id?: string;
                                        name?: string;
                                    };
                                    instance?: {
                                        code?: string;
                                        external_id?: string;
                                        user_id?: string;
                                        start_time?: string;
                                        end_time?: string;
                                        status?:
                                            | "reject"
                                            | "pending"
                                            | "recall"
                                            | "deleted"
                                            | "approved";
                                        title?: string;
                                        extra?: string;
                                        serial_id?: string;
                                        link?: {
                                            pc_link?: string;
                                            mobile_link?: string;
                                        };
                                    };
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=search_cc&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/search_cc document }
             *
             * 查询抄送列表
             *
             * 该接口通过不同条件查询审批系统中符合条件的审批抄送列表。
             */
            searchCc: async (
                payload?: {
                    data?: {
                        user_id?: string;
                        approval_code?: string;
                        instance_code?: string;
                        instance_external_id?: string;
                        group_external_id?: string;
                        cc_title?: string;
                        read_status?: "READ" | "UNREAD" | "ALL";
                        cc_create_time_from?: string;
                        cc_create_time_to?: string;
                        locale?: "zh-CN" | "en-US" | "ja-JP";
                    };
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                count?: number;
                                cc_list?: Array<{
                                    approval?: {
                                        code?: string;
                                        name?: string;
                                        is_external?: boolean;
                                        external?: { batch_cc_read?: boolean };
                                        approval_id?: string;
                                        icon?: string;
                                    };
                                    group?: {
                                        external_id?: string;
                                        name?: string;
                                    };
                                    instance?: {
                                        code?: string;
                                        external_id?: string;
                                        user_id?: string;
                                        start_time?: string;
                                        end_time?: string;
                                        status?:
                                            | "reject"
                                            | "pending"
                                            | "recall"
                                            | "deleted"
                                            | "approved";
                                        title?: string;
                                        extra?: string;
                                        serial_id?: string;
                                        link?: {
                                            pc_link?: string;
                                            mobile_link?: string;
                                        };
                                    };
                                    cc?: {
                                        user_id?: string;
                                        create_time?: string;
                                        read_status?: "read" | "unread";
                                        title?: string;
                                        extra?: string;
                                        link?: {
                                            pc_link?: string;
                                            mobile_link?: string;
                                        };
                                    };
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/search_cc`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=specified_rollback&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/specified_rollback document }
             *
             * 审批任务退回
             *
             * 从当前审批任务，退回到已审批的一个或多个任务节点。退回后，已审批节点重新生成审批任务
             */
            specifiedRollback: async (
                payload?: {
                    data: {
                        user_id: string;
                        task_id: string;
                        reason?: string;
                        extra?: string;
                        task_def_key_list: Array<string>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/specified_rollback`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 原生审批评论
         */
        instanceComment: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance.comment&apiName=create&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance-comment/create document }
             *
             * 创建评论
             *
             * 在某审批实例下创建、修改评论或评论回复（不包含审批同意、拒绝、转交等附加的理由或意见）。
             */
            create: async (
                payload?: {
                    data?: {
                        content?: string;
                        at_info_list?: Array<{
                            user_id: string;
                            name: string;
                            offset: string;
                        }>;
                        parent_comment_id?: string;
                        comment_id?: string;
                        disable_bot?: boolean;
                        extra?: string;
                    };
                    params: {
                        user_id_type?: "open_id" | "user_id" | "union_id";
                        user_id: string;
                    };
                    path: { instance_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { comment_id: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/:instance_id/comments`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance.comment&apiName=delete&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance-comment/delete document }
             *
             * 删除评论
             *
             * 逻辑删除某审批实例下的一条评论或评论回复（不包含审批同意、拒绝、转交等附加的理由或意见）。
             */
            delete: async (
                payload?: {
                    params: {
                        user_id_type?: "open_id" | "user_id" | "union_id";
                        user_id: string;
                    };
                    path: { instance_id: string; comment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { comment_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/:instance_id/comments/:comment_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params: {
                        user_id_type?: "open_id" | "user_id" | "union_id";
                        user_id: string;
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { instance_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/approval/v4/instances/:instance_id/comments`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                comments: Array<{
                                                    id: string;
                                                    content: string;
                                                    create_time: string;
                                                    update_time: string;
                                                    is_delete: number;
                                                    replies?: Array<{
                                                        id: string;
                                                        content: string;
                                                        create_time?: string;
                                                        update_time?: string;
                                                        is_delete: number;
                                                        at_info_list?: Array<{
                                                            user_id: string;
                                                            name: string;
                                                            offset: string;
                                                        }>;
                                                        commentator: string;
                                                        extra?: string;
                                                    }>;
                                                    at_info_list?: Array<{
                                                        user_id: string;
                                                        name: string;
                                                        offset: string;
                                                    }>;
                                                    commentator: string;
                                                    extra?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance.comment&apiName=list&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance-comment/list document }
             *
             * 获取评论
             *
             * 根据 Instance Code 获取某个审批实例下的全部评论与评论回复（不包含审批同意、拒绝、转交等附加的理由或意见）。
             */
            list: async (
                payload?: {
                    params: {
                        user_id_type?: "open_id" | "user_id" | "union_id";
                        user_id: string;
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { instance_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                comments: Array<{
                                    id: string;
                                    content: string;
                                    create_time: string;
                                    update_time: string;
                                    is_delete: number;
                                    replies?: Array<{
                                        id: string;
                                        content: string;
                                        create_time?: string;
                                        update_time?: string;
                                        is_delete: number;
                                        at_info_list?: Array<{
                                            user_id: string;
                                            name: string;
                                            offset: string;
                                        }>;
                                        commentator: string;
                                        extra?: string;
                                    }>;
                                    at_info_list?: Array<{
                                        user_id: string;
                                        name: string;
                                        offset: string;
                                    }>;
                                    commentator: string;
                                    extra?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/:instance_id/comments`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance.comment&apiName=remove&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance-comment/remove document }
             *
             * 清空评论
             *
             * 删除某审批实例下的全部评论与评论回复。
             */
            remove: async (
                payload?: {
                    params?: {
                        user_id_type?: "open_id" | "user_id" | "union_id";
                        user_id?: string;
                    };
                    path: { instance_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                instance_id?: string;
                                external_id?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/:instance_id/comments/remove`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 原生审批任务
         */
        task: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=approve&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/approve document }
             *
             * 审批任务同意
             *
             * 对于单个审批任务进行同意操作。同意后审批流程会流转到下一个审批人。
             */
            approve: async (
                payload?: {
                    data: {
                        approval_code: string;
                        instance_code: string;
                        user_id: string;
                        comment?: string;
                        task_id: string;
                        form?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/tasks/approve`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            queryWithIterator: async (
                payload?: {
                    params: {
                        page_size?: number;
                        page_token?: string;
                        user_id: string;
                        topic: "1" | "2" | "3" | "17" | "18";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/approval/v4/tasks/query`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                tasks: Array<{
                                                    topic:
                                                        | "1"
                                                        | "2"
                                                        | "3"
                                                        | "17"
                                                        | "18";
                                                    user_id: string;
                                                    title: string;
                                                    urls: {
                                                        helpdesk?: string;
                                                        mobile?: string;
                                                        pc?: string;
                                                    };
                                                    process_external_id?: string;
                                                    task_external_id?: string;
                                                    status:
                                                        | "1"
                                                        | "2"
                                                        | "17"
                                                        | "18"
                                                        | "33"
                                                        | "34";
                                                    process_status:
                                                        | "0"
                                                        | "1"
                                                        | "2"
                                                        | "3"
                                                        | "4"
                                                        | "5";
                                                    definition_code: string;
                                                    initiators?: Array<string>;
                                                    initiator_names?: Array<string>;
                                                    task_id: string;
                                                    process_id: string;
                                                    process_code: string;
                                                    definition_group_id?: string;
                                                    definition_group_name?: string;
                                                    definition_id?: string;
                                                    definition_name?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                                count?: {
                                                    total: number;
                                                    has_more?: boolean;
                                                };
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=query&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/query document }
             *
             * 用户角度列出任务
             *
             * 根据用户和任务分组查询任务列表
             */
            query: async (
                payload?: {
                    params: {
                        page_size?: number;
                        page_token?: string;
                        user_id: string;
                        topic: "1" | "2" | "3" | "17" | "18";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                tasks: Array<{
                                    topic: "1" | "2" | "3" | "17" | "18";
                                    user_id: string;
                                    title: string;
                                    urls: {
                                        helpdesk?: string;
                                        mobile?: string;
                                        pc?: string;
                                    };
                                    process_external_id?: string;
                                    task_external_id?: string;
                                    status:
                                        | "1"
                                        | "2"
                                        | "17"
                                        | "18"
                                        | "33"
                                        | "34";
                                    process_status:
                                        | "0"
                                        | "1"
                                        | "2"
                                        | "3"
                                        | "4"
                                        | "5";
                                    definition_code: string;
                                    initiators?: Array<string>;
                                    initiator_names?: Array<string>;
                                    task_id: string;
                                    process_id: string;
                                    process_code: string;
                                    definition_group_id?: string;
                                    definition_group_name?: string;
                                    definition_id?: string;
                                    definition_name?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                                count?: { total: number; has_more?: boolean };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/tasks/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=reject&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/reject document }
             *
             * 审批任务拒绝
             *
             * 对于单个审批任务进行拒绝操作。拒绝后审批流程结束。
             */
            reject: async (
                payload?: {
                    data: {
                        approval_code: string;
                        instance_code: string;
                        user_id: string;
                        comment?: string;
                        task_id: string;
                        form?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/tasks/reject`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=resubmit&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/resubmit document }
             *
             * 审批任务重新提交
             *
             * 对于单个退回到发起人的审批任务进行重新发起操作。发起后审批流程会流转到下一个审批人。
             */
            resubmit: async (
                payload?: {
                    data: {
                        approval_code: string;
                        instance_code: string;
                        user_id: string;
                        comment?: string;
                        task_id: string;
                        form: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/tasks/resubmit`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=search&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/search document }
             *
             * 查询任务列表
             *
             * 该接口通过不同条件查询审批系统中符合条件的审批任务列表
             */
            search: async (
                payload?: {
                    data?: {
                        user_id?: string;
                        approval_code?: string;
                        instance_code?: string;
                        instance_external_id?: string;
                        group_external_id?: string;
                        task_title?: string;
                        task_status?:
                            | "PENDING"
                            | "REJECTED"
                            | "APPROVED"
                            | "TRANSFERRED"
                            | "DONE"
                            | "RM_REPEAT"
                            | "PROCESSED"
                            | "ALL";
                        task_start_time_from?: string;
                        task_start_time_to?: string;
                        locale?: "zh-CN" | "en-US" | "ja-JP";
                        task_status_list?: Array<string>;
                        order?: number;
                    };
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                count?: number;
                                task_list?: Array<{
                                    approval?: {
                                        code?: string;
                                        name?: string;
                                        is_external?: boolean;
                                        external?: { batch_cc_read?: boolean };
                                        approval_id?: string;
                                        icon?: string;
                                    };
                                    group?: {
                                        external_id?: string;
                                        name?: string;
                                    };
                                    instance?: {
                                        code?: string;
                                        external_id?: string;
                                        user_id?: string;
                                        start_time?: string;
                                        end_time?: string;
                                        status?:
                                            | "reject"
                                            | "pending"
                                            | "recall"
                                            | "deleted"
                                            | "approved";
                                        title?: string;
                                        extra?: string;
                                        serial_id?: string;
                                        link?: {
                                            pc_link?: string;
                                            mobile_link?: string;
                                        };
                                    };
                                    task?: {
                                        user_id?: string;
                                        start_time?: string;
                                        end_time?: string;
                                        status?:
                                            | "rejected"
                                            | "pending"
                                            | "approved"
                                            | "transferred"
                                            | "done"
                                            | "rm_repeat"
                                            | "processed"
                                            | "hidden";
                                        title?: string;
                                        extra?: string;
                                        link?: {
                                            pc_link?: string;
                                            mobile_link?: string;
                                        };
                                        task_id?: string;
                                        update_time?: string;
                                        task_external_id?: string;
                                    };
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/tasks/search`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=transfer&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/transfer document }
             *
             * 审批任务转交
             *
             * 对于单个审批任务进行转交操作。转交后审批流程流转给被转交人。
             */
            transfer: async (
                payload?: {
                    data: {
                        approval_code: string;
                        instance_code: string;
                        user_id: string;
                        comment?: string;
                        transfer_user_id: string;
                        task_id: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/tasks/transfer`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * 打卡
     */
    attendance = {
        /**
         * approval_info
         */
        approvalInfo: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=approval_info&apiName=process&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/approval_info/process document }
             *
             * 通知审批状态更新
             *
             * 对于只使用飞书考勤系统而未使用飞书审批系统的企业，可以通过该接口更新写入飞书考勤系统中的三方系统审批状态，例如请假、加班、外出、出差、补卡等审批，状态包括通过、不通过、撤销等。
             *
             * 发起状态的审批才可以被更新为通过、不通过，已经通过的审批才可以被更新为撤销。
             */
            process: async (
                payload?: {
                    data: {
                        approval_id: string;
                        approval_type: string;
                        status: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                approval_info?: {
                                    approval_id: string;
                                    approval_type:
                                        | "leave"
                                        | "overtime"
                                        | "trip"
                                        | "out"
                                        | "remedy";
                                    status: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/approval_infos/process`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 文件
         */
        file: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=file&apiName=download&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/download document }
             *
             * 下载文件
             *
             * 通过文件 ID 下载指定的文件。
             */
            download: async (
                payload?: {
                    path: { file_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/files/:file_id/download`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        return new Promise((resolve, reject) => {
                            const writableStream =
                                fs.createWriteStream(filePath);
                            writableStream.on("finish", () => {
                                resolve(filePath);
                            });
                            writableStream.on("error", (e) => {
                                reject(e);
                            });
                            res.pipe(writableStream);
                        });
                    },
                };
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=file&apiName=upload&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/upload document }
             *
             * 上传文件
             *
             * 上传文件并获取文件 ID，可用于“修改用户设置”接口中的 face_key 参数。
             */
            upload: async (
                payload?: {
                    data?: { file?: Buffer };
                    params: { file_name: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { file?: { file_id: string } };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/files/upload`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
        },
        /**
         * 考勤组管理
         */
        group: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=group&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create document }
             *
             * 创建或修改考勤组
             *
             * 考勤组，是对部门或者员工在某个特定场所及特定时间段内的出勤情况（包括上下班、迟到、早退、病假、婚假、丧假、公休、工作时间、加班情况等）的一种规则设定。;;通过设置考勤组，可以从部门、员工两个维度，来设定考勤方式、考勤时间、考勤地点等考勤规则。
             *
             * 出于安全考虑，目前通过该接口只允许修改自己创建的考勤组。
             */
            create: async (
                payload?: {
                    data: {
                        group: {
                            group_id?: string;
                            group_name: string;
                            time_zone: string;
                            bind_dept_ids?: Array<string>;
                            except_dept_ids?: Array<string>;
                            bind_user_ids?: Array<string>;
                            except_user_ids?: Array<string>;
                            group_leader_ids: Array<string>;
                            sub_group_leader_ids?: Array<string>;
                            allow_out_punch?: boolean;
                            out_punch_need_approval?: boolean;
                            out_punch_need_remark?: boolean;
                            out_punch_need_photo?: boolean;
                            out_punch_allowed_hide_addr?: boolean;
                            allow_pc_punch?: boolean;
                            allow_remedy?: boolean;
                            remedy_limit?: boolean;
                            remedy_limit_count?: number;
                            remedy_date_limit?: boolean;
                            remedy_date_num?: number;
                            allow_remedy_type_lack?: boolean;
                            allow_remedy_type_late?: boolean;
                            allow_remedy_type_early?: boolean;
                            allow_remedy_type_normal?: boolean;
                            show_cumulative_time?: boolean;
                            show_over_time?: boolean;
                            hide_staff_punch_time?: boolean;
                            face_punch?: boolean;
                            face_punch_cfg?: number;
                            face_downgrade?: boolean;
                            replace_basic_pic?: boolean;
                            machines?: Array<{
                                machine_sn: string;
                                machine_name: string;
                            }>;
                            gps_range?: number;
                            locations?: Array<{
                                location_name: string;
                                location_type: number;
                                latitude?: number;
                                longitude?: number;
                                ssid?: string;
                                bssid?: string;
                                map_type?: number;
                                address?: string;
                                ip?: string;
                                feature?: string;
                                gps_range?: number;
                            }>;
                            group_type: number;
                            punch_day_shift_ids: Array<string>;
                            free_punch_cfg?: {
                                free_start_time: string;
                                free_end_time: string;
                                punch_day: number;
                                work_day_no_punch_as_lack?: boolean;
                            };
                            calendar_id: number;
                            need_punch_special_days?: Array<{
                                punch_day: number;
                                shift_id: string;
                            }>;
                            no_need_punch_special_days?: Array<{
                                punch_day: number;
                                shift_id: string;
                            }>;
                            work_day_no_punch_as_lack?: boolean;
                            effect_now?: boolean;
                            remedy_period_type?: number;
                            remedy_period_custom_date?: number;
                            punch_type?: number;
                            rest_clockIn_need_approval?: boolean;
                            clockIn_need_photo?: boolean;
                        };
                        operator_id?: string;
                    };
                    params: {
                        employee_type: "employee_id" | "employee_no";
                        dept_type: "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                group?: {
                                    group_id?: string;
                                    group_name: string;
                                    time_zone: string;
                                    bind_dept_ids?: Array<string>;
                                    except_dept_ids?: Array<string>;
                                    bind_user_ids?: Array<string>;
                                    except_user_ids?: Array<string>;
                                    group_leader_ids: Array<string>;
                                    sub_group_leader_ids?: Array<string>;
                                    allow_out_punch?: boolean;
                                    out_punch_need_approval?: boolean;
                                    out_punch_need_remark?: boolean;
                                    out_punch_need_photo?: boolean;
                                    out_punch_allowed_hide_addr?: boolean;
                                    allow_pc_punch?: boolean;
                                    allow_remedy?: boolean;
                                    remedy_limit?: boolean;
                                    remedy_limit_count?: number;
                                    remedy_date_limit?: boolean;
                                    remedy_date_num?: number;
                                    allow_remedy_type_lack?: boolean;
                                    allow_remedy_type_late?: boolean;
                                    allow_remedy_type_early?: boolean;
                                    allow_remedy_type_normal?: boolean;
                                    show_cumulative_time?: boolean;
                                    show_over_time?: boolean;
                                    hide_staff_punch_time?: boolean;
                                    face_punch?: boolean;
                                    face_punch_cfg?: number;
                                    face_downgrade?: boolean;
                                    replace_basic_pic?: boolean;
                                    machines?: Array<{
                                        machine_sn: string;
                                        machine_name: string;
                                    }>;
                                    gps_range?: number;
                                    locations?: Array<{
                                        location_id?: string;
                                        location_name: string;
                                        location_type: number;
                                        latitude?: number;
                                        longitude?: number;
                                        ssid?: string;
                                        bssid?: string;
                                        map_type?: number;
                                        address?: string;
                                        ip?: string;
                                        feature?: string;
                                        gps_range?: number;
                                    }>;
                                    group_type: number;
                                    punch_day_shift_ids: Array<string>;
                                    free_punch_cfg?: {
                                        free_start_time: string;
                                        free_end_time: string;
                                        punch_day: number;
                                        work_day_no_punch_as_lack?: boolean;
                                    };
                                    calendar_id: number;
                                    need_punch_special_days?: Array<{
                                        punch_day: number;
                                        shift_id: string;
                                    }>;
                                    no_need_punch_special_days?: Array<{
                                        punch_day: number;
                                        shift_id: string;
                                    }>;
                                    work_day_no_punch_as_lack?: boolean;
                                    effect_now?: boolean;
                                    remedy_period_type?: number;
                                    remedy_period_custom_date?: number;
                                    punch_type?: number;
                                    effect_time?: string;
                                    fixshift_effect_time?: string;
                                    member_effect_time?: string;
                                    rest_clockIn_need_approval?: boolean;
                                    clockIn_need_photo?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/groups`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=group&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/delete document }
             *
             * 删除考勤组
             *
             * 通过班次 ID 删除班次。
             */
            delete: async (
                payload?: {
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/groups/:group_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=group&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/get document }
             *
             * 获取考勤组详情
             *
             * 通过考勤组 ID 获取考勤组详情。
             */
            get: async (
                payload?: {
                    params: {
                        employee_type: "employee_id" | "employee_no";
                        dept_type: "open_id";
                    };
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                group_id?: string;
                                group_name: string;
                                time_zone: string;
                                bind_dept_ids?: Array<string>;
                                except_dept_ids?: Array<string>;
                                bind_user_ids?: Array<string>;
                                except_user_ids?: Array<string>;
                                group_leader_ids: Array<string>;
                                sub_group_leader_ids?: Array<string>;
                                allow_out_punch?: boolean;
                                out_punch_need_approval?: boolean;
                                out_punch_need_remark?: boolean;
                                out_punch_need_photo?: boolean;
                                out_punch_allowed_hide_addr?: boolean;
                                allow_pc_punch?: boolean;
                                allow_remedy?: boolean;
                                remedy_limit?: boolean;
                                remedy_limit_count?: number;
                                remedy_date_limit?: boolean;
                                remedy_date_num?: number;
                                allow_remedy_type_lack?: boolean;
                                allow_remedy_type_late?: boolean;
                                allow_remedy_type_early?: boolean;
                                allow_remedy_type_normal?: boolean;
                                show_cumulative_time?: boolean;
                                show_over_time?: boolean;
                                hide_staff_punch_time?: boolean;
                                face_punch?: boolean;
                                face_punch_cfg?: number;
                                face_downgrade?: boolean;
                                replace_basic_pic?: boolean;
                                machines?: Array<{
                                    machine_sn: string;
                                    machine_name: string;
                                }>;
                                gps_range?: number;
                                locations?: Array<{
                                    location_id?: string;
                                    location_name: string;
                                    location_type: number;
                                    latitude?: number;
                                    longitude?: number;
                                    ssid?: string;
                                    bssid?: string;
                                    map_type?: number;
                                    address?: string;
                                    ip?: string;
                                    feature?: string;
                                    gps_range?: number;
                                }>;
                                group_type: number;
                                punch_day_shift_ids: Array<string>;
                                free_punch_cfg?: {
                                    free_start_time: string;
                                    free_end_time: string;
                                    punch_day: number;
                                    work_day_no_punch_as_lack?: boolean;
                                };
                                calendar_id: number;
                                need_punch_special_days?: Array<{
                                    punch_day: number;
                                    shift_id: string;
                                }>;
                                no_need_punch_special_days?: Array<{
                                    punch_day: number;
                                    shift_id: string;
                                }>;
                                work_day_no_punch_as_lack?: boolean;
                                remedy_period_type?: number;
                                remedy_period_custom_date?: number;
                                punch_type?: number;
                                effect_time?: string;
                                fixshift_effect_time?: string;
                                member_effect_time?: string;
                                rest_clockIn_need_approval?: boolean;
                                clockIn_need_photo?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/groups/:group_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/attendance/v1/groups`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                group_list?: Array<{
                                                    group_id: string;
                                                    group_name: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=group&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/list document }
             *
             * 获取考勤组列表
             *
             * 翻页获取所有考勤组列表。
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                group_list?: Array<{
                                    group_id: string;
                                    group_name: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/groups`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=group&apiName=search&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search document }
             *
             * 按名称查询考勤组
             *
             * 按考勤组名称查询考勤组摘要信息。查询条件支持名称精确匹配和模糊匹配两种方式。查询结果按考勤组修改时间 desc 排序，且最大记录数为 10 条。
             *
             * 该接口依赖的数据和考勤组主数据间存在数据同步延时（正常数据同步 2 秒以内），因此在使用该接口时需注意评估数据延迟潜在风险。
             */
            search: async (
                payload?: {
                    data: { group_name: string; exactly_matched?: boolean };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                group_list?: Array<{
                                    group_id: string;
                                    group_name: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/groups/search`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 考勤班次
         */
        shift: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=shift&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create document }
             *
             * 创建班次
             *
             * 班次是描述一次考勤任务时间规则的统称，比如一天打多少次卡，每次卡的上下班时间，晚到多长时间算迟到，晚到多长时间算缺卡等。
             *
             * - 创建一个考勤组前，必须先创建一个或者多个班次。;- 一个公司内的班次是共享的，你可以直接引用他人创建的班次，但是需要注意的是，若他人修改了班次，会影响到你的考勤组及其考勤结果。
             */
            create: async (
                payload?: {
                    data: {
                        shift_name: string;
                        punch_times: number;
                        is_flexible?: boolean;
                        flexible_minutes?: number;
                        flexible_rule?: Array<{
                            flexible_early_minutes: number;
                            flexible_late_minutes: number;
                        }>;
                        no_need_off?: boolean;
                        punch_time_rule: Array<{
                            on_time: string;
                            off_time: string;
                            late_minutes_as_late: number;
                            late_minutes_as_lack: number;
                            on_advance_minutes: number;
                            early_minutes_as_early: number;
                            early_minutes_as_lack: number;
                            off_delay_minutes: number;
                            late_minutes_as_serious_late?: number;
                        }>;
                        late_off_late_on_rule?: Array<{
                            late_off_minutes: number;
                            late_on_minutes: number;
                        }>;
                        rest_time_rule?: Array<{
                            rest_begin_time: string;
                            rest_end_time: string;
                        }>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                shift?: {
                                    shift_id: string;
                                    shift_name: string;
                                    punch_times: number;
                                    is_flexible?: boolean;
                                    flexible_minutes?: number;
                                    flexible_rule?: Array<{
                                        flexible_early_minutes: number;
                                        flexible_late_minutes: number;
                                    }>;
                                    no_need_off?: boolean;
                                    punch_time_rule: Array<{
                                        on_time: string;
                                        off_time: string;
                                        late_minutes_as_late: number;
                                        late_minutes_as_lack: number;
                                        on_advance_minutes: number;
                                        early_minutes_as_early: number;
                                        early_minutes_as_lack: number;
                                        off_delay_minutes: number;
                                        late_minutes_as_serious_late?: number;
                                    }>;
                                    late_off_late_on_rule?: Array<{
                                        late_off_minutes: number;
                                        late_on_minutes: number;
                                    }>;
                                    rest_time_rule?: Array<{
                                        rest_begin_time: string;
                                        rest_end_time: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/shifts`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=shift&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/delete document }
             *
             * 删除班次
             *
             * 通过班次 ID 删除班次。
             */
            delete: async (
                payload?: {
                    path: { shift_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/shifts/:shift_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=shift&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/get document }
             *
             * 获取班次详情
             *
             * 通过班次 ID 获取班次详情。
             */
            get: async (
                payload?: {
                    path: { shift_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                shift_id: string;
                                shift_name: string;
                                punch_times: number;
                                is_flexible?: boolean;
                                flexible_minutes?: number;
                                flexible_rule?: Array<{
                                    flexible_early_minutes: number;
                                    flexible_late_minutes: number;
                                }>;
                                no_need_off?: boolean;
                                punch_time_rule: Array<{
                                    on_time: string;
                                    off_time: string;
                                    late_minutes_as_late: number;
                                    late_minutes_as_lack: number;
                                    on_advance_minutes: number;
                                    early_minutes_as_early: number;
                                    early_minutes_as_lack: number;
                                    off_delay_minutes: number;
                                    late_minutes_as_serious_late?: number;
                                }>;
                                late_off_late_on_rule?: Array<{
                                    late_off_minutes: number;
                                    late_on_minutes: number;
                                }>;
                                rest_time_rule?: Array<{
                                    rest_begin_time: string;
                                    rest_end_time: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/shifts/:shift_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/attendance/v1/shifts`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                shift_list?: Array<{
                                                    shift_id: string;
                                                    shift_name: string;
                                                    punch_times: number;
                                                    is_flexible?: boolean;
                                                    flexible_minutes?: number;
                                                    flexible_rule?: Array<{
                                                        flexible_early_minutes: number;
                                                        flexible_late_minutes: number;
                                                    }>;
                                                    no_need_off?: boolean;
                                                    punch_time_rule: Array<{
                                                        on_time: string;
                                                        off_time: string;
                                                        late_minutes_as_late: number;
                                                        late_minutes_as_lack: number;
                                                        on_advance_minutes: number;
                                                        early_minutes_as_early: number;
                                                        early_minutes_as_lack: number;
                                                        off_delay_minutes: number;
                                                        late_minutes_as_serious_late?: number;
                                                    }>;
                                                    late_off_late_on_rule?: Array<{
                                                        late_off_minutes: number;
                                                        late_on_minutes: number;
                                                    }>;
                                                    rest_time_rule?: Array<{
                                                        rest_begin_time: string;
                                                        rest_end_time: string;
                                                    }>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=shift&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/list document }
             *
             * 获取班次列表
             *
             * 翻页获取所有班次列表。
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                shift_list?: Array<{
                                    shift_id: string;
                                    shift_name: string;
                                    punch_times: number;
                                    is_flexible?: boolean;
                                    flexible_minutes?: number;
                                    flexible_rule?: Array<{
                                        flexible_early_minutes: number;
                                        flexible_late_minutes: number;
                                    }>;
                                    no_need_off?: boolean;
                                    punch_time_rule: Array<{
                                        on_time: string;
                                        off_time: string;
                                        late_minutes_as_late: number;
                                        late_minutes_as_lack: number;
                                        on_advance_minutes: number;
                                        early_minutes_as_early: number;
                                        early_minutes_as_lack: number;
                                        off_delay_minutes: number;
                                        late_minutes_as_serious_late?: number;
                                    }>;
                                    late_off_late_on_rule?: Array<{
                                        late_off_minutes: number;
                                        late_on_minutes: number;
                                    }>;
                                    rest_time_rule?: Array<{
                                        rest_begin_time: string;
                                        rest_end_time: string;
                                    }>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/shifts`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=shift&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query document }
             *
             * 按名称查询班次
             *
             * 通过班次的名称查询班次信息。
             */
            query: async (
                payload?: {
                    params: { shift_name: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                shift_id: string;
                                shift_name: string;
                                punch_times: number;
                                is_flexible?: boolean;
                                flexible_minutes?: number;
                                flexible_rule?: Array<{
                                    flexible_early_minutes: number;
                                    flexible_late_minutes: number;
                                }>;
                                no_need_off?: boolean;
                                punch_time_rule: Array<{
                                    on_time: string;
                                    off_time: string;
                                    late_minutes_as_late: number;
                                    late_minutes_as_lack: number;
                                    on_advance_minutes: number;
                                    early_minutes_as_early: number;
                                    early_minutes_as_lack: number;
                                    off_delay_minutes: number;
                                    late_minutes_as_serious_late?: number;
                                }>;
                                late_off_late_on_rule?: Array<{
                                    late_off_minutes: number;
                                    late_on_minutes: number;
                                }>;
                                rest_time_rule?: Array<{
                                    rest_begin_time: string;
                                    rest_end_time: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/shifts/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 假勤审批
         */
        userApproval: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_approval&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_approval/create document }
             *
             * 写入审批结果
             *
             * 由于部分企业使用的是自己的审批系统，而不是飞书审批系统，因此员工的请假、加班等数据无法流入到飞书考勤系统中，导致员工在请假时间段内依然收到打卡提醒，并且被记为缺卡。;;对于这些只使用飞书考勤系统，而未使用飞书审批系统的企业，可以通过考勤开放接口的形式，将三方审批结果数据回写到飞书考勤系统中。
             *
             * 目前支持写入加班、请假、出差和外出这四种审批结果，写入只会追加(insert)，不会覆盖(update)（开放接口导入的加班假期记录，在管理后台的假期加班里查不到，只能通过[获取审批通过数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_approval/query)来查询）
             */
            create: async (
                payload?: {
                    data?: {
                        user_approval?: {
                            user_id: string;
                            date: string;
                            outs?: Array<{
                                uniq_id: string;
                                unit: number;
                                interval: number;
                                start_time: string;
                                end_time: string;
                                i18n_names: {
                                    ch?: string;
                                    en?: string;
                                    ja?: string;
                                };
                                default_locale: string;
                                reason: string;
                            }>;
                            leaves?: Array<{
                                uniq_id?: string;
                                unit: number;
                                interval: number;
                                start_time: string;
                                end_time: string;
                                i18n_names: {
                                    ch?: string;
                                    en?: string;
                                    ja?: string;
                                };
                                default_locale: "ch" | "en" | "ja";
                                reason: string;
                            }>;
                            overtime_works?: Array<{
                                duration: number;
                                unit: number;
                                category: number;
                                type: number;
                                start_time: string;
                                end_time: string;
                            }>;
                            trips?: Array<{
                                start_time: string;
                                end_time: string;
                                reason: string;
                                approve_pass_time: string;
                                approve_apply_time: string;
                            }>;
                            time_zone?: string;
                        };
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_approval?: {
                                    user_id: string;
                                    date: string;
                                    outs?: Array<{
                                        approval_id?: string;
                                        uniq_id: string;
                                        unit: number;
                                        interval: number;
                                        start_time: string;
                                        end_time: string;
                                        i18n_names: {
                                            ch?: string;
                                            en?: string;
                                            ja?: string;
                                        };
                                        default_locale: string;
                                        reason: string;
                                        approve_pass_time?: string;
                                        approve_apply_time?: string;
                                    }>;
                                    leaves?: Array<{
                                        approval_id?: string;
                                        uniq_id?: string;
                                        unit: number;
                                        interval: number;
                                        start_time: string;
                                        end_time: string;
                                        i18n_names: {
                                            ch?: string;
                                            en?: string;
                                            ja?: string;
                                        };
                                        default_locale: "ch" | "en" | "ja";
                                        reason: string;
                                        approve_pass_time?: string;
                                        approve_apply_time?: string;
                                    }>;
                                    overtime_works?: Array<{
                                        approval_id?: string;
                                        duration: number;
                                        unit: number;
                                        category: number;
                                        type: number;
                                        start_time: string;
                                        end_time: string;
                                    }>;
                                    trips?: Array<{
                                        approval_id?: string;
                                        start_time: string;
                                        end_time: string;
                                        reason: string;
                                        approve_pass_time: string;
                                        approve_apply_time: string;
                                    }>;
                                    time_zone?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_approvals`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_approval&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_approval/query document }
             *
             * 获取审批通过数据
             *
             * 获取员工在某段时间内的请假、加班、外出和出差四种审批的通过数据。
             *
             * 请假的假期时长字段，暂未开放提供，待后续提供。
             */
            query: async (
                payload?: {
                    data: {
                        user_ids: Array<string>;
                        check_date_from: number;
                        check_date_to: number;
                        check_date_type?:
                            | "PeriodTime"
                            | "CreateTime"
                            | "UpdateTime";
                        status?: number;
                        check_time_from?: string;
                        check_time_to?: string;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_approvals?: Array<{
                                    user_id: string;
                                    date: string;
                                    outs?: Array<{
                                        approval_id?: string;
                                        uniq_id: string;
                                        unit: number;
                                        interval: number;
                                        start_time: string;
                                        end_time: string;
                                        i18n_names: {
                                            ch?: string;
                                            en?: string;
                                            ja?: string;
                                        };
                                        default_locale: string;
                                        reason: string;
                                        approve_pass_time?: string;
                                        approve_apply_time?: string;
                                    }>;
                                    leaves?: Array<{
                                        approval_id?: string;
                                        uniq_id?: string;
                                        unit: number;
                                        interval: number;
                                        start_time: string;
                                        end_time: string;
                                        i18n_names: {
                                            ch?: string;
                                            en?: string;
                                            ja?: string;
                                        };
                                        default_locale: "ch" | "en" | "ja";
                                        reason: string;
                                        approve_pass_time?: string;
                                        approve_apply_time?: string;
                                    }>;
                                    overtime_works?: Array<{
                                        approval_id?: string;
                                        duration: number;
                                        unit: number;
                                        category: number;
                                        type: number;
                                        start_time: string;
                                        end_time: string;
                                    }>;
                                    trips?: Array<{
                                        approval_id?: string;
                                        start_time: string;
                                        end_time: string;
                                        reason: string;
                                        approve_pass_time: string;
                                        approve_apply_time: string;
                                    }>;
                                    time_zone?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_approvals/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 考勤排班
         */
        userDailyShift: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_daily_shift&apiName=batch_create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_daily_shift/batch_create document }
             *
             * 创建或修改班表
             *
             * 班表是用来描述考勤组内人员每天按哪个班次进行上班。目前班表支持按一个整月对一位或多位人员进行排班。
             */
            batchCreate: async (
                payload?: {
                    data: {
                        user_daily_shifts: Array<{
                            group_id: string;
                            shift_id: string;
                            month: number;
                            user_id: string;
                            day_no: number;
                        }>;
                        operator_id?: string;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_daily_shifts?: Array<{
                                    group_id: string;
                                    shift_id: string;
                                    month: number;
                                    user_id: string;
                                    day_no: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_daily_shifts/batch_create`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_daily_shift&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_daily_shift/query document }
             *
             * 查询班表信息
             *
             * 支持查询多个用户的排班情况，查询的时间跨度不能超过 30 天。
             */
            query: async (
                payload?: {
                    data: {
                        user_ids: Array<string>;
                        check_date_from: number;
                        check_date_to: number;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_daily_shifts?: Array<{
                                    group_id: string;
                                    shift_id: string;
                                    month: number;
                                    user_id: string;
                                    day_no: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_daily_shifts/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * user_flow
         */
        userFlow: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_flow&apiName=batch_create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/batch_create document }
             *
             * 导入打卡流水记录
             *
             * 导入授权内员工的打卡流水记录。导入后，会根据员工所在的考勤组班次规则，计算最终的打卡状态与结果。
             *
             * 适用于考勤机数据导入等场景。
             */
            batchCreate: async (
                payload?: {
                    data: {
                        flow_records: Array<{
                            user_id: string;
                            creator_id: string;
                            location_name: string;
                            check_time: string;
                            comment: string;
                            record_id?: string;
                            longitude?: number;
                            latitude?: number;
                            ssid?: string;
                            bssid?: string;
                            is_field?: boolean;
                            is_wifi?: boolean;
                            type?: number;
                            photo_urls?: Array<string>;
                            device_id?: string;
                            check_result?:
                                | "NoNeedCheck"
                                | "SystemCheck"
                                | "Normal"
                                | "Early"
                                | "Late"
                                | "SeriousLate"
                                | "Lack"
                                | "Invalid"
                                | "None"
                                | "Todo";
                        }>;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                flow_records?: Array<{
                                    user_id: string;
                                    creator_id: string;
                                    location_name: string;
                                    check_time: string;
                                    comment: string;
                                    record_id?: string;
                                    longitude?: number;
                                    latitude?: number;
                                    ssid?: string;
                                    bssid?: string;
                                    is_field?: boolean;
                                    is_wifi?: boolean;
                                    type?: number;
                                    photo_urls?: Array<string>;
                                    device_id?: string;
                                    check_result?:
                                        | "NoNeedCheck"
                                        | "SystemCheck"
                                        | "Normal"
                                        | "Early"
                                        | "Late"
                                        | "SeriousLate"
                                        | "Lack"
                                        | "Invalid"
                                        | "None"
                                        | "Todo";
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_flows/batch_create`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_flow&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/get document }
             *
             * 获取打卡流水记录
             *
             * 通过打卡记录 ID 获取用户的打卡流水记录。
             */
            get: async (
                payload?: {
                    params: {
                        employee_type:
                            | "open_id"
                            | "employee_id"
                            | "employee_no";
                    };
                    path: { user_flow_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_id: string;
                                creator_id: string;
                                location_name: string;
                                check_time: string;
                                comment: string;
                                record_id?: string;
                                longitude?: number;
                                latitude?: number;
                                ssid?: string;
                                bssid?: string;
                                is_field?: boolean;
                                is_wifi?: boolean;
                                type?: number;
                                photo_urls?: Array<string>;
                                device_id?: string;
                                check_result?:
                                    | "NoNeedCheck"
                                    | "SystemCheck"
                                    | "Normal"
                                    | "Early"
                                    | "Late"
                                    | "SeriousLate"
                                    | "Lack"
                                    | "Invalid"
                                    | "None"
                                    | "Todo";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_flows/:user_flow_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_flow&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/query document }
             *
             * 批量查询打卡流水记录
             *
             * 批量查询授权内员工的实际打卡流水记录。例如，企业给一个员工设定的班次是上午 9 点和下午 6 点各打一次上下班卡，但是该员工在这期间打了多次卡，该接口会把所有的打卡记录都返回。
             *
             * 如果只需获取打卡结果，而不需要详细的打卡数据，可使用“获取打卡结果”的接口。
             */
            query: async (
                payload?: {
                    data: {
                        user_ids: Array<string>;
                        check_time_from: string;
                        check_time_to: string;
                    };
                    params: {
                        employee_type: "employee_id" | "employee_no";
                        include_terminated_user?: boolean;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_flow_results?: Array<{
                                    user_id: string;
                                    creator_id: string;
                                    location_name: string;
                                    check_time: string;
                                    comment: string;
                                    record_id?: string;
                                    longitude?: number;
                                    latitude?: number;
                                    ssid?: string;
                                    bssid?: string;
                                    is_field?: boolean;
                                    is_wifi?: boolean;
                                    type?: number;
                                    photo_urls?: Array<string>;
                                    device_id?: string;
                                    check_result?:
                                        | "NoNeedCheck"
                                        | "SystemCheck"
                                        | "Normal"
                                        | "Early"
                                        | "Late"
                                        | "SeriousLate"
                                        | "Lack"
                                        | "Invalid"
                                        | "None"
                                        | "Todo";
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_flows/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 用户设置
         */
        userSetting: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_setting&apiName=modify&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_setting/modify document }
             *
             * 修改用户设置
             *
             * 修改授权内员工的用户设置信息，包括人脸照片文件 ID。
             */
            modify: async (
                payload?: {
                    data?: {
                        user_setting?: {
                            user_id: string;
                            face_key: string;
                            face_key_update_time?: string;
                        };
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_setting?: {
                                    user_id: string;
                                    face_key: string;
                                    face_key_update_time?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_settings/modify`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_setting&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_setting/query document }
             *
             * 批量查询用户设置
             *
             * 批量查询授权内员工的用户设置信息，包括人脸照片文件 ID、人脸照片更新时间。
             */
            query: async (
                payload?: {
                    data: { user_ids: Array<string> };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_settings?: Array<{
                                    user_id: string;
                                    face_key: string;
                                    face_key_update_time?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_settings/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 考勤统计
         */
        userStatsData: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_stats_data&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_data/query document }
             *
             * 查询统计数据
             *
             * 查询日度统计或月度统计的统计数据。
             */
            query: async (
                payload?: {
                    data: {
                        locale: "en" | "ja" | "zh";
                        stats_type: "daily" | "month";
                        start_date: number;
                        end_date: number;
                        user_ids?: Array<string>;
                        need_history?: boolean;
                        current_group_only?: boolean;
                        user_id?: string;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_datas?: Array<{
                                    name: string;
                                    user_id: string;
                                    datas?: Array<{
                                        code: string;
                                        value: string;
                                        features?: Array<{
                                            key: string;
                                            value: string;
                                        }>;
                                        title?: string;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_stats_datas/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * user_stats_field
         */
        userStatsField: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_stats_field&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_field/query document }
             *
             * 查询统计表头
             *
             * 查询考勤统计支持的日度统计或月度统计的统计表头。
             */
            query: async (
                payload?: {
                    data: {
                        locale: "en" | "ja" | "zh";
                        stats_type: "daily" | "month";
                        start_date: number;
                        end_date: number;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_stats_field?: {
                                    stats_type: "daily" | "month";
                                    user_id: string;
                                    fields: Array<{
                                        code: string;
                                        title: string;
                                        child_fields?: Array<{
                                            code: string;
                                            title: string;
                                            time_unit?: string;
                                        }>;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_stats_fields/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * user_stats_view
         */
        userStatsView: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_stats_view&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_view/query document }
             *
             * 查询统计设置
             *
             * 查询开发者定制的日度统计或月度统计的统计报表表头设置信息。
             */
            query: async (
                payload?: {
                    data: {
                        locale: "en" | "ja" | "zh";
                        stats_type: "daily" | "month";
                        user_id?: string;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                view?: {
                                    view_id: string;
                                    stats_type: "daily" | "month";
                                    user_id: string;
                                    items?: Array<{
                                        code: string;
                                        title?: string;
                                        child_items?: Array<{
                                            code: string;
                                            value: string;
                                            title?: string;
                                            column_type?: number;
                                            read_only?: boolean;
                                            min_value?: string;
                                            max_value?: string;
                                        }>;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_stats_views/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_stats_view&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_view/update document }
             *
             * 更新统计设置
             *
             * 更新开发者定制的日度统计或月度统计的统计报表表头设置信息。
             */
            update: async (
                payload?: {
                    data: {
                        view: {
                            view_id: string;
                            stats_type: "daily" | "month";
                            user_id: string;
                            items?: Array<{
                                code: string;
                                child_items?: Array<{
                                    code: string;
                                    value: string;
                                }>;
                            }>;
                        };
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                    path: { user_stats_view_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                view?: {
                                    view_id: string;
                                    stats_type: "daily" | "month";
                                    user_id: string;
                                    items?: Array<{
                                        code: string;
                                        title?: string;
                                        child_items?: Array<{
                                            code: string;
                                            value: string;
                                            title?: string;
                                            column_type?: number;
                                            read_only?: boolean;
                                            min_value?: string;
                                            max_value?: string;
                                        }>;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_stats_views/:user_stats_view_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 考勤记录
         */
        userTask: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_task&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query document }
             *
             * 获取打卡结果
             *
             * 获取企业内员工的实际打卡结果，包括上班打卡结果和下班打卡结果。
             *
             * - 如果企业给一个员工设定的班次是上午 9 点和下午 6 点各打一次上下班卡，即使员工在这期间打了多次卡，该接口也只会返回 1 条记录。;- 如果要获取打卡的详细数据，如打卡位置等信息，可使用“获取打卡流水记录”或“批量查询打卡流水记录”的接口。
             */
            query: async (
                payload?: {
                    data: {
                        user_ids: Array<string>;
                        check_date_from: number;
                        check_date_to: number;
                    };
                    params: {
                        employee_type: "employee_id" | "employee_no";
                        ignore_invalid_users?: boolean;
                        include_terminated_user?: boolean;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_task_results?: Array<{
                                    result_id: string;
                                    user_id: string;
                                    employee_name: string;
                                    day: number;
                                    group_id: string;
                                    shift_id: string;
                                    records: Array<{
                                        check_in_record_id: string;
                                        check_in_record?: {
                                            user_id: string;
                                            creator_id: string;
                                            location_name: string;
                                            check_time: string;
                                            comment: string;
                                            record_id?: string;
                                            longitude?: number;
                                            latitude?: number;
                                            ssid?: string;
                                            bssid?: string;
                                            is_field?: boolean;
                                            is_wifi?: boolean;
                                            type?: number;
                                            photo_urls?: Array<string>;
                                            device_id?: string;
                                            check_result?:
                                                | "NoNeedCheck"
                                                | "SystemCheck"
                                                | "Normal"
                                                | "Early"
                                                | "Late"
                                                | "SeriousLate"
                                                | "Lack"
                                                | "Invalid"
                                                | "None"
                                                | "Todo";
                                        };
                                        check_out_record_id: string;
                                        check_out_record?: {
                                            user_id: string;
                                            creator_id: string;
                                            location_name: string;
                                            check_time: string;
                                            comment: string;
                                            record_id?: string;
                                            longitude?: number;
                                            latitude?: number;
                                            ssid?: string;
                                            bssid?: string;
                                            is_field?: boolean;
                                            is_wifi?: boolean;
                                            type?: number;
                                            photo_urls?: Array<string>;
                                            device_id?: string;
                                            check_result?:
                                                | "NoNeedCheck"
                                                | "SystemCheck"
                                                | "Normal"
                                                | "Early"
                                                | "Late"
                                                | "SeriousLate"
                                                | "Lack"
                                                | "Invalid"
                                                | "None"
                                                | "Todo";
                                        };
                                        check_in_result:
                                            | "NoNeedCheck"
                                            | "SystemCheck"
                                            | "Normal"
                                            | "Early"
                                            | "Late"
                                            | "Lack";
                                        check_out_result:
                                            | "NoNeedCheck"
                                            | "SystemCheck"
                                            | "Normal"
                                            | "Early"
                                            | "Late"
                                            | "Lack";
                                        check_in_result_supplement:
                                            | "None"
                                            | "ManagerModification"
                                            | "CardReplacement"
                                            | "ShiftChange"
                                            | "Travel"
                                            | "Leave"
                                            | "GoOut"
                                            | "CardReplacementApplication"
                                            | "FieldPunch";
                                        check_out_result_supplement:
                                            | "None"
                                            | "ManagerModification"
                                            | "CardReplacement"
                                            | "ShiftChange"
                                            | "Travel"
                                            | "Leave"
                                            | "GoOut"
                                            | "CardReplacementApplication"
                                            | "FieldPunch";
                                        check_in_shift_time?: string;
                                        check_out_shift_time?: string;
                                    }>;
                                }>;
                                invalid_user_ids?: Array<string>;
                                unauthorized_user_ids?: Array<string>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_tasks/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 考勤补卡
         */
        userTaskRemedy: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_task_remedy&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/create document }
             *
             * 通知补卡审批发起
             *
             * 对于只使用飞书考勤系统而未使用飞书审批系统的企业，可以通过该接口，将在三方审批系统中发起的补卡审批数据，写入到飞书考勤系统中，状态为审批中。写入后可以由[通知审批状态更新](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/approval_info/process) 进行状态更新
             */
            create: async (
                payload?: {
                    data: {
                        user_id: string;
                        remedy_date: number;
                        punch_no: number;
                        work_type: number;
                        remedy_time: string;
                        reason: string;
                        time?: string;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_remedy?: {
                                    user_id: string;
                                    remedy_date: number;
                                    punch_no: number;
                                    work_type: number;
                                    approval_id?: string;
                                    remedy_time: string;
                                    status?: number;
                                    reason: string;
                                    time?: string;
                                    time_zone?: string;
                                    create_time?: string;
                                    update_time?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_task_remedys`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_task_remedy&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/query document }
             *
             * 获取补卡记录
             *
             * 获取授权内员工的补卡记录。
             */
            query: async (
                payload?: {
                    data: {
                        user_ids: Array<string>;
                        check_time_from: string;
                        check_time_to: string;
                        check_date_type?:
                            | "PeriodTime"
                            | "CreateTime"
                            | "UpdateTime";
                        status?: number;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_remedys?: Array<{
                                    user_id: string;
                                    remedy_date: number;
                                    punch_no: number;
                                    work_type: number;
                                    approval_id?: string;
                                    remedy_time: string;
                                    status?: number;
                                    reason: string;
                                    time?: string;
                                    time_zone?: string;
                                    create_time?: string;
                                    update_time?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_task_remedys/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_task_remedy&apiName=query_user_allowed_remedys&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/query_user_allowed_remedys document }
             *
             * 获取用户可补卡时间
             *
             * 获取用户某天可以补的第几次上 / 下班卡的时间。
             */
            queryUserAllowedRemedys: async (
                payload?: {
                    data: { user_id: string; remedy_date: number };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_allowed_remedys?: Array<{
                                    user_id: string;
                                    remedy_date: number;
                                    is_free_punch?: boolean;
                                    punch_no?: number;
                                    work_type?: number;
                                    punch_status?: string;
                                    normal_punch_time?: string;
                                    remedy_start_time?: string;
                                    remedy_end_time?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_task_remedys/query_user_allowed_remedys`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
         
         */
    auth = {
        /**
         * app_access_token
         */
        appAccessToken: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=auth&resource=app_access_token&apiName=create&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=auth&resource=app_access_token&version=v3 document }
             */
            create: async (
                payload?: {
                    data: {
                        app_id: string;
                        app_secret: string;
                        app_ticket: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/auth/v3/app_access_token`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=auth&resource=app_access_token&apiName=internal&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=internal&project=auth&resource=app_access_token&version=v3 document }
             */
            internal: async (
                payload?: {
                    data: { app_id: string; app_secret: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/auth/v3/app_access_token/internal`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * app_ticket
         */
        appTicket: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=auth&resource=app_ticket&apiName=resend&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=resend&project=auth&resource=app_ticket&version=v3 document }
             */
            resend: async (
                payload?: {
                    data: { app_id: string; app_secret: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/auth/v3/app_ticket/resend`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * tenant_access_token
         */
        tenantAccessToken: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=auth&resource=tenant_access_token&apiName=create&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=auth&resource=tenant_access_token&version=v3 document }
             */
            create: async (
                payload?: {
                    data: { app_access_token: string; tenant_key: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/auth/v3/tenant_access_token`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=auth&resource=tenant_access_token&apiName=internal&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=internal&project=auth&resource=tenant_access_token&version=v3 document }
             */
            internal: async (
                payload?: {
                    data: { app_id: string; app_secret: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/auth/v3/tenant_access_token/internal`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
         
         */
    authen = {
        /**
         * access_token
         */
        accessToken: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=authen&resource=access_token&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=authen&resource=access_token&version=v1 document }
             */
            create: async (
                payload?: {
                    data: { grant_type: string; code: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                access_token?: string;
                                token_type?: string;
                                expires_in?: number;
                                name?: string;
                                en_name?: string;
                                avatar_url?: string;
                                avatar_thumb?: string;
                                avatar_middle?: string;
                                avatar_big?: string;
                                open_id?: string;
                                union_id?: string;
                                email?: string;
                                enterprise_email?: string;
                                user_id?: string;
                                mobile?: string;
                                tenant_key?: string;
                                refresh_expires_in?: number;
                                refresh_token?: string;
                                sid?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/authen/v1/access_token`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * refresh_access_token
         */
        refreshAccessToken: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=authen&resource=refresh_access_token&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=authen&resource=refresh_access_token&version=v1 document }
             */
            create: async (
                payload?: {
                    data: { grant_type: string; refresh_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                access_token?: string;
                                token_type?: string;
                                expires_in?: number;
                                name?: string;
                                en_name?: string;
                                avatar_url?: string;
                                avatar_thumb?: string;
                                avatar_middle?: string;
                                avatar_big?: string;
                                open_id?: string;
                                union_id?: string;
                                email?: string;
                                enterprise_email?: string;
                                user_id?: string;
                                mobile?: string;
                                tenant_key?: string;
                                refresh_expires_in?: number;
                                refresh_token?: string;
                                sid?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/authen/v1/refresh_access_token`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * user_info
         */
        userInfo: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=authen&resource=user_info&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=authen&resource=user_info&version=v1 document }
             */
            get: async (payload?: {}, options?: IRequestOptions) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                name?: string;
                                en_name?: string;
                                avatar_url?: string;
                                avatar_thumb?: string;
                                avatar_middle?: string;
                                avatar_big?: string;
                                open_id?: string;
                                union_id?: string;
                                email?: string;
                                enterprise_email?: string;
                                user_id?: string;
                                mobile?: string;
                                tenant_key?: string;
                                employee_no?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/authen/v1/user_info`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
         
         */
    aweme_ecosystem = {};
    /**
     * 企业百科
     */
    baike = {
        /**
         * 分类
         */
        classification: {
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/baike/v1/classifications`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    id: string;
                                                    name?: string;
                                                    father_id?: string;
                                                }>;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=classification&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/classification/list document }
             *
             * 获取百科分类
             *
             * 获取企业百科当前分类。;企业百科目前为二级分类体系，每个词条可添加多个二级分类，但每个一级分类下只能添加一个分类。
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id: string;
                                    name?: string;
                                    father_id?: string;
                                }>;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/classifications`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 草稿
         */
        draft: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=draft&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/draft/create document }
             *
             * 创建草稿
             *
             * 草稿并非百科词条，而是指通过 API 发起创建新词条或更新现有词条的申请。百科管理员审核通过后，草稿将变为新的词条或覆盖已有词条。
             *
             * · 创建新的百科词条时，无需传入 entity_id 字段;· 更新已有百科词条时，请传入对应词条的 entity_id 或 outer_info
             *
             * 以用户身份创建草稿（即 Authorization 使用 user_access_token），对应用户将收到由企业百科 Bot 发送的审核结果；以应用身份创建草稿（即 Authorization 使用 tenant_access_toke），不会收到任何通知。
             */
            create: async (
                payload?: {
                    data: {
                        id?: string;
                        main_keys: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        full_names?: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        aliases?: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        description?: string;
                        related_meta?: {
                            users?: Array<{ id: string; title?: string }>;
                            chats?: Array<{ id: string }>;
                            docs?: Array<{ title?: string; url?: string }>;
                            oncalls?: Array<{ id: string }>;
                            links?: Array<{ title?: string; url?: string }>;
                            abbreviations?: Array<{ id?: string }>;
                            classifications?: Array<{
                                id: string;
                                father_id?: string;
                            }>;
                            images?: Array<{ token: string }>;
                        };
                        outer_info?: { provider: string; outer_id: string };
                        rich_text?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                draft?: {
                                    draft_id?: string;
                                    entity?: {
                                        id?: string;
                                        main_keys: Array<{
                                            key: string;
                                            display_status: {
                                                allow_highlight: boolean;
                                                allow_search: boolean;
                                            };
                                        }>;
                                        full_names?: Array<{
                                            key: string;
                                            display_status: {
                                                allow_highlight: boolean;
                                                allow_search: boolean;
                                            };
                                        }>;
                                        aliases?: Array<{
                                            key: string;
                                            display_status: {
                                                allow_highlight: boolean;
                                                allow_search: boolean;
                                            };
                                        }>;
                                        description?: string;
                                        create_time?: string;
                                        update_time?: string;
                                        related_meta?: {
                                            users?: Array<{
                                                id: string;
                                                title?: string;
                                                url?: string;
                                            }>;
                                            chats?: Array<{
                                                id: string;
                                                title?: string;
                                                url?: string;
                                            }>;
                                            docs?: Array<{
                                                title?: string;
                                                url?: string;
                                            }>;
                                            oncalls?: Array<{
                                                id: string;
                                                title?: string;
                                                url?: string;
                                            }>;
                                            links?: Array<{
                                                title?: string;
                                                url?: string;
                                            }>;
                                            abbreviations?: Array<{
                                                id?: string;
                                            }>;
                                            classifications?: Array<{
                                                id: string;
                                                name?: string;
                                                father_id?: string;
                                            }>;
                                            images?: Array<{ token: string }>;
                                        };
                                        statistics?: {
                                            like_count: number;
                                            dislike_count: number;
                                        };
                                        outer_info?: {
                                            provider: string;
                                            outer_id: string;
                                        };
                                        rich_text?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/drafts`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=draft&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/draft/update document }
             *
             * 更新草稿
             *
             * 根据 draft_id 更新草稿内容，已审批的草稿无法编辑
             */
            update: async (
                payload?: {
                    data: {
                        id?: string;
                        main_keys: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        full_names?: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        aliases?: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        description?: string;
                        related_meta?: {
                            users?: Array<{ id: string; title?: string }>;
                            chats?: Array<{ id: string }>;
                            docs?: Array<{ title?: string; url?: string }>;
                            oncalls?: Array<{ id: string }>;
                            links?: Array<{ title?: string; url?: string }>;
                            abbreviations?: Array<{ id?: string }>;
                            classifications?: Array<{
                                id: string;
                                father_id?: string;
                            }>;
                            images?: Array<{ token: string }>;
                        };
                        rich_text?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { draft_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                draft?: {
                                    draft_id?: string;
                                    entity?: {
                                        id?: string;
                                        main_keys: Array<{
                                            key: string;
                                            display_status: {
                                                allow_highlight: boolean;
                                                allow_search: boolean;
                                            };
                                        }>;
                                        full_names?: Array<{
                                            key: string;
                                            display_status: {
                                                allow_highlight: boolean;
                                                allow_search: boolean;
                                            };
                                        }>;
                                        aliases?: Array<{
                                            key: string;
                                            display_status: {
                                                allow_highlight: boolean;
                                                allow_search: boolean;
                                            };
                                        }>;
                                        description?: string;
                                        create_time?: string;
                                        update_time?: string;
                                        related_meta?: {
                                            users?: Array<{
                                                id: string;
                                                title?: string;
                                                url?: string;
                                            }>;
                                            chats?: Array<{
                                                id: string;
                                                title?: string;
                                                url?: string;
                                            }>;
                                            docs?: Array<{
                                                title?: string;
                                                url?: string;
                                            }>;
                                            oncalls?: Array<{
                                                id: string;
                                                title?: string;
                                                url?: string;
                                            }>;
                                            links?: Array<{
                                                title?: string;
                                                url?: string;
                                            }>;
                                            abbreviations?: Array<{
                                                id?: string;
                                            }>;
                                            classifications?: Array<{
                                                id: string;
                                                name?: string;
                                                father_id?: string;
                                            }>;
                                            images?: Array<{ token: string }>;
                                        };
                                        statistics?: {
                                            like_count: number;
                                            dislike_count: number;
                                        };
                                        outer_info?: {
                                            provider: string;
                                            outer_id: string;
                                        };
                                        rich_text?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/drafts/:draft_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 词条
         */
        entity: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/create document }
             *
             * 创建免审词条
             *
             * 通过此接口创建的词条，不需要百科管理员审核可直接写入词库，请慎重使用【租户管理员请慎重审批】。
             */
            create: async (
                payload?: {
                    data: {
                        main_keys: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        full_names?: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        aliases?: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        description?: string;
                        related_meta?: {
                            users?: Array<{ id: string; title?: string }>;
                            chats?: Array<{ id: string }>;
                            docs?: Array<{ title?: string; url?: string }>;
                            oncalls?: Array<{ id: string }>;
                            links?: Array<{ title?: string; url?: string }>;
                            abbreviations?: Array<{ id?: string }>;
                            classifications?: Array<{
                                id: string;
                                father_id?: string;
                            }>;
                            images?: Array<{ token: string }>;
                        };
                        outer_info?: { provider: string; outer_id: string };
                        rich_text?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                entity?: {
                                    id?: string;
                                    main_keys: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    full_names?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    aliases?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    related_meta?: {
                                        users?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        chats?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        docs?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        oncalls?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        links?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        abbreviations?: Array<{ id?: string }>;
                                        classifications?: Array<{
                                            id: string;
                                            name?: string;
                                            father_id?: string;
                                        }>;
                                        images?: Array<{ token: string }>;
                                    };
                                    statistics?: {
                                        like_count: number;
                                        dislike_count: number;
                                    };
                                    outer_info?: {
                                        provider: string;
                                        outer_id: string;
                                    };
                                    rich_text?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/entities`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=extract&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/extract document }
             *
             * 提取潜在的百科词条
             *
             * 提取文本中可能成为百科词条的词语，且不会过滤已经成为百科词条的词语。同时，会返回推荐的别名。
             */
            extract: async (
                payload?: {
                    data?: { text?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                entity_word: Array<{
                                    name: string;
                                    aliases?: Array<string>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/entities/extract`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/get document }
             *
             * 获取词条详情
             *
             * 通过词条 id 拉取对应的词条详情信息。
             *
             * 也支持通过 provider 和 outer_id 返回对应实体的详情数据。此时路径中的 entity_id 为固定的 enterprise_0
             */
            get: async (
                payload?: {
                    params?: {
                        provider?: string;
                        outer_id?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { entity_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                entity?: {
                                    id?: string;
                                    main_keys: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    full_names?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    aliases?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    related_meta?: {
                                        users?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        chats?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        docs?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        oncalls?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        links?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        abbreviations?: Array<{ id?: string }>;
                                        classifications?: Array<{
                                            id: string;
                                            name?: string;
                                            father_id?: string;
                                        }>;
                                        images?: Array<{ token: string }>;
                                    };
                                    statistics?: {
                                        like_count: number;
                                        dislike_count: number;
                                    };
                                    outer_info?: {
                                        provider: string;
                                        outer_id: string;
                                    };
                                    rich_text?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/entities/:entity_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=highlight&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/highlight document }
             *
             * 词条高亮
             *
             * 传入一句话，智能识别句中对应的词条，并返回词条位置和 entity_id，可在外部系统中快速实现百科词条智能高亮。
             */
            highlight: async (
                payload?: {
                    data: { text: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                phrases?: Array<{
                                    name: string;
                                    entity_ids: Array<string>;
                                    span: { start: number; end: number };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/entities/highlight`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        provider?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/baike/v1/entities`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                entities?: Array<{
                                                    id?: string;
                                                    main_keys: Array<{
                                                        key: string;
                                                        display_status: {
                                                            allow_highlight: boolean;
                                                            allow_search: boolean;
                                                        };
                                                    }>;
                                                    full_names?: Array<{
                                                        key: string;
                                                        display_status: {
                                                            allow_highlight: boolean;
                                                            allow_search: boolean;
                                                        };
                                                    }>;
                                                    aliases?: Array<{
                                                        key: string;
                                                        display_status: {
                                                            allow_highlight: boolean;
                                                            allow_search: boolean;
                                                        };
                                                    }>;
                                                    description?: string;
                                                    create_time?: string;
                                                    update_time?: string;
                                                    related_meta?: {
                                                        users?: Array<{
                                                            id: string;
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        chats?: Array<{
                                                            id: string;
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        docs?: Array<{
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        oncalls?: Array<{
                                                            id: string;
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        links?: Array<{
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        abbreviations?: Array<{
                                                            id?: string;
                                                        }>;
                                                        classifications?: Array<{
                                                            id: string;
                                                            name?: string;
                                                            father_id?: string;
                                                        }>;
                                                        images?: Array<{
                                                            token: string;
                                                        }>;
                                                    };
                                                    statistics?: {
                                                        like_count: number;
                                                        dislike_count: number;
                                                    };
                                                    outer_info?: {
                                                        provider: string;
                                                        outer_id: string;
                                                    };
                                                    rich_text?: string;
                                                }>;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/list document }
             *
             * 获取词条列表
             *
             * 分页拉取词条列表数据，支持拉取租户内的全部词条。
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        provider?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                entities?: Array<{
                                    id?: string;
                                    main_keys: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    full_names?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    aliases?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    related_meta?: {
                                        users?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        chats?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        docs?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        oncalls?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        links?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        abbreviations?: Array<{ id?: string }>;
                                        classifications?: Array<{
                                            id: string;
                                            name?: string;
                                            father_id?: string;
                                        }>;
                                        images?: Array<{ token: string }>;
                                    };
                                    statistics?: {
                                        like_count: number;
                                        dislike_count: number;
                                    };
                                    outer_info?: {
                                        provider: string;
                                        outer_id: string;
                                    };
                                    rich_text?: string;
                                }>;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/entities`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=match&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/match document }
             *
             * 精准搜索词条
             *
             * 将关键词与词条名、别名精准匹配，并返回对应的 词条 ID。
             */
            match: async (
                payload?: {
                    data: { word: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                results?: Array<{
                                    entity_id?: string;
                                    type?: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/entities/match`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            searchWithIterator: async (
                payload?: {
                    data: { query: string };
                    params?: {
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/baike/v1/entities/search`,
                                path
                            ),
                            method: "POST",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                entities?: Array<{
                                                    id?: string;
                                                    main_keys: Array<{
                                                        key: string;
                                                        display_status: {
                                                            allow_highlight: boolean;
                                                            allow_search: boolean;
                                                        };
                                                    }>;
                                                    full_names?: Array<{
                                                        key: string;
                                                        display_status: {
                                                            allow_highlight: boolean;
                                                            allow_search: boolean;
                                                        };
                                                    }>;
                                                    aliases?: Array<{
                                                        key: string;
                                                        display_status: {
                                                            allow_highlight: boolean;
                                                            allow_search: boolean;
                                                        };
                                                    }>;
                                                    description?: string;
                                                    create_time?: string;
                                                    update_time?: string;
                                                    related_meta?: {
                                                        users?: Array<{
                                                            id: string;
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        chats?: Array<{
                                                            id: string;
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        docs?: Array<{
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        oncalls?: Array<{
                                                            id: string;
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        links?: Array<{
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        abbreviations?: Array<{
                                                            id?: string;
                                                        }>;
                                                        classifications?: Array<{
                                                            id: string;
                                                            name?: string;
                                                            father_id?: string;
                                                        }>;
                                                        images?: Array<{
                                                            token: string;
                                                        }>;
                                                    };
                                                    statistics?: {
                                                        like_count: number;
                                                        dislike_count: number;
                                                    };
                                                    outer_info?: {
                                                        provider: string;
                                                        outer_id: string;
                                                    };
                                                    rich_text?: string;
                                                }>;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=search&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/search document }
             *
             * 模糊搜索词条
             *
             * 传入关键词，与词条名、别名、释义等信息进行模糊匹配，返回搜到的词条信息。
             */
            search: async (
                payload?: {
                    data: { query: string };
                    params?: {
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                entities?: Array<{
                                    id?: string;
                                    main_keys: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    full_names?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    aliases?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    related_meta?: {
                                        users?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        chats?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        docs?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        oncalls?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        links?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        abbreviations?: Array<{ id?: string }>;
                                        classifications?: Array<{
                                            id: string;
                                            name?: string;
                                            father_id?: string;
                                        }>;
                                        images?: Array<{ token: string }>;
                                    };
                                    statistics?: {
                                        like_count: number;
                                        dislike_count: number;
                                    };
                                    outer_info?: {
                                        provider: string;
                                        outer_id: string;
                                    };
                                    rich_text?: string;
                                }>;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/entities/search`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/update document }
             *
             * 更新免审词条
             *
             * 通过此接口更新已有的词条，不需要百科管理员审核可直接写入词库，请慎重使用【租户管理员请慎重审批】。
             */
            update: async (
                payload?: {
                    data: {
                        main_keys: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        full_names?: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        aliases?: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        description?: string;
                        related_meta?: {
                            users?: Array<{ id: string; title?: string }>;
                            chats?: Array<{ id: string }>;
                            docs?: Array<{ title?: string; url?: string }>;
                            oncalls?: Array<{ id: string }>;
                            links?: Array<{ title?: string; url?: string }>;
                            abbreviations?: Array<{ id?: string }>;
                            classifications?: Array<{
                                id: string;
                                father_id?: string;
                            }>;
                            images?: Array<{ token: string }>;
                        };
                        outer_info?: { provider: string; outer_id: string };
                        rich_text?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { entity_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                entity?: {
                                    id?: string;
                                    main_keys: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    full_names?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    aliases?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    related_meta?: {
                                        users?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        chats?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        docs?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        oncalls?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        links?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        abbreviations?: Array<{ id?: string }>;
                                        classifications?: Array<{
                                            id: string;
                                            name?: string;
                                            father_id?: string;
                                        }>;
                                        images?: Array<{ token: string }>;
                                    };
                                    statistics?: {
                                        like_count: number;
                                        dislike_count: number;
                                    };
                                    outer_info?: {
                                        provider: string;
                                        outer_id: string;
                                    };
                                    rich_text?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/entities/:entity_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 文件
         */
        file: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=file&apiName=download&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/file/download document }
             *
             * 图片下载
             *
             * 通过 file_token 下载原图片
             */
            download: async (
                payload?: {
                    path?: { file_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/files/:file_token/download`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        return new Promise((resolve, reject) => {
                            const writableStream =
                                fs.createWriteStream(filePath);
                            writableStream.on("finish", () => {
                                resolve(filePath);
                            });
                            writableStream.on("error", (e) => {
                                reject(e);
                            });
                            res.pipe(writableStream);
                        });
                    },
                };
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=file&apiName=upload&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/file/upload document }
             *
             * 图片上传
             *
             * 百科词条图片资源上传。
             */
            upload: async (
                payload?: {
                    data: { name: string; file: Buffer };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { file_token?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/files/upload`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
        },
    };
    /**
     * 云文档-多维表格
     */
    bitable = {
        /**
         * 多维表格
         */
        app: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=bitable&resource=app&version=v1 document }
             */
            create: async (
                payload?: {
                    data?: { name?: string; folder_token?: string };
                    params?: {
                        customized_config?: boolean;
                        source_app_token?: string;
                        copy_types?: number;
                        api_type?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                app?: {
                                    app_token?: string;
                                    name?: string;
                                    revision?: number;
                                    folder_token?: string;
                                    url?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/get document }
             *
             * 获取多维表格元数据
             *
             * 获取指定多维表格的元数据信息，包括多维表格名称，多维表格版本号，多维表格是否开启高级权限等。
             *
             * 该接口支持调用频率上限为 20 QPS（Query Per Second，每秒请求率）
             */
            get: async (
                payload?: {
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                app?: {
                                    app_token?: string;
                                    name?: string;
                                    revision?: number;
                                    is_advanced?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/update document }
             *
             * 更新多维表格元数据
             *
             * 通过 app_token 更新多维表格元数据
             *
             * 该接口支持调用频率上限为 10 QPS
             *
             * - 飞书文档、飞书表格、知识库中的多维表格不支持开启高级权限;- 此接口非原子操作，先修改多维表格名字，后开关高级权限。可能存在部分成功的情况
             */
            update: async (
                payload?: {
                    data?: { name?: string; is_advanced?: boolean };
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                app?: {
                                    app_token?: string;
                                    name?: string;
                                    is_advanced?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 仪表盘
         */
        appDashboard: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.dashboard&apiName=copy&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-dashboard/copy document }
             *
             * 复制仪表盘
             *
             * 该接口用于根据现有仪表盘复制出新的仪表盘
             */
            copy: async (
                payload?: {
                    data: { name: string };
                    path: { app_token: string; block_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { block_id?: string; name?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/dashboards/:block_id/copy`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/bitable/v1/apps/:app_token/dashboards`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                dashboards: Array<{
                                                    block_id: string;
                                                    name: string;
                                                }>;
                                                page_token: string;
                                                has_more: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.dashboard&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-dashboard/list document }
             *
             * 列出仪表盘
             *
             * 根据 app_token，获取多维表格下的所有仪表盘
             *
             * 该接口支持调用频率上限为 20 QPS
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                dashboards: Array<{
                                    block_id: string;
                                    name: string;
                                }>;
                                page_token: string;
                                has_more: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/dashboards`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 自定义角色
         */
        appRole: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/create document }
             *
             * 新增自定义角色
             *
             * 新增自定义角色
             */
            create: async (
                payload?: {
                    data: {
                        role_name: string;
                        table_roles: Array<{
                            table_name?: string;
                            table_id?: string;
                            table_perm: number;
                            rec_rule?: {
                                conditions: Array<{
                                    field_name: string;
                                    operator?:
                                        | "is"
                                        | "isNot"
                                        | "contains"
                                        | "doesNotContain"
                                        | "isEmpty"
                                        | "isNotEmpty";
                                    value?: Array<string>;
                                }>;
                                conjunction?: "and" | "or";
                                other_perm?: number;
                            };
                            field_perm?: {};
                            allow_add_record?: boolean;
                            allow_delete_record?: boolean;
                        }>;
                        block_roles?: Array<{
                            block_id: string;
                            block_perm: number;
                        }>;
                    };
                    path?: { app_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                role?: {
                                    role_name: string;
                                    role_id?: string;
                                    table_roles: Array<{
                                        table_name?: string;
                                        table_id?: string;
                                        table_perm: number;
                                        rec_rule?: {
                                            conditions: Array<{
                                                field_name: string;
                                                operator?:
                                                    | "is"
                                                    | "isNot"
                                                    | "contains"
                                                    | "doesNotContain"
                                                    | "isEmpty"
                                                    | "isNotEmpty";
                                                value?: Array<string>;
                                                field_type?: number;
                                            }>;
                                            conjunction?: "and" | "or";
                                            other_perm?: number;
                                        };
                                        field_perm?: {};
                                        allow_add_record?: boolean;
                                        allow_delete_record?: boolean;
                                    }>;
                                    block_roles?: Array<{
                                        block_id: string;
                                        block_type?: "dashboard";
                                        block_perm: number;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/delete document }
             *
             * 删除自定义角色
             *
             * 删除自定义角色
             */
            delete: async (
                payload?: {
                    path?: { app_token?: string; role_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path?: { app_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    role_name: string;
                                                    role_id?: string;
                                                    table_roles: Array<{
                                                        table_name?: string;
                                                        table_id?: string;
                                                        table_perm: number;
                                                        rec_rule?: {
                                                            conditions: Array<{
                                                                field_name: string;
                                                                operator?:
                                                                    | "is"
                                                                    | "isNot"
                                                                    | "contains"
                                                                    | "doesNotContain"
                                                                    | "isEmpty"
                                                                    | "isNotEmpty";
                                                                value?: Array<string>;
                                                                field_type?: number;
                                                            }>;
                                                            conjunction?:
                                                                | "and"
                                                                | "or";
                                                            other_perm?: number;
                                                        };
                                                        field_perm?: {};
                                                        allow_add_record?: boolean;
                                                        allow_delete_record?: boolean;
                                                    }>;
                                                    block_roles?: Array<{
                                                        block_id: string;
                                                        block_type?: "dashboard";
                                                        block_perm: number;
                                                    }>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                                total?: number;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/list document }
             *
             * 列出自定义角色
             *
             * 列出自定义角色
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path?: { app_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    role_name: string;
                                    role_id?: string;
                                    table_roles: Array<{
                                        table_name?: string;
                                        table_id?: string;
                                        table_perm: number;
                                        rec_rule?: {
                                            conditions: Array<{
                                                field_name: string;
                                                operator?:
                                                    | "is"
                                                    | "isNot"
                                                    | "contains"
                                                    | "doesNotContain"
                                                    | "isEmpty"
                                                    | "isNotEmpty";
                                                value?: Array<string>;
                                                field_type?: number;
                                            }>;
                                            conjunction?: "and" | "or";
                                            other_perm?: number;
                                        };
                                        field_perm?: {};
                                        allow_add_record?: boolean;
                                        allow_delete_record?: boolean;
                                    }>;
                                    block_roles?: Array<{
                                        block_id: string;
                                        block_type?: "dashboard";
                                        block_perm: number;
                                    }>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                                total?: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/update document }
             *
             * 更新自定义角色
             *
             * 更新自定义角色
             *
             * 更新自定义角色是全量更新，会完全覆盖旧的自定义角色设置
             */
            update: async (
                payload?: {
                    data: {
                        role_name: string;
                        table_roles: Array<{
                            table_name?: string;
                            table_id?: string;
                            table_perm: number;
                            rec_rule?: {
                                conditions: Array<{
                                    field_name: string;
                                    operator?:
                                        | "is"
                                        | "isNot"
                                        | "contains"
                                        | "doesNotContain"
                                        | "isEmpty"
                                        | "isNotEmpty";
                                    value?: Array<string>;
                                }>;
                                conjunction?: "and" | "or";
                                other_perm?: number;
                            };
                            field_perm?: {};
                            allow_add_record?: boolean;
                            allow_delete_record?: boolean;
                        }>;
                        block_roles?: Array<{
                            block_id: string;
                            block_perm: number;
                        }>;
                    };
                    path?: { app_token?: string; role_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                role?: {
                                    role_name: string;
                                    role_id?: string;
                                    table_roles: Array<{
                                        table_name?: string;
                                        table_id?: string;
                                        table_perm: number;
                                        rec_rule?: {
                                            conditions: Array<{
                                                field_name: string;
                                                operator?:
                                                    | "is"
                                                    | "isNot"
                                                    | "contains"
                                                    | "doesNotContain"
                                                    | "isEmpty"
                                                    | "isNotEmpty";
                                                value?: Array<string>;
                                                field_type?: number;
                                            }>;
                                            conjunction?: "and" | "or";
                                            other_perm?: number;
                                        };
                                        field_perm?: {};
                                        allow_add_record?: boolean;
                                        allow_delete_record?: boolean;
                                    }>;
                                    block_roles?: Array<{
                                        block_id: string;
                                        block_type?: "dashboard";
                                        block_perm: number;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 协作者
         */
        appRoleMember: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role.member&apiName=batch_create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/batch_create document }
             *
             * 批量新增协作者
             *
             * 批量新增自定义角色的协作者
             */
            batchCreate: async (
                payload?: {
                    data: {
                        member_list: Array<{
                            type?:
                                | "open_id"
                                | "union_id"
                                | "user_id"
                                | "chat_id"
                                | "department_id"
                                | "open_department_id";
                            id: string;
                        }>;
                    };
                    path: { app_token: string; role_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members/batch_create`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role.member&apiName=batch_delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/batch_delete document }
             *
             * 批量删除协作者
             *
             * 批量删除自定义角色的协作者
             */
            batchDelete: async (
                payload?: {
                    data: {
                        member_list: Array<{
                            type?:
                                | "open_id"
                                | "union_id"
                                | "user_id"
                                | "chat_id"
                                | "department_id"
                                | "open_department_id";
                            id: string;
                        }>;
                    };
                    path: { app_token: string; role_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members/batch_delete`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role.member&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/create document }
             *
             * 新增协作者
             *
             * 新增自定义角色的协作者
             */
            create: async (
                payload?: {
                    data: { member_id: string };
                    params?: {
                        member_id_type?:
                            | "open_id"
                            | "union_id"
                            | "user_id"
                            | "chat_id"
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { app_token?: string; role_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role.member&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/delete document }
             *
             * 删除协作者
             *
             * 删除自定义角色的协作者
             */
            delete: async (
                payload?: {
                    params?: {
                        member_id_type?:
                            | "open_id"
                            | "union_id"
                            | "user_id"
                            | "chat_id"
                            | "department_id"
                            | "open_department_id";
                    };
                    path: {
                        app_token?: string;
                        role_id?: string;
                        member_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members/:member_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path: { app_token: string; role_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    open_id?: string;
                                                    union_id?: string;
                                                    user_id?: string;
                                                    chat_id?: string;
                                                    department_id?: string;
                                                    open_department_id?: string;
                                                    member_name?: string;
                                                    member_en_name?: string;
                                                    member_type?:
                                                        | "user"
                                                        | "chat"
                                                        | "department";
                                                }>;
                                                has_more?: boolean;
                                                page_token?: string;
                                                total?: number;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role.member&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/list document }
             *
             * 列出协作者
             *
             * 列出自定义角色的协作者
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path: { app_token: string; role_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    open_id?: string;
                                    union_id?: string;
                                    user_id?: string;
                                    chat_id?: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    member_name?: string;
                                    member_en_name?: string;
                                    member_type?:
                                        | "user"
                                        | "chat"
                                        | "department";
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                                total?: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 数据表
         */
        appTable: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=batch_create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/batch_create document }
             *
             * 新增多个数据表
             *
             * 新增多个数据表
             *
             * 该接口支持调用频率上限为 10 QPS
             */
            batchCreate: async (
                payload?: {
                    data?: {
                        tables?: Array<{
                            name?: string;
                            default_view_name?: string;
                            fields?: Array<{
                                field_name: string;
                                type: number;
                                property?: {
                                    options?: Array<{
                                        name?: string;
                                        id?: string;
                                        color?: number;
                                    }>;
                                    formatter?: string;
                                    date_formatter?: string;
                                    auto_fill?: boolean;
                                    multiple?: boolean;
                                    table_id?: string;
                                    table_name?: string;
                                    back_field_name?: string;
                                    auto_serial?: {
                                        type:
                                            | "custom"
                                            | "auto_increment_number";
                                        options?: Array<{
                                            type:
                                                | "system_number"
                                                | "fixed_text"
                                                | "created_time";
                                            value: string;
                                        }>;
                                    };
                                    location?: {
                                        input_type: "only_mobile" | "not_limit";
                                    };
                                    formula_expression?: string;
                                };
                            }>;
                        }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { table_ids?: Array<string> };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/batch_create`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=batch_delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/batch_delete document }
             *
             * 删除多个数据表
             *
             * 删除多个数据表
             *
             * 该接口支持调用频率上限为 10 QPS
             */
            batchDelete: async (
                payload?: {
                    data?: { table_ids?: Array<string> };
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/batch_delete`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/create document }
             *
             * 新增数据表
             *
             * 新增一个数据表
             *
             * 该接口支持调用频率上限为 10 QPS
             */
            create: async (
                payload?: {
                    data?: {
                        table?: {
                            name?: string;
                            default_view_name?: string;
                            fields?: Array<{
                                field_name: string;
                                type: number;
                                property?: {
                                    options?: Array<{
                                        name?: string;
                                        id?: string;
                                        color?: number;
                                    }>;
                                    formatter?: string;
                                    date_formatter?: string;
                                    auto_fill?: boolean;
                                    multiple?: boolean;
                                    table_id?: string;
                                    table_name?: string;
                                    back_field_name?: string;
                                    auto_serial?: {
                                        type:
                                            | "custom"
                                            | "auto_increment_number";
                                        options?: Array<{
                                            type:
                                                | "system_number"
                                                | "fixed_text"
                                                | "created_time";
                                            value: string;
                                        }>;
                                    };
                                    location?: {
                                        input_type: "only_mobile" | "not_limit";
                                    };
                                    formula_expression?: string;
                                };
                            }>;
                        };
                    };
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                table_id?: string;
                                default_view_id?: string;
                                field_id_list?: Array<string>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/delete document }
             *
             * 删除数据表
             *
             * 删除一个数据表
             *
             * 该接口支持调用频率上限为 10 QPS
             */
            delete: async (
                payload?: {
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                total?: number;
                                                items?: Array<{
                                                    table_id?: string;
                                                    revision?: number;
                                                    name?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list document }
             *
             * 列出数据表
             *
             * 根据  app_token，获取多维表格下的所有数据表
             *
             * 该接口支持调用频率上限为 20 QPS
             */
            list: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                total?: number;
                                items?: Array<{
                                    table_id?: string;
                                    revision?: number;
                                    name?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/patch document }
             */
            patch: async (
                payload?: {
                    data?: { name?: string };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { name?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 字段
         */
        appTableField: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.field&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/create document }
             *
             * 新增字段
             *
             * 该接口用于在数据表中新增一个字段
             *
             * 该接口支持调用频率上限为 10 QPS
             */
            create: async (
                payload?: {
                    data: {
                        field_name: string;
                        type: number;
                        property?: {
                            options?: Array<{
                                name?: string;
                                id?: string;
                                color?: number;
                            }>;
                            formatter?: string;
                            date_formatter?: string;
                            auto_fill?: boolean;
                            multiple?: boolean;
                            table_id?: string;
                            table_name?: string;
                            back_field_name?: string;
                            auto_serial?: {
                                type: "custom" | "auto_increment_number";
                                options?: Array<{
                                    type:
                                        | "system_number"
                                        | "fixed_text"
                                        | "created_time";
                                    value: string;
                                }>;
                            };
                            location?: {
                                input_type: "only_mobile" | "not_limit";
                            };
                            formula_expression?: string;
                        };
                        description?: { disable_sync?: boolean; text?: string };
                        ui_type?: string;
                    };
                    params?: { client_token?: string };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                field?: {
                                    field_id?: string;
                                    field_name: string;
                                    type: number;
                                    property?: {
                                        options?: Array<{
                                            name?: string;
                                            id?: string;
                                            color?: number;
                                        }>;
                                        formatter?: string;
                                        date_formatter?: string;
                                        auto_fill?: boolean;
                                        multiple?: boolean;
                                        table_id?: string;
                                        table_name?: string;
                                        back_field_name?: string;
                                        auto_serial?: {
                                            type:
                                                | "custom"
                                                | "auto_increment_number";
                                            options?: Array<{
                                                type:
                                                    | "system_number"
                                                    | "fixed_text"
                                                    | "created_time";
                                                value: string;
                                            }>;
                                        };
                                        location?: {
                                            input_type:
                                                | "only_mobile"
                                                | "not_limit";
                                        };
                                        formula_expression?: string;
                                    };
                                    description?: {
                                        disable_sync?: boolean;
                                        text?: string;
                                    };
                                    is_primary?: boolean;
                                    ui_type?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.field&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/delete document }
             *
             * 删除字段
             *
             * 该接口用于在数据表中删除一个字段
             *
             * 该接口支持调用频率上限为 10 QPS
             */
            delete: async (
                payload?: {
                    path: {
                        app_token: string;
                        table_id: string;
                        field_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { field_id?: string; deleted?: boolean };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        view_id?: string;
                        text_field_as_array?: boolean;
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                total?: number;
                                                items?: Array<{
                                                    field_id?: string;
                                                    field_name: string;
                                                    type: number;
                                                    property?: {
                                                        options?: Array<{
                                                            name?: string;
                                                            id?: string;
                                                            color?: number;
                                                        }>;
                                                        formatter?: string;
                                                        date_formatter?: string;
                                                        auto_fill?: boolean;
                                                        multiple?: boolean;
                                                        table_id?: string;
                                                        table_name?: string;
                                                        back_field_name?: string;
                                                        auto_serial?: {
                                                            type:
                                                                | "custom"
                                                                | "auto_increment_number";
                                                            options?: Array<{
                                                                type:
                                                                    | "system_number"
                                                                    | "fixed_text"
                                                                    | "created_time";
                                                                value: string;
                                                            }>;
                                                        };
                                                        location?: {
                                                            input_type:
                                                                | "only_mobile"
                                                                | "not_limit";
                                                        };
                                                        formula_expression?: string;
                                                    };
                                                    description?: {
                                                        disable_sync?: boolean;
                                                        text?: string;
                                                    };
                                                    is_primary?: boolean;
                                                    ui_type?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.field&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/list document }
             *
             * 列出字段
             *
             * 根据 app_token 和 table_id，获取数据表的所有字段
             *
             * 该接口支持调用频率上限为 20 QPS
             */
            list: async (
                payload?: {
                    params?: {
                        view_id?: string;
                        text_field_as_array?: boolean;
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                total?: number;
                                items?: Array<{
                                    field_id?: string;
                                    field_name: string;
                                    type: number;
                                    property?: {
                                        options?: Array<{
                                            name?: string;
                                            id?: string;
                                            color?: number;
                                        }>;
                                        formatter?: string;
                                        date_formatter?: string;
                                        auto_fill?: boolean;
                                        multiple?: boolean;
                                        table_id?: string;
                                        table_name?: string;
                                        back_field_name?: string;
                                        auto_serial?: {
                                            type:
                                                | "custom"
                                                | "auto_increment_number";
                                            options?: Array<{
                                                type:
                                                    | "system_number"
                                                    | "fixed_text"
                                                    | "created_time";
                                                value: string;
                                            }>;
                                        };
                                        location?: {
                                            input_type:
                                                | "only_mobile"
                                                | "not_limit";
                                        };
                                        formula_expression?: string;
                                    };
                                    description?: {
                                        disable_sync?: boolean;
                                        text?: string;
                                    };
                                    is_primary?: boolean;
                                    ui_type?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.field&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/update document }
             *
             * 更新字段
             *
             * 该接口用于在数据表中更新一个字段
             *
             * 该接口支持调用频率上限为 10 QPS
             */
            update: async (
                payload?: {
                    data: {
                        field_name: string;
                        type: number;
                        property?: {
                            options?: Array<{
                                name?: string;
                                id?: string;
                                color?: number;
                            }>;
                            formatter?: string;
                            date_formatter?: string;
                            auto_fill?: boolean;
                            multiple?: boolean;
                            table_id?: string;
                            table_name?: string;
                            back_field_name?: string;
                            auto_serial?: {
                                type: "custom" | "auto_increment_number";
                                options?: Array<{
                                    type:
                                        | "system_number"
                                        | "fixed_text"
                                        | "created_time";
                                    value: string;
                                }>;
                            };
                            location?: {
                                input_type: "only_mobile" | "not_limit";
                            };
                            formula_expression?: string;
                        };
                        description?: { disable_sync?: boolean; text?: string };
                        ui_type?: string;
                    };
                    path: {
                        app_token: string;
                        table_id: string;
                        field_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                field?: {
                                    field_id?: string;
                                    field_name: string;
                                    type: number;
                                    property?: {
                                        options?: Array<{
                                            name?: string;
                                            id?: string;
                                            color?: number;
                                        }>;
                                        formatter?: string;
                                        date_formatter?: string;
                                        auto_fill?: boolean;
                                        multiple?: boolean;
                                        table_id?: string;
                                        table_name?: string;
                                        back_field_name?: string;
                                        auto_serial?: {
                                            type:
                                                | "custom"
                                                | "auto_increment_number";
                                            options?: Array<{
                                                type:
                                                    | "system_number"
                                                    | "fixed_text"
                                                    | "created_time";
                                                value: string;
                                            }>;
                                        };
                                        location?: {
                                            input_type:
                                                | "only_mobile"
                                                | "not_limit";
                                        };
                                        formula_expression?: string;
                                    };
                                    description?: {
                                        disable_sync?: boolean;
                                        text?: string;
                                    };
                                    is_primary?: boolean;
                                    ui_type?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 表单
         */
        appTableFormField: {
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path: {
                        app_token: string;
                        table_id: string;
                        form_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id/fields`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items: Array<{
                                                    field_id?: string;
                                                    title?: string;
                                                    description?: string;
                                                    required?: boolean;
                                                    visible?: boolean;
                                                }>;
                                                page_token: string;
                                                has_more: boolean;
                                                total: number;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.form.field&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-form-field/list document }
             *
             * 列出表单问题
             *
             * 列出表单的所有问题项
             *
             * 该接口支持调用频率上限为 20 QPS
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path: {
                        app_token: string;
                        table_id: string;
                        form_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items: Array<{
                                    field_id?: string;
                                    title?: string;
                                    description?: string;
                                    required?: boolean;
                                    visible?: boolean;
                                }>;
                                page_token: string;
                                has_more: boolean;
                                total: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id/fields`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.form.field&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-form-field/patch document }
             *
             * 更新表单问题
             *
             * 该接口用于更新表单中的问题项
             *
             * 该接口支持调用频率上限为 10 QPS
             */
            patch: async (
                payload?: {
                    data?: {
                        pre_field_id?: string;
                        title?: string;
                        description?: string;
                        required?: boolean;
                        visible?: boolean;
                    };
                    path: {
                        app_token: string;
                        table_id: string;
                        form_id: string;
                        field_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                field?: {
                                    pre_field_id?: string;
                                    title?: string;
                                    description?: string;
                                    required?: boolean;
                                    visible?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id/fields/:field_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 表单
         */
        appTableForm: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.form&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-form/get document }
             *
             * 获取表单元数据
             *
             * 获取表单的所有元数据项
             *
             * 该接口支持调用频率上限为 20 QPS
             */
            get: async (
                payload?: {
                    path: {
                        app_token: string;
                        table_id: string;
                        form_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                form: {
                                    name?: string;
                                    description?: string;
                                    shared?: boolean;
                                    shared_url?: string;
                                    shared_limit?:
                                        | "off"
                                        | "tenant_editable"
                                        | "anyone_editable";
                                    submit_limit_once?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.form&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-form/patch document }
             *
             * 更新表单元数据
             *
             * 该接口用于更新表单中的元数据项
             *
             * 该接口支持调用频率上限为 10 QPS
             */
            patch: async (
                payload?: {
                    data?: {
                        name?: string;
                        description?: string;
                        shared?: boolean;
                        shared_limit?:
                            | "off"
                            | "tenant_editable"
                            | "anyone_editable";
                        submit_limit_once?: boolean;
                    };
                    path: {
                        app_token: string;
                        table_id: string;
                        form_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                form: {
                                    name?: string;
                                    description?: string;
                                    shared?: boolean;
                                    shared_url?: string;
                                    shared_limit?:
                                        | "off"
                                        | "tenant_editable"
                                        | "anyone_editable";
                                    submit_limit_once?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 记录
         */
        appTableRecord: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=batch_create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/batch_create document }
             *
             * 新增多条记录
             *
             * 该接口用于在数据表中新增多条记录，单次调用最多新增 500 条记录。
             *
             * 该接口支持调用频率上限为 10 QPS（Query Per Second，每秒请求率）
             */
            batchCreate: async (
                payload?: {
                    data: {
                        records: Array<{
                            created_by?: {
                                id?: string;
                                name?: string;
                                en_name?: string;
                                email?: string;
                                avatar_url?: string;
                            };
                            created_time?: number;
                            last_modified_by?: {
                                id?: string;
                                name?: string;
                                en_name?: string;
                                email?: string;
                                avatar_url?: string;
                            };
                            last_modified_time?: number;
                            fields: Record<
                                string,
                                | string
                                | boolean
                                | { text?: string; link?: string }
                                | {
                                      location?: string;
                                      pname?: string;
                                      cityname?: string;
                                      adname?: string;
                                      address?: string;
                                      name?: string;
                                      full_address?: string;
                                  }
                                | Array<string>
                                | Array<{
                                      id?: string;
                                      name?: string;
                                      en_name?: string;
                                      email?: string;
                                      avatar_url?: string;
                                  }>
                                | Array<{
                                      file_token?: string;
                                      name?: string;
                                      type?: string;
                                      size?: number;
                                      url?: string;
                                      tmp_url?: string;
                                  }>
                            >;
                        }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        client_token?: string;
                    };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                records?: Array<{
                                    record_id?: string;
                                    created_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                        avatar_url?: string;
                                    };
                                    created_time?: number;
                                    last_modified_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                        avatar_url?: string;
                                    };
                                    last_modified_time?: number;
                                    fields: Record<
                                        string,
                                        | string
                                        | boolean
                                        | { text?: string; link?: string }
                                        | {
                                              location?: string;
                                              pname?: string;
                                              cityname?: string;
                                              adname?: string;
                                              address?: string;
                                              name?: string;
                                              full_address?: string;
                                          }
                                        | Array<string>
                                        | Array<{
                                              id?: string;
                                              name?: string;
                                              en_name?: string;
                                              email?: string;
                                              avatar_url?: string;
                                          }>
                                        | Array<{
                                              file_token?: string;
                                              name?: string;
                                              type?: string;
                                              size?: number;
                                              url?: string;
                                              tmp_url?: string;
                                          }>
                                    >;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_create`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=batch_delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/batch_delete document }
             *
             * 删除多条记录
             *
             * 该接口用于删除数据表中现有的多条记录，单次调用中最多删除 500 条记录。
             *
             * 该接口支持调用频率上限为 10 QPS
             */
            batchDelete: async (
                payload?: {
                    data: { records: Array<string> };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                records?: Array<{
                                    deleted?: boolean;
                                    record_id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_delete`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=batch_update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/batch_update document }
             *
             * 更新多条记录
             *
             * 该接口用于更新数据表中的多条记录，单次调用最多更新 500 条记录。
             *
             * 该接口支持调用频率上限为 10 QPS
             */
            batchUpdate: async (
                payload?: {
                    data: {
                        records: Array<{
                            record_id?: string;
                            created_by?: {
                                id?: string;
                                name?: string;
                                en_name?: string;
                                email?: string;
                                avatar_url?: string;
                            };
                            created_time?: number;
                            last_modified_by?: {
                                id?: string;
                                name?: string;
                                en_name?: string;
                                email?: string;
                                avatar_url?: string;
                            };
                            last_modified_time?: number;
                            fields: Record<
                                string,
                                | string
                                | boolean
                                | { text?: string; link?: string }
                                | {
                                      location?: string;
                                      pname?: string;
                                      cityname?: string;
                                      adname?: string;
                                      address?: string;
                                      name?: string;
                                      full_address?: string;
                                  }
                                | Array<string>
                                | Array<{
                                      id?: string;
                                      name?: string;
                                      en_name?: string;
                                      email?: string;
                                      avatar_url?: string;
                                  }>
                                | Array<{
                                      file_token?: string;
                                      name?: string;
                                      type?: string;
                                      size?: number;
                                      url?: string;
                                      tmp_url?: string;
                                  }>
                            >;
                        }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                records?: Array<{
                                    record_id?: string;
                                    created_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                        avatar_url?: string;
                                    };
                                    created_time?: number;
                                    last_modified_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                        avatar_url?: string;
                                    };
                                    last_modified_time?: number;
                                    fields: Record<
                                        string,
                                        | string
                                        | boolean
                                        | { text?: string; link?: string }
                                        | {
                                              location?: string;
                                              pname?: string;
                                              cityname?: string;
                                              adname?: string;
                                              address?: string;
                                              name?: string;
                                              full_address?: string;
                                          }
                                        | Array<string>
                                        | Array<{
                                              id?: string;
                                              name?: string;
                                              en_name?: string;
                                              email?: string;
                                              avatar_url?: string;
                                          }>
                                        | Array<{
                                              file_token?: string;
                                              name?: string;
                                              type?: string;
                                              size?: number;
                                              url?: string;
                                              tmp_url?: string;
                                          }>
                                    >;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_update`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/create document }
             *
             * 新增记录
             *
             * 该接口用于在数据表中新增一条记录
             *
             * 该接口支持调用频率上限为 10 QPS（Query Per Second，每秒请求率）
             */
            create: async (
                payload?: {
                    data: {
                        fields: Record<
                            string,
                            | string
                            | boolean
                            | { text?: string; link?: string }
                            | {
                                  location?: string;
                                  pname?: string;
                                  cityname?: string;
                                  adname?: string;
                                  address?: string;
                                  name?: string;
                                  full_address?: string;
                              }
                            | Array<string>
                            | Array<{
                                  id?: string;
                                  name?: string;
                                  en_name?: string;
                                  email?: string;
                              }>
                            | Array<{
                                  file_token?: string;
                                  name?: string;
                                  type?: string;
                                  size?: number;
                                  url?: string;
                                  tmp_url?: string;
                              }>
                        >;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        client_token?: string;
                    };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                record?: {
                                    record_id?: string;
                                    created_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                        avatar_url?: string;
                                    };
                                    created_time?: number;
                                    last_modified_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                        avatar_url?: string;
                                    };
                                    last_modified_time?: number;
                                    fields: Record<
                                        string,
                                        | string
                                        | boolean
                                        | { text?: string; link?: string }
                                        | {
                                              location?: string;
                                              pname?: string;
                                              cityname?: string;
                                              adname?: string;
                                              address?: string;
                                              name?: string;
                                              full_address?: string;
                                          }
                                        | Array<string>
                                        | Array<{
                                              id?: string;
                                              name?: string;
                                              en_name?: string;
                                              email?: string;
                                              avatar_url?: string;
                                          }>
                                        | Array<{
                                              file_token?: string;
                                              name?: string;
                                              type?: string;
                                              size?: number;
                                              url?: string;
                                              tmp_url?: string;
                                          }>
                                    >;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/delete document }
             *
             * 删除记录
             *
             * 该接口用于删除数据表中的一条记录
             *
             * 该接口支持调用频率上限为 10 QPS
             */
            delete: async (
                payload?: {
                    path: {
                        app_token: string;
                        table_id: string;
                        record_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { deleted?: boolean; record_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/get document }
             *
             * 检索记录
             *
             * 该接口用于根据 record_id 的值检索现有记录
             *
             * 该接口支持调用频率上限为 20 QPS
             */
            get: async (
                payload?: {
                    params?: {
                        text_field_as_array?: boolean;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        display_formula_ref?: boolean;
                        automatic_fields?: boolean;
                    };
                    path: {
                        app_token: string;
                        table_id: string;
                        record_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                record?: {
                                    record_id?: string;
                                    created_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                        avatar_url?: string;
                                    };
                                    created_time?: number;
                                    last_modified_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                        avatar_url?: string;
                                    };
                                    last_modified_time?: number;
                                    fields: Record<
                                        string,
                                        | string
                                        | boolean
                                        | { text?: string; link?: string }
                                        | {
                                              location?: string;
                                              pname?: string;
                                              cityname?: string;
                                              adname?: string;
                                              address?: string;
                                              name?: string;
                                              full_address?: string;
                                          }
                                        | Array<string>
                                        | Array<{
                                              id?: string;
                                              name?: string;
                                              en_name?: string;
                                              email?: string;
                                              avatar_url?: string;
                                          }>
                                        | Array<{
                                              file_token?: string;
                                              name?: string;
                                              type?: string;
                                              size?: number;
                                              url?: string;
                                              tmp_url?: string;
                                          }>
                                    >;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        view_id?: string;
                        filter?: string;
                        sort?: string;
                        field_names?: string;
                        text_field_as_array?: boolean;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        display_formula_ref?: boolean;
                        automatic_fields?: boolean;
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                total?: number;
                                                items?: Array<{
                                                    record_id?: string;
                                                    created_by?: {
                                                        id?: string;
                                                        name?: string;
                                                        en_name?: string;
                                                        email?: string;
                                                        avatar_url?: string;
                                                    };
                                                    created_time?: number;
                                                    last_modified_by?: {
                                                        id?: string;
                                                        name?: string;
                                                        en_name?: string;
                                                        email?: string;
                                                        avatar_url?: string;
                                                    };
                                                    last_modified_time?: number;
                                                    fields: Record<
                                                        string,
                                                        | string
                                                        | boolean
                                                        | {
                                                              text?: string;
                                                              link?: string;
                                                          }
                                                        | {
                                                              location?: string;
                                                              pname?: string;
                                                              cityname?: string;
                                                              adname?: string;
                                                              address?: string;
                                                              name?: string;
                                                              full_address?: string;
                                                          }
                                                        | Array<string>
                                                        | Array<{
                                                              id?: string;
                                                              name?: string;
                                                              en_name?: string;
                                                              email?: string;
                                                              avatar_url?: string;
                                                          }>
                                                        | Array<{
                                                              file_token?: string;
                                                              name?: string;
                                                              type?: string;
                                                              size?: number;
                                                              url?: string;
                                                              tmp_url?: string;
                                                          }>
                                                    >;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/list document }
             *
             * 列出记录
             *
             * 该接口用于列出数据表中的现有记录，单次最多列出 500 行记录，支持分页获取。
             *
             * 该接口支持调用频率上限为 10 QPS（Query Per Second，每秒请求率），1000 QPM（Query Per Minute，每分钟请求率）
             */
            list: async (
                payload?: {
                    params?: {
                        view_id?: string;
                        filter?: string;
                        sort?: string;
                        field_names?: string;
                        text_field_as_array?: boolean;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        display_formula_ref?: boolean;
                        automatic_fields?: boolean;
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                total?: number;
                                items?: Array<{
                                    record_id?: string;
                                    created_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                        avatar_url?: string;
                                    };
                                    created_time?: number;
                                    last_modified_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                        avatar_url?: string;
                                    };
                                    last_modified_time?: number;
                                    fields: Record<
                                        string,
                                        | string
                                        | boolean
                                        | { text?: string; link?: string }
                                        | {
                                              location?: string;
                                              pname?: string;
                                              cityname?: string;
                                              adname?: string;
                                              address?: string;
                                              name?: string;
                                              full_address?: string;
                                          }
                                        | Array<string>
                                        | Array<{
                                              id?: string;
                                              name?: string;
                                              en_name?: string;
                                              email?: string;
                                              avatar_url?: string;
                                          }>
                                        | Array<{
                                              file_token?: string;
                                              name?: string;
                                              type?: string;
                                              size?: number;
                                              url?: string;
                                              tmp_url?: string;
                                          }>
                                    >;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/update document }
             *
             * 更新记录
             *
             * 该接口用于更新数据表中的一条记录
             *
             * 该接口支持调用频率上限为 10 QPS（Query Per Second，每秒请求率）
             */
            update: async (
                payload?: {
                    data: {
                        fields: Record<
                            string,
                            | string
                            | boolean
                            | { text?: string; link?: string }
                            | {
                                  location?: string;
                                  pname?: string;
                                  cityname?: string;
                                  adname?: string;
                                  address?: string;
                                  name?: string;
                                  full_address?: string;
                              }
                            | Array<string>
                            | Array<{
                                  id?: string;
                                  name?: string;
                                  en_name?: string;
                                  email?: string;
                              }>
                            | Array<{
                                  file_token?: string;
                                  name?: string;
                                  type?: string;
                                  size?: number;
                                  url?: string;
                                  tmp_url?: string;
                              }>
                        >;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: {
                        app_token: string;
                        table_id: string;
                        record_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                record?: {
                                    record_id?: string;
                                    created_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                        avatar_url?: string;
                                    };
                                    created_time?: number;
                                    last_modified_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                        avatar_url?: string;
                                    };
                                    last_modified_time?: number;
                                    fields: Record<
                                        string,
                                        | string
                                        | boolean
                                        | { text?: string; link?: string }
                                        | {
                                              location?: string;
                                              pname?: string;
                                              cityname?: string;
                                              adname?: string;
                                              address?: string;
                                              name?: string;
                                              full_address?: string;
                                          }
                                        | Array<string>
                                        | Array<{
                                              id?: string;
                                              name?: string;
                                              en_name?: string;
                                              email?: string;
                                              avatar_url?: string;
                                          }>
                                        | Array<{
                                              file_token?: string;
                                              name?: string;
                                              type?: string;
                                              size?: number;
                                              url?: string;
                                              tmp_url?: string;
                                          }>
                                    >;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 视图
         */
        appTableView: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.view&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/create document }
             *
             * 新增视图
             *
             * 在数据表中新增一个视图
             *
             * 该接口支持调用频率上限为 10 QPS
             */
            create: async (
                payload?: {
                    data: {
                        view_name: string;
                        view_type?:
                            | "grid"
                            | "kanban"
                            | "gallery"
                            | "gantt"
                            | "form";
                    };
                    path?: { app_token?: string; table_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                view?: {
                                    view_id?: string;
                                    view_name?: string;
                                    view_type?: string;
                                    property?: {
                                        filter_info?: {
                                            conjunction: "and" | "or";
                                            conditions: Array<{
                                                field_id: string;
                                                operator:
                                                    | "is"
                                                    | "isNot"
                                                    | "contains"
                                                    | "doesNotContain"
                                                    | "isEmpty"
                                                    | "isNotEmpty"
                                                    | "isGreater"
                                                    | "isGreaterEqual"
                                                    | "isLess"
                                                    | "isLessEqual";
                                                value?: string;
                                                condition_id?: string;
                                                field_type?: string;
                                            }>;
                                            condition_omitted?: boolean;
                                        };
                                        hidden_fields?: Array<string>;
                                    };
                                    view_public_level?:
                                        | "Public"
                                        | "Locked"
                                        | "Private";
                                    view_private_owner_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.view&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/delete document }
             *
             * 删除视图
             *
             * 删除数据表中的视图
             *
             * 该接口支持调用频率上限为 10 QPS
             */
            delete: async (
                payload?: {
                    path?: {
                        app_token?: string;
                        table_id?: string;
                        view_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views/:view_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.view&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/get document }
             *
             * 检索视图
             *
             * 该接口根据 view_id 检索现有视图
             */
            get: async (
                payload?: {
                    path?: {
                        app_token?: string;
                        table_id?: string;
                        view_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                view?: {
                                    view_id?: string;
                                    view_name?: string;
                                    view_type?: string;
                                    property?: {
                                        filter_info?: {
                                            conjunction: "and" | "or";
                                            conditions: Array<{
                                                field_id: string;
                                                operator:
                                                    | "is"
                                                    | "isNot"
                                                    | "contains"
                                                    | "doesNotContain"
                                                    | "isEmpty"
                                                    | "isNotEmpty"
                                                    | "isGreater"
                                                    | "isGreaterEqual"
                                                    | "isLess"
                                                    | "isLessEqual";
                                                value?: string;
                                                condition_id?: string;
                                                field_type?: string;
                                            }>;
                                            condition_omitted?: boolean;
                                        };
                                        hidden_fields?: Array<string>;
                                    };
                                    view_public_level?:
                                        | "Public"
                                        | "Locked"
                                        | "Private";
                                    view_private_owner_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views/:view_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { app_token?: string; table_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    view_id?: string;
                                                    view_name?: string;
                                                    view_type?: string;
                                                    property?: {
                                                        filter_info?: {
                                                            conjunction:
                                                                | "and"
                                                                | "or";
                                                            conditions: Array<{
                                                                field_id: string;
                                                                operator:
                                                                    | "is"
                                                                    | "isNot"
                                                                    | "contains"
                                                                    | "doesNotContain"
                                                                    | "isEmpty"
                                                                    | "isNotEmpty"
                                                                    | "isGreater"
                                                                    | "isGreaterEqual"
                                                                    | "isLess"
                                                                    | "isLessEqual";
                                                                value?: string;
                                                                condition_id?: string;
                                                                field_type?: string;
                                                            }>;
                                                            condition_omitted?: boolean;
                                                        };
                                                        hidden_fields?: Array<string>;
                                                    };
                                                    view_public_level?:
                                                        | "Public"
                                                        | "Locked"
                                                        | "Private";
                                                    view_private_owner_id?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                                total?: number;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.view&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/list document }
             *
             * 列出视图
             *
             * 根据 app_token 和 table_id，获取数据表的所有视图
             *
             * 该接口支持调用频率上限为 20 QPS
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { app_token?: string; table_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    view_id?: string;
                                    view_name?: string;
                                    view_type?: string;
                                    property?: {
                                        filter_info?: {
                                            conjunction: "and" | "or";
                                            conditions: Array<{
                                                field_id: string;
                                                operator:
                                                    | "is"
                                                    | "isNot"
                                                    | "contains"
                                                    | "doesNotContain"
                                                    | "isEmpty"
                                                    | "isNotEmpty"
                                                    | "isGreater"
                                                    | "isGreaterEqual"
                                                    | "isLess"
                                                    | "isLessEqual";
                                                value?: string;
                                                condition_id?: string;
                                                field_type?: string;
                                            }>;
                                            condition_omitted?: boolean;
                                        };
                                        hidden_fields?: Array<string>;
                                    };
                                    view_public_level?:
                                        | "Public"
                                        | "Locked"
                                        | "Private";
                                    view_private_owner_id?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                                total?: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.view&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/patch document }
             *
             * 更新视图
             *
             * 该接口用于增量修改视图信息
             */
            patch: async (
                payload?: {
                    data?: {
                        view_name?: string;
                        property?: {
                            filter_info?: {
                                conjunction: "and" | "or";
                                conditions: Array<{
                                    field_id: string;
                                    operator:
                                        | "is"
                                        | "isNot"
                                        | "contains"
                                        | "doesNotContain"
                                        | "isEmpty"
                                        | "isNotEmpty"
                                        | "isGreater"
                                        | "isGreaterEqual"
                                        | "isLess"
                                        | "isLessEqual";
                                    value?: string;
                                }>;
                            };
                            hidden_fields?: Array<string>;
                        };
                    };
                    path?: {
                        app_token?: string;
                        table_id?: string;
                        view_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                view?: {
                                    view_id?: string;
                                    view_name?: string;
                                    view_type?: string;
                                    property?: {
                                        filter_info?: {
                                            conjunction: "and" | "or";
                                            conditions: Array<{
                                                field_id: string;
                                                operator:
                                                    | "is"
                                                    | "isNot"
                                                    | "contains"
                                                    | "doesNotContain"
                                                    | "isEmpty"
                                                    | "isNotEmpty"
                                                    | "isGreater"
                                                    | "isGreaterEqual"
                                                    | "isLess"
                                                    | "isLessEqual";
                                                value?: string;
                                                condition_id?: string;
                                                field_type?: string;
                                            }>;
                                            condition_omitted?: boolean;
                                        };
                                        hidden_fields?: Array<string>;
                                    };
                                    view_public_level?:
                                        | "Public"
                                        | "Locked"
                                        | "Private";
                                    view_private_owner_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views/:view_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * 小组件
     */
    block = {
        /**
         * 服务端 API
         */
        entity: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=block&resource=entity&apiName=create&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/block-v2/entity/create document }
             *
             * 创建 BlockEntity
             *
             * 开发者可以通过该接口将部分或全部数据存放于 BlockEntity。
             */
            create: async (
                payload?: {
                    data: {
                        title: string;
                        block_type_id: string;
                        source_data: string;
                        source_meta: string;
                        version: string;
                        source_link?: string;
                        owner?: string;
                        extra?: string;
                        i18n_summary?: string;
                        i18n_preview?: string;
                        summary?: string;
                        preview?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                entity: {
                                    block_id: string;
                                    title?: string;
                                    block_type_id: string;
                                    source_data: string;
                                    source_meta: string;
                                    version: string;
                                    source_link?: string;
                                    summary?: string;
                                    preview?: string;
                                    i18n_summay?: string;
                                    i18n_preview?: string;
                                    owner?: string;
                                    extra?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/block/v2/entities`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=block&resource=entity&apiName=update&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/block-v2/entity/update document }
             *
             * 更新BlockEntity
             *
             * 开发者通过该接口可以更新存储在BlockEntity中的数据，并实时推送到端侧。
             */
            update: async (
                payload?: {
                    data: {
                        title?: string;
                        block_type_id: string;
                        source_data: string;
                        source_meta: string;
                        version: string;
                        source_link?: string;
                        summary?: string;
                        preview?: string;
                        i18n_summay?: string;
                        i18n_preview?: string;
                        owner?: string;
                        extra?: string;
                    };
                    path: { block_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/block/v2/entities/:block_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 服务端 API
         */
        message: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=block&resource=message&apiName=create&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/block-v2/message/create document }
             *
             * Block协同数据推送
             *
             * 根据BlockID向指定用户列表推送协同数据。
             */
            create: async (
                payload?: {
                    data: {
                        body: string;
                        version: string;
                        block_id: string;
                        resource?: string;
                        open_ids: Array<string>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/block/v2/message`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * 日历
     */
    calendar = {
        /**
         * 日历访问控制
         */
        calendarAcl: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.acl&apiName=create&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/create document }
             *
             * 创建访问控制
             *
             * 该接口用于以当前身份（应用 / 用户）给日历添加访问控制权限，即日历成员。;;身份由 Header Authorization 的 Token 类型决定。
             *
             * 当前身份需要有日历的 owner 权限，并且日历的类型只能为 primary 或 shared。
             */
            create: async (
                payload?: {
                    data: {
                        role:
                            | "unknown"
                            | "free_busy_reader"
                            | "reader"
                            | "writer"
                            | "owner";
                        scope: { type: "user"; user_id?: string };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                acl_id: string;
                                role:
                                    | "unknown"
                                    | "free_busy_reader"
                                    | "reader"
                                    | "writer"
                                    | "owner";
                                scope: { type: "user"; user_id?: string };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.acl&apiName=delete&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/delete document }
             *
             * 删除访问控制
             *
             * 该接口用于以当前身份（应用 / 用户）删除日历的控制权限，即日历成员。;;身份由 Header Authorization 的 Token 类型决定。
             *
             * 当前身份需要有日历的 owner 权限，并且日历的类型只能为 primary 或 shared。
             */
            delete: async (
                payload?: {
                    path: { calendar_id: string; acl_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls/:acl_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                acls?: Array<{
                                                    acl_id: string;
                                                    role:
                                                        | "unknown"
                                                        | "free_busy_reader"
                                                        | "reader"
                                                        | "writer"
                                                        | "owner";
                                                    scope: {
                                                        type: "user";
                                                        user_id?: string;
                                                    };
                                                }>;
                                                has_more?: boolean;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.acl&apiName=list&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/list document }
             *
             * 获取访问控制列表
             *
             * 该接口用于以当前身份（应用 / 用户）获取日历的控制权限列表。;;身份由 Header Authorization 的 Token 类型决定。
             *
             * 当前身份需要有日历的 owner 权限，并且日历的类型只能为 primary 或 shared。
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                acls?: Array<{
                                    acl_id: string;
                                    role:
                                        | "unknown"
                                        | "free_busy_reader"
                                        | "reader"
                                        | "writer"
                                        | "owner";
                                    scope: { type: "user"; user_id?: string };
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.acl&apiName=subscription&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/subscription document }
             *
             * 订阅日历访问控制变更事件;
             *
             * 该接口用于以用户身份订阅指定日历下的日历成员变更事件。
             *
             * 用户必须对日历有访问权限。
             */
            subscription: async (
                payload?: {
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls/subscription`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.acl&apiName=unsubscription&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/unsubscription document }
             *
             * 取消订阅日历访问控制变更事件
             *
             * 该接口用于以用户身份取消订阅指定日历下的日历成员变更事件。
             *
             * 用户必须对日历有访问权限。
             */
            unsubscription: async (
                payload?: {
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls/unsubscription`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 日历管理
         */
        calendar: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=create&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/create document }
             *
             * 创建共享日历
             *
             * 该接口用于为当前身份（应用 / 用户）创建一个共享日历。;;身份由 Header Authorization 的 Token 类型决定。
             */
            create: async (
                payload?: {
                    data?: {
                        summary?: string;
                        description?: string;
                        permissions?:
                            | "private"
                            | "show_only_free_busy"
                            | "public";
                        color?: number;
                        summary_alias?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                calendar?: {
                                    calendar_id: string;
                                    summary?: string;
                                    description?: string;
                                    permissions?:
                                        | "private"
                                        | "show_only_free_busy"
                                        | "public";
                                    color?: number;
                                    type?:
                                        | "unknown"
                                        | "primary"
                                        | "shared"
                                        | "google"
                                        | "resource"
                                        | "exchange";
                                    summary_alias?: string;
                                    is_deleted?: boolean;
                                    is_third_party?: boolean;
                                    role?:
                                        | "unknown"
                                        | "free_busy_reader"
                                        | "reader"
                                        | "writer"
                                        | "owner";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=delete&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/delete document }
             *
             * 删除共享日历
             *
             * 该接口用于以当前身份（应用 / 用户）删除一个共享日历。;;身份由 Header Authorization 的 Token 类型决定。
             *
             * 当前身份必须对日历具有 owner 权限。
             */
            delete: async (
                payload?: {
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=get&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get document }
             *
             * 查询日历信息
             *
             * 该接口用于以当前身份（应用 / 用户）根据日历 ID 获取日历信息。;;身份由 Header Authorization 的 Token 类型决定。
             *
             * 当前身份必须对日历有访问权限。
             */
            get: async (
                payload?: {
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                calendar_id: string;
                                summary?: string;
                                description?: string;
                                permissions?:
                                    | "private"
                                    | "show_only_free_busy"
                                    | "public";
                                color?: number;
                                type?:
                                    | "unknown"
                                    | "primary"
                                    | "shared"
                                    | "google"
                                    | "resource"
                                    | "exchange";
                                summary_alias?: string;
                                is_deleted?: boolean;
                                is_third_party?: boolean;
                                role?:
                                    | "unknown"
                                    | "free_busy_reader"
                                    | "reader"
                                    | "writer"
                                    | "owner";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=list&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/list document }
             *
             * 查询日历列表
             *
             * 该接口用于分页获得当前身份（应用 / 用户）的日历列表。;;身份由 Header Authorization 的 Token 类型决定。
             *
             * 调用时首先使用 page_token 分页拉取存量数据，之后使用 sync_token 增量同步变更数据。
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        sync_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                sync_token?: string;
                                calendar_list?: Array<{
                                    calendar_id: string;
                                    summary?: string;
                                    description?: string;
                                    permissions?:
                                        | "private"
                                        | "show_only_free_busy"
                                        | "public";
                                    color?: number;
                                    type?:
                                        | "unknown"
                                        | "primary"
                                        | "shared"
                                        | "google"
                                        | "resource"
                                        | "exchange";
                                    summary_alias?: string;
                                    is_deleted?: boolean;
                                    is_third_party?: boolean;
                                    role?:
                                        | "unknown"
                                        | "free_busy_reader"
                                        | "reader"
                                        | "writer"
                                        | "owner";
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=patch&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/patch document }
             *
             * 更新日历信息
             *
             * 该接口用于以当前身份（应用 / 用户）修改日历信息。;;身份由 Header Authorization 的 Token 类型决定。
             *
             * 当前身份对日历有 owner 权限时，可修改全局字段：summary, description, permission。;;当前身份对日历不具有 owner 权限时，仅可修改对自己生效的字段：color, summary_alias。
             */
            patch: async (
                payload?: {
                    data?: {
                        summary?: string;
                        description?: string;
                        permissions?:
                            | "private"
                            | "show_only_free_busy"
                            | "public";
                        color?: number;
                        summary_alias?: string;
                    };
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                calendar?: {
                                    calendar_id: string;
                                    summary?: string;
                                    description?: string;
                                    permissions?:
                                        | "private"
                                        | "show_only_free_busy"
                                        | "public";
                                    color?: number;
                                    type?:
                                        | "unknown"
                                        | "primary"
                                        | "shared"
                                        | "google"
                                        | "resource"
                                        | "exchange";
                                    summary_alias?: string;
                                    is_deleted?: boolean;
                                    is_third_party?: boolean;
                                    role?:
                                        | "unknown"
                                        | "free_busy_reader"
                                        | "reader"
                                        | "writer"
                                        | "owner";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=primary&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/primary document }
             *
             * 查询主日历信息
             *
             * 获取当前身份的主日历信息。
             */
            primary: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                calendars?: Array<{
                                    calendar?: {
                                        calendar_id: string;
                                        summary?: string;
                                        description?: string;
                                        permissions?:
                                            | "private"
                                            | "show_only_free_busy"
                                            | "public";
                                        color?: number;
                                        type?:
                                            | "unknown"
                                            | "primary"
                                            | "shared"
                                            | "google"
                                            | "resource"
                                            | "exchange";
                                        summary_alias?: string;
                                        is_deleted?: boolean;
                                        is_third_party?: boolean;
                                        role?:
                                            | "unknown"
                                            | "free_busy_reader"
                                            | "reader"
                                            | "writer"
                                            | "owner";
                                    };
                                    user_id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/primary`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            searchWithIterator: async (
                payload?: {
                    data: { query: string };
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/calendar/v4/calendars/search`,
                                path
                            ),
                            method: "POST",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    calendar_id: string;
                                                    summary?: string;
                                                    description?: string;
                                                    permissions?:
                                                        | "private"
                                                        | "show_only_free_busy"
                                                        | "public";
                                                    color?: number;
                                                    type?:
                                                        | "unknown"
                                                        | "primary"
                                                        | "shared"
                                                        | "google"
                                                        | "resource"
                                                        | "exchange";
                                                    summary_alias?: string;
                                                    is_deleted?: boolean;
                                                    is_third_party?: boolean;
                                                    role?:
                                                        | "unknown"
                                                        | "free_busy_reader"
                                                        | "reader"
                                                        | "writer"
                                                        | "owner";
                                                }>;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=search&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/search document }
             *
             * 搜索日历
             *
             * 该接口用于通过关键字查询公共日历或用户主日历。
             */
            search: async (
                payload?: {
                    data: { query: string };
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    calendar_id: string;
                                    summary?: string;
                                    description?: string;
                                    permissions?:
                                        | "private"
                                        | "show_only_free_busy"
                                        | "public";
                                    color?: number;
                                    type?:
                                        | "unknown"
                                        | "primary"
                                        | "shared"
                                        | "google"
                                        | "resource"
                                        | "exchange";
                                    summary_alias?: string;
                                    is_deleted?: boolean;
                                    is_third_party?: boolean;
                                    role?:
                                        | "unknown"
                                        | "free_busy_reader"
                                        | "reader"
                                        | "writer"
                                        | "owner";
                                }>;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/search`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=subscribe&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/subscribe document }
             *
             * 订阅日历
             *
             * 该接口用于以当前身份（应用 / 用户）订阅某个日历。;;身份由 Header Authorization 的 Token 类型决定。
             *
             * - 仅可订阅类型为 primary 或 shared 的公开日历。;- 可订阅日历数量上限为1000。
             */
            subscribe: async (
                payload?: {
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                calendar?: {
                                    calendar_id: string;
                                    summary?: string;
                                    description?: string;
                                    permissions?:
                                        | "private"
                                        | "show_only_free_busy"
                                        | "public";
                                    color?: number;
                                    type?:
                                        | "unknown"
                                        | "primary"
                                        | "shared"
                                        | "google"
                                        | "resource"
                                        | "exchange";
                                    summary_alias?: string;
                                    is_deleted?: boolean;
                                    is_third_party?: boolean;
                                    role?:
                                        | "unknown"
                                        | "free_busy_reader"
                                        | "reader"
                                        | "writer"
                                        | "owner";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/subscribe`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=subscription&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/subscription document }
             *
             * 订阅日历变更事件
             *
             * 该接口用于以用户身份订阅当前身份下日历列表中的所有日历变更。
             */
            subscription: async (payload?: {}, options?: IRequestOptions) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/subscription`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=unsubscribe&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/unsubscribe document }
             *
             * 取消订阅日历
             *
             * 该接口用于以当前身份（应用 / 用户）取消对某日历的订阅状态。;;身份由 Header Authorization 的 Token 类型决定。
             *
             * 仅可操作已经被当前身份订阅的日历。
             */
            unsubscribe: async (
                payload?: {
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/unsubscribe`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=unsubscription&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/unsubscription document }
             *
             * 取消订阅日历变更事件
             *
             * 该接口用于以用户身份取消订阅当前身份下日历列表中的日历变更事件。
             */
            unsubscription: async (payload?: {}, options?: IRequestOptions) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/unsubscription`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 日程参与人
         */
        calendarEventAttendee: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event.attendee&apiName=batch_delete&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/batch_delete document }
             *
             * 删除日程参与人
             *
             * 批量删除日程的参与人。
             *
             * - 当前身份需要有日历的 writer 或 owner 权限，并且日历的类型只能为 primary 或 shared。;;- 当前身份需要是日程的组织者。
             */
            batchDelete: async (
                payload?: {
                    data?: {
                        attendee_ids?: Array<string>;
                        delete_ids?: Array<{
                            type?: "user" | "chat" | "resource" | "third_party";
                            user_id?: string;
                            chat_id?: string;
                            room_id?: string;
                            third_party_email?: string;
                        }>;
                        need_notification?: boolean;
                        instance_start_time_admin?: string;
                        is_enable_admin?: boolean;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { calendar_id: string; event_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees/batch_delete`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event.attendee&apiName=create&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/create document }
             *
             * 创建日程参与人;
             *
             * 批量给日程添加参与人。
             *
             * - 当前身份需要有日历的 writer 或 owner 权限，并且日历的类型只能为 primary 或 shared。;;- 当前身份需要是日程的组织者，或日程设置了「参与人可邀请其它参与人」权限。;;- 新添加的日程参与人必须与日程组织者在同一个企业内。;;- 使用该接口添加会议室后，会议室会进入异步的预约流程，请求结束不代表会议室预约成功，需后续再查询预约状态。;;- 每个日程最多只能有 3000 名参与人。;;- 开启管理员能力后预约会议室可不受会议室预约范围的限制（当前不支持用管理员身份给其他人的日程预约会议室）
             */
            create: async (
                payload?: {
                    data?: {
                        attendees?: Array<{
                            type?: "user" | "chat" | "resource" | "third_party";
                            is_optional?: boolean;
                            user_id?: string;
                            chat_id?: string;
                            room_id?: string;
                            third_party_email?: string;
                            operate_id?: string;
                            resource_customization?: Array<{
                                index_key: string;
                                input_content?: string;
                                options?: Array<{
                                    option_key?: string;
                                    others_content?: string;
                                }>;
                            }>;
                        }>;
                        need_notification?: boolean;
                        instance_start_time_admin?: string;
                        is_enable_admin?: boolean;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { calendar_id: string; event_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                attendees?: Array<{
                                    type?:
                                        | "user"
                                        | "chat"
                                        | "resource"
                                        | "third_party";
                                    attendee_id?: string;
                                    rsvp_status?:
                                        | "needs_action"
                                        | "accept"
                                        | "tentative"
                                        | "decline"
                                        | "removed";
                                    is_optional?: boolean;
                                    is_organizer?: boolean;
                                    is_external?: boolean;
                                    display_name?: string;
                                    chat_members?: Array<{
                                        rsvp_status?:
                                            | "needs_action"
                                            | "accept"
                                            | "tentative"
                                            | "decline"
                                            | "removed";
                                        is_optional?: boolean;
                                        display_name?: string;
                                        is_organizer?: boolean;
                                        is_external?: boolean;
                                    }>;
                                    user_id?: string;
                                    chat_id?: string;
                                    room_id?: string;
                                    third_party_email?: string;
                                    operate_id?: string;
                                    resource_customization?: Array<{
                                        index_key: string;
                                        input_content?: string;
                                        options?: Array<{
                                            option_key?: string;
                                            others_content?: string;
                                        }>;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { calendar_id: string; event_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    type?:
                                                        | "user"
                                                        | "chat"
                                                        | "resource"
                                                        | "third_party";
                                                    attendee_id?: string;
                                                    rsvp_status?:
                                                        | "needs_action"
                                                        | "accept"
                                                        | "tentative"
                                                        | "decline"
                                                        | "removed";
                                                    is_optional?: boolean;
                                                    is_organizer?: boolean;
                                                    is_external?: boolean;
                                                    display_name?: string;
                                                    chat_members?: Array<{
                                                        rsvp_status?:
                                                            | "needs_action"
                                                            | "accept"
                                                            | "tentative"
                                                            | "decline"
                                                            | "removed";
                                                        is_optional?: boolean;
                                                        display_name?: string;
                                                        is_organizer?: boolean;
                                                        is_external?: boolean;
                                                    }>;
                                                    user_id?: string;
                                                    chat_id?: string;
                                                    room_id?: string;
                                                    third_party_email?: string;
                                                    operate_id?: string;
                                                    resource_customization?: Array<{
                                                        index_key: string;
                                                        input_content?: string;
                                                        options?: Array<{
                                                            option_key?: string;
                                                            others_content?: string;
                                                        }>;
                                                    }>;
                                                }>;
                                                has_more?: boolean;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event.attendee&apiName=list&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/list document }
             *
             * 获取日程参与人列表
             *
             * 获取日程的参与人列表，若参与者列表中有群组，请使用 [获取参与人群成员列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee-chat_member/list) 。
             *
             * - 当前身份必须对日历有reader、writer或owner权限（调用[获取日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，role字段可查看权限）。;;- 当前身份必须有权限查看日程的参与人列表。
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { calendar_id: string; event_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    type?:
                                        | "user"
                                        | "chat"
                                        | "resource"
                                        | "third_party";
                                    attendee_id?: string;
                                    rsvp_status?:
                                        | "needs_action"
                                        | "accept"
                                        | "tentative"
                                        | "decline"
                                        | "removed";
                                    is_optional?: boolean;
                                    is_organizer?: boolean;
                                    is_external?: boolean;
                                    display_name?: string;
                                    chat_members?: Array<{
                                        rsvp_status?:
                                            | "needs_action"
                                            | "accept"
                                            | "tentative"
                                            | "decline"
                                            | "removed";
                                        is_optional?: boolean;
                                        display_name?: string;
                                        is_organizer?: boolean;
                                        is_external?: boolean;
                                    }>;
                                    user_id?: string;
                                    chat_id?: string;
                                    room_id?: string;
                                    third_party_email?: string;
                                    operate_id?: string;
                                    resource_customization?: Array<{
                                        index_key: string;
                                        input_content?: string;
                                        options?: Array<{
                                            option_key?: string;
                                            others_content?: string;
                                        }>;
                                    }>;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 日程参与人群成员
         */
        calendarEventAttendeeChatMember: {
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: {
                        calendar_id: string;
                        event_id: string;
                        attendee_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees/:attendee_id/chat_members`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    rsvp_status?:
                                                        | "needs_action"
                                                        | "accept"
                                                        | "tentative"
                                                        | "decline"
                                                        | "removed";
                                                    is_optional?: boolean;
                                                    display_name?: string;
                                                    open_id?: string;
                                                    is_organizer?: boolean;
                                                    is_external?: boolean;
                                                }>;
                                                has_more?: boolean;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event.attendee.chat_member&apiName=list&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee-chat_member/list document }
             *
             * 获取日程参与群成员列表
             *
             * 获取日程的群参与人的群成员列表。
             *
             * - 当前身份必须有权限查看日程的参与人列表。;;- 当前身份必须在群聊中，或有权限查看群成员列表。
             */
            list: async (
                payload?: {
                    params?: {
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: {
                        calendar_id: string;
                        event_id: string;
                        attendee_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    rsvp_status?:
                                        | "needs_action"
                                        | "accept"
                                        | "tentative"
                                        | "decline"
                                        | "removed";
                                    is_optional?: boolean;
                                    display_name?: string;
                                    open_id?: string;
                                    is_organizer?: boolean;
                                    is_external?: boolean;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees/:attendee_id/chat_members`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 日程
         */
        calendarEvent: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=create&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/create document }
             *
             * 创建日程
             *
             * 该接口用于以当前身份（应用 / 用户）在日历上创建一个日程。;;身份由 Header Authorization 的 Token 类型决定。
             *
             * 当前身份必须对日历有 writer 或 owner 权限，并且日历的类型只能为 primary 或 shared。
             */
            create: async (
                payload?: {
                    data: {
                        summary?: string;
                        description?: string;
                        need_notification?: boolean;
                        start_time: {
                            date?: string;
                            timestamp?: string;
                            timezone?: string;
                        };
                        end_time: {
                            date?: string;
                            timestamp?: string;
                            timezone?: string;
                        };
                        vchat?: {
                            vc_type?:
                                | "vc"
                                | "third_party"
                                | "no_meeting"
                                | "lark_live"
                                | "unknown";
                            icon_type?: "vc" | "live" | "default";
                            description?: string;
                            meeting_url?: string;
                        };
                        visibility?: "default" | "public" | "private";
                        attendee_ability?:
                            | "none"
                            | "can_see_others"
                            | "can_invite_others"
                            | "can_modify_event";
                        free_busy_status?: "busy" | "free";
                        location?: {
                            name?: string;
                            address?: string;
                            latitude?: number;
                            longitude?: number;
                        };
                        color?: number;
                        reminders?: Array<{ minutes?: number }>;
                        recurrence?: string;
                        schemas?: Array<{
                            ui_name?: string;
                            ui_status?:
                                | "hide"
                                | "readonly"
                                | "editable"
                                | "unknown";
                            app_link?: string;
                        }>;
                    };
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                event?: {
                                    event_id: string;
                                    organizer_calendar_id?: string;
                                    summary?: string;
                                    description?: string;
                                    need_notification?: boolean;
                                    start_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    end_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    vchat?: {
                                        vc_type?:
                                            | "vc"
                                            | "third_party"
                                            | "no_meeting"
                                            | "lark_live"
                                            | "unknown";
                                        icon_type?: "vc" | "live" | "default";
                                        description?: string;
                                        meeting_url?: string;
                                        live_link?: string;
                                    };
                                    visibility?:
                                        | "default"
                                        | "public"
                                        | "private";
                                    attendee_ability?:
                                        | "none"
                                        | "can_see_others"
                                        | "can_invite_others"
                                        | "can_modify_event";
                                    free_busy_status?: "busy" | "free";
                                    location?: {
                                        name?: string;
                                        address?: string;
                                        latitude?: number;
                                        longitude?: number;
                                    };
                                    color?: number;
                                    reminders?: Array<{ minutes?: number }>;
                                    recurrence?: string;
                                    status?:
                                        | "tentative"
                                        | "confirmed"
                                        | "cancelled";
                                    is_exception?: boolean;
                                    recurring_event_id?: string;
                                    create_time?: string;
                                    schemas?: Array<{
                                        ui_name?: string;
                                        ui_status?:
                                            | "hide"
                                            | "readonly"
                                            | "editable"
                                            | "unknown";
                                        app_link?: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=delete&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/delete document }
             *
             * 删除日程
             *
             * 该接口用于以当前身份（应用 / 用户）删除日历上的一个日程。;;身份由 Header Authorization 的 Token 类型决定。
             *
             * 当前身份必须对日历有 writer 或 owner 权限，并且日历的类型只能为 primary 或 shared。;;当前身份必须是日程的组织者。
             */
            delete: async (
                payload?: {
                    params?: { need_notification?: boolean };
                    path: { calendar_id: string; event_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=get&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/get document }
             *
             * 获取日程
             *
             * 该接口用于以当前身份（应用 / 用户）获取日历上的一个日程。;身份由 Header Authorization 的 Token 类型决定。
             *
             * - 当前身份必须对日历有reader、writer或owner权限才会返回日程详细信息（调用[获取日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，role字段可查看权限）。;- [例外日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction#71c5ec78)可通过event_id的非0时间戳后缀，来获取修改的重复性日程的哪一天日程的时间信息。
             */
            get: async (
                payload?: {
                    path: { calendar_id: string; event_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                event?: {
                                    event_id: string;
                                    organizer_calendar_id?: string;
                                    summary?: string;
                                    description?: string;
                                    start_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    end_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    vchat?: {
                                        vc_type?:
                                            | "vc"
                                            | "third_party"
                                            | "no_meeting"
                                            | "lark_live"
                                            | "unknown";
                                        icon_type?: "vc" | "live" | "default";
                                        description?: string;
                                        meeting_url?: string;
                                        live_link?: string;
                                    };
                                    visibility?:
                                        | "default"
                                        | "public"
                                        | "private";
                                    attendee_ability?:
                                        | "none"
                                        | "can_see_others"
                                        | "can_invite_others"
                                        | "can_modify_event";
                                    free_busy_status?: "busy" | "free";
                                    location?: {
                                        name?: string;
                                        address?: string;
                                        latitude?: number;
                                        longitude?: number;
                                    };
                                    color?: number;
                                    reminders?: Array<{ minutes?: number }>;
                                    recurrence?: string;
                                    status?:
                                        | "tentative"
                                        | "confirmed"
                                        | "cancelled";
                                    is_exception?: boolean;
                                    recurring_event_id?: string;
                                    create_time?: string;
                                    schemas?: Array<{
                                        ui_name?: string;
                                        ui_status?:
                                            | "hide"
                                            | "readonly"
                                            | "editable"
                                            | "unknown";
                                        app_link?: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=list&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list document }
             *
             * 获取日程列表
             *
             * 该接口用于以当前身份（应用 / 用户）获取日历下的日程列表。;身份由 Header Authorization 的 Token 类型决定。
             *
             * - 当前身份必须对日历有reader、writer或owner权限才会返回日程详细信息（调用[获取日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，role字段可查看权限）。;;- 仅支持primary、shared和resource类型的日历获取日程列表。;;- page_token 分页拉取存量数据，sync_token 增量同步变更数据；目前仅传anchor_time时，会返回page_token。;;- 为了确保调用方日程同步数据的一致性，在使用sync_token时，不能同时使用start_time和end_time，否则可能造成日程数据缺失。
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        anchor_time?: string;
                        page_token?: string;
                        sync_token?: string;
                        start_time?: string;
                        end_time?: string;
                    };
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                sync_token?: string;
                                items?: Array<{
                                    event_id: string;
                                    organizer_calendar_id?: string;
                                    summary?: string;
                                    description?: string;
                                    start_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    end_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    vchat?: {
                                        vc_type?:
                                            | "vc"
                                            | "third_party"
                                            | "no_meeting"
                                            | "lark_live"
                                            | "unknown";
                                        icon_type?: "vc" | "live" | "default";
                                        description?: string;
                                        meeting_url?: string;
                                        live_link?: string;
                                    };
                                    visibility?:
                                        | "default"
                                        | "public"
                                        | "private";
                                    attendee_ability?:
                                        | "none"
                                        | "can_see_others"
                                        | "can_invite_others"
                                        | "can_modify_event";
                                    free_busy_status?: "busy" | "free";
                                    location?: {
                                        name?: string;
                                        address?: string;
                                        latitude?: number;
                                        longitude?: number;
                                    };
                                    color?: number;
                                    reminders?: Array<{ minutes?: number }>;
                                    recurrence?: string;
                                    status?:
                                        | "tentative"
                                        | "confirmed"
                                        | "cancelled";
                                    is_exception?: boolean;
                                    recurring_event_id?: string;
                                    create_time?: string;
                                    schemas?: Array<{
                                        ui_name?: string;
                                        ui_status?:
                                            | "hide"
                                            | "readonly"
                                            | "editable"
                                            | "unknown";
                                        app_link?: string;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=patch&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/patch document }
             *
             * 更新日程
             *
             * 该接口用于以当前身份（应用 / 用户）更新日历上的一个日程。;;身份由 Header Authorization 的 Token 类型决定。
             *
             * 当前身份必须对日历有 writer 或 owner 权限，并且日历的类型只能为 primary 或 shared。;;当前身份为日程组织者时，可修改所有可编辑字段。;;当前身份为日程参与者时，仅可编辑部分字段。（如：visibility, free_busy_status, color, reminders）
             */
            patch: async (
                payload?: {
                    data?: {
                        summary?: string;
                        description?: string;
                        need_notification?: boolean;
                        start_time?: {
                            date?: string;
                            timestamp?: string;
                            timezone?: string;
                        };
                        end_time?: {
                            date?: string;
                            timestamp?: string;
                            timezone?: string;
                        };
                        vchat?: {
                            vc_type?:
                                | "vc"
                                | "third_party"
                                | "no_meeting"
                                | "lark_live"
                                | "unknown";
                            icon_type?: "vc" | "live" | "default";
                            description?: string;
                            meeting_url?: string;
                        };
                        visibility?: "default" | "public" | "private";
                        attendee_ability?:
                            | "none"
                            | "can_see_others"
                            | "can_invite_others"
                            | "can_modify_event";
                        free_busy_status?: "busy" | "free";
                        location?: {
                            name?: string;
                            address?: string;
                            latitude?: number;
                            longitude?: number;
                        };
                        color?: number;
                        reminders?: Array<{ minutes?: number }>;
                        recurrence?: string;
                        schemas?: Array<{
                            ui_name?: string;
                            ui_status?:
                                | "hide"
                                | "readonly"
                                | "editable"
                                | "unknown";
                            app_link?: string;
                        }>;
                    };
                    path: { calendar_id: string; event_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                event?: {
                                    event_id: string;
                                    organizer_calendar_id?: string;
                                    summary?: string;
                                    description?: string;
                                    need_notification?: boolean;
                                    start_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    end_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    vchat?: {
                                        vc_type?:
                                            | "vc"
                                            | "third_party"
                                            | "no_meeting"
                                            | "lark_live"
                                            | "unknown";
                                        icon_type?: "vc" | "live" | "default";
                                        description?: string;
                                        meeting_url?: string;
                                        live_link?: string;
                                    };
                                    visibility?:
                                        | "default"
                                        | "public"
                                        | "private";
                                    attendee_ability?:
                                        | "none"
                                        | "can_see_others"
                                        | "can_invite_others"
                                        | "can_modify_event";
                                    free_busy_status?: "busy" | "free";
                                    location?: {
                                        name?: string;
                                        address?: string;
                                        latitude?: number;
                                        longitude?: number;
                                    };
                                    color?: number;
                                    reminders?: Array<{ minutes?: number }>;
                                    recurrence?: string;
                                    status?:
                                        | "tentative"
                                        | "confirmed"
                                        | "cancelled";
                                    is_exception?: boolean;
                                    recurring_event_id?: string;
                                    create_time?: string;
                                    schemas?: Array<{
                                        ui_name?: string;
                                        ui_status?:
                                            | "hide"
                                            | "readonly"
                                            | "editable"
                                            | "unknown";
                                        app_link?: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            searchWithIterator: async (
                payload?: {
                    data: {
                        query: string;
                        filter?: {
                            start_time?: {
                                date?: string;
                                timestamp?: string;
                                timezone?: string;
                            };
                            end_time?: {
                                date?: string;
                                timestamp?: string;
                                timezone?: string;
                            };
                            user_ids?: Array<string>;
                            room_ids?: Array<string>;
                            chat_ids?: Array<string>;
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/search`,
                                path
                            ),
                            method: "POST",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    event_id: string;
                                                    organizer_calendar_id?: string;
                                                    summary?: string;
                                                    description?: string;
                                                    need_notification?: boolean;
                                                    start_time: {
                                                        date?: string;
                                                        timestamp?: string;
                                                        timezone?: string;
                                                    };
                                                    end_time: {
                                                        date?: string;
                                                        timestamp?: string;
                                                        timezone?: string;
                                                    };
                                                    vchat?: {
                                                        vc_type?:
                                                            | "vc"
                                                            | "third_party"
                                                            | "no_meeting"
                                                            | "lark_live"
                                                            | "unknown";
                                                        icon_type?:
                                                            | "vc"
                                                            | "live"
                                                            | "default";
                                                        description?: string;
                                                        meeting_url?: string;
                                                        live_link?: string;
                                                    };
                                                    visibility?:
                                                        | "default"
                                                        | "public"
                                                        | "private";
                                                    attendee_ability?:
                                                        | "none"
                                                        | "can_see_others"
                                                        | "can_invite_others"
                                                        | "can_modify_event";
                                                    free_busy_status?:
                                                        | "busy"
                                                        | "free";
                                                    location?: {
                                                        name?: string;
                                                        address?: string;
                                                        latitude?: number;
                                                        longitude?: number;
                                                    };
                                                    color?: number;
                                                    reminders?: Array<{
                                                        minutes?: number;
                                                    }>;
                                                    recurrence?: string;
                                                    status?:
                                                        | "tentative"
                                                        | "confirmed"
                                                        | "cancelled";
                                                    is_exception?: boolean;
                                                    recurring_event_id?: string;
                                                    schemas?: Array<{
                                                        ui_name?: string;
                                                        ui_status?:
                                                            | "hide"
                                                            | "readonly"
                                                            | "editable"
                                                            | "unknown";
                                                        app_link?: string;
                                                    }>;
                                                }>;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=search&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search document }
             *
             * 搜索日程
             *
             * 该接口用于以用户身份搜索某日历下的相关日程。;;身份由 Header Authorization 的 Token 类型决定。
             *
             * 当前身份必须对日历有reader、writer或owner权限（调用[获取日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，role字段可查看权限）。
             */
            search: async (
                payload?: {
                    data: {
                        query: string;
                        filter?: {
                            start_time?: {
                                date?: string;
                                timestamp?: string;
                                timezone?: string;
                            };
                            end_time?: {
                                date?: string;
                                timestamp?: string;
                                timezone?: string;
                            };
                            user_ids?: Array<string>;
                            room_ids?: Array<string>;
                            chat_ids?: Array<string>;
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    event_id: string;
                                    organizer_calendar_id?: string;
                                    summary?: string;
                                    description?: string;
                                    need_notification?: boolean;
                                    start_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    end_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    vchat?: {
                                        vc_type?:
                                            | "vc"
                                            | "third_party"
                                            | "no_meeting"
                                            | "lark_live"
                                            | "unknown";
                                        icon_type?: "vc" | "live" | "default";
                                        description?: string;
                                        meeting_url?: string;
                                        live_link?: string;
                                    };
                                    visibility?:
                                        | "default"
                                        | "public"
                                        | "private";
                                    attendee_ability?:
                                        | "none"
                                        | "can_see_others"
                                        | "can_invite_others"
                                        | "can_modify_event";
                                    free_busy_status?: "busy" | "free";
                                    location?: {
                                        name?: string;
                                        address?: string;
                                        latitude?: number;
                                        longitude?: number;
                                    };
                                    color?: number;
                                    reminders?: Array<{ minutes?: number }>;
                                    recurrence?: string;
                                    status?:
                                        | "tentative"
                                        | "confirmed"
                                        | "cancelled";
                                    is_exception?: boolean;
                                    recurring_event_id?: string;
                                    schemas?: Array<{
                                        ui_name?: string;
                                        ui_status?:
                                            | "hide"
                                            | "readonly"
                                            | "editable"
                                            | "unknown";
                                        app_link?: string;
                                    }>;
                                }>;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/search`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=subscription&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/subscription document }
             *
             * 订阅日程变更事件
             *
             * 该接口用于以用户身份订阅指定日历下的日程变更事件。
             *
             * 当前身份必须对日历有reader、writer或owner权限（调用[获取日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，role字段可查看权限）。
             */
            subscription: async (
                payload?: {
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/subscription`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=unsubscription&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/unsubscription document }
             *
             * 取消订阅日程变更事件
             *
             * 该接口用于以用户身份取消订阅指定日历下的日程变更事件。
             *
             * 当前身份必须对日历有reader、writer或owner权限（调用[获取日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，role字段可查看权限）。
             */
            unsubscription: async (
                payload?: {
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/unsubscription`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * Exchange绑定
         */
        exchangeBinding: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=exchange_binding&apiName=create&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/exchange_binding/create document }
             *
             * 创建Exchange绑定关系
             *
             * 本接口将Exchange账户绑定到飞书账户，进而支持Exchange日历的导入
             *
             * 操作用户需要是企业超级管理员
             */
            create: async (
                payload?: {
                    data?: {
                        admin_account?: string;
                        exchange_account?: string;
                        user_id?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                admin_account?: string;
                                exchange_account?: string;
                                user_id?: string;
                                status?:
                                    | "doing"
                                    | "cal_done"
                                    | "timespan_done"
                                    | "done"
                                    | "err";
                                exchange_binding_id: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/exchange_bindings`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=exchange_binding&apiName=delete&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/exchange_binding/delete document }
             *
             * 解除Exchange绑定关系
             *
             * 本接口解除Exchange账户和飞书账户的绑定关系，Exchange账户解除绑定后才能绑定其他飞书账户
             *
             * 操作用户需要是企业超级管理员
             */
            delete: async (
                payload?: {
                    path: { exchange_binding_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/exchange_bindings/:exchange_binding_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=exchange_binding&apiName=get&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/exchange_binding/get document }
             *
             * 获取绑定状态
             *
             * 本接口获取Exchange账户的绑定状态，包括exchange日历是否同步完成。
             *
             * 操作用户需要是企业超级管理员
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { exchange_binding_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                admin_account?: string;
                                exchange_account?: string;
                                user_id?: string;
                                status?:
                                    | "doing"
                                    | "cal_done"
                                    | "timespan_done"
                                    | "done"
                                    | "err";
                                exchange_binding_id?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/exchange_bindings/:exchange_binding_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * freebusy
         */
        freebusy: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=freebusy&apiName=list&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/freebusy/list document }
             *
             * 查询主日历忙闲信息
             *
             * 查询用户主日历或会议室的忙闲信息。
             */
            list: async (
                payload?: {
                    data: {
                        time_min: string;
                        time_max: string;
                        user_id?: string;
                        room_id?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                freebusy_list?: Array<{
                                    start_time: string;
                                    end_time: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/freebusy/list`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 日历设置
         */
        setting: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=setting&apiName=generate_caldav_conf&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/setting/generate_caldav_conf document }
             *
             * 生成CalDAV配置
             *
             * 用于为当前用户生成一个CalDAV账号密码，用于将飞书日历信息同步到本地设备日历。
             */
            generateCaldavConf: async (
                payload?: {
                    data?: { device_name?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                password?: string;
                                user_name?: string;
                                server_address?: string;
                                device_name?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/settings/generate_caldav_conf`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 请假
         */
        timeoffEvent: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=timeoff_event&apiName=create&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/timeoff_event/create document }
             *
             * 创建请假日程
             *
             * 为指定用户创建一个请假日程，可以是一个普通请假日程，也可以是一个全天日程。;创建请假日程后，会在相应时间内，在用户个人签名页展示请假信息。
             */
            create: async (
                payload?: {
                    data: {
                        user_id: string;
                        timezone: string;
                        start_time: string;
                        end_time: string;
                        title?: string;
                        description?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                timeoff_event_id: string;
                                user_id: string;
                                timezone: string;
                                start_time: string;
                                end_time: string;
                                title?: string;
                                description?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/timeoff_events`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=timeoff_event&apiName=delete&version=v4 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/timeoff_event/delete document }
             *
             * 删除请假日程
             *
             * 删除一个指定的请假日程，请假日程删除，用户个人签名页的请假信息也会消失。;一个应用只能删除自己创建的请假日程。
             */
            delete: async (
                payload?: {
                    path: { timeoff_event_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/timeoff_events/:timeoff_event_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
         
         */
    comment_sdk = {};
    /**
     * 通讯录
     */
    contact = {
        /**
         * 自定义用户字段
         */
        customAttr: {
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/custom_attrs`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    id: string;
                                                    type: string;
                                                    options?: {
                                                        default_option_id?: string;
                                                        option_type:
                                                            | "TEXT"
                                                            | "PICTURE";
                                                        options: Array<{
                                                            id: string;
                                                            value: string;
                                                            name?: string;
                                                        }>;
                                                    };
                                                    i18n_name?: Array<{
                                                        locale?: string;
                                                        value?: string;
                                                    }>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=custom_attr&apiName=list&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/custom_attr/list document }
             *
             * 获取企业自定义用户字段
             *
             * 获取企业自定义的用户字段配置信息
             *
             * 调用该接口前，需要先确认[企业管理员](https://www.feishu.cn/hc/zh-CN/articles/360049067822)在[企业管理后台 - 组织架构 - 成员字段管理](http://www.feishu.cn/admin/contacts/employee-field-new/custom) 自定义字段管理栏开启了“允许开放平台API调用“。;;![通讯录.gif](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/544738c94f13ef0b9ebaff53a5133cc7_E9EGMkXyzX.gif)
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id: string;
                                    type: string;
                                    options?: {
                                        default_option_id?: string;
                                        option_type: "TEXT" | "PICTURE";
                                        options: Array<{
                                            id: string;
                                            value: string;
                                            name?: string;
                                        }>;
                                    };
                                    i18n_name?: Array<{
                                        locale?: string;
                                        value?: string;
                                    }>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/custom_attrs`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 部门
         */
        department: {
            childrenWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        fetch_child?: boolean;
                        page_size?: number;
                        page_token?: string;
                    };
                    path: { department_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/departments/:department_id/children`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    name: string;
                                                    i18n_name?: {
                                                        zh_cn?: string;
                                                        ja_jp?: string;
                                                        en_us?: string;
                                                    };
                                                    parent_department_id: string;
                                                    department_id?: string;
                                                    open_department_id?: string;
                                                    leader_user_id?: string;
                                                    chat_id?: string;
                                                    order?: string;
                                                    unit_ids?: Array<string>;
                                                    member_count?: number;
                                                    status?: {
                                                        is_deleted?: boolean;
                                                    };
                                                    create_group_chat?: boolean;
                                                    leaders?: Array<{
                                                        leaderType: number;
                                                        leaderID: string;
                                                    }>;
                                                    group_chat_employee_types?: Array<number>;
                                                    department_hrbps?: Array<string>;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=children&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/children document }
             *
             * 获取子部门列表
             *
             * 通过部门ID获取部门的子部门列表。
             *
             * - 部门ID 必填，根部门的部门ID 为0。;- 使用 `user_access_token` 时，返回该用户组织架构可见性范围（[登陆企业管理后台进行权限配置](https://www.feishu.cn/admin/security/permission/visibility)）内的所有可见部门。当进行递归查询时，最多1000个部门对该用户可见。;;- 使用 ;`tenant_access_token` 则基于应用的通讯录权限范围进行权限校验与过滤。;如果部门ID为0，会检验应用是否有全员通讯录权限，如果是非0 部门ID，则会校验应用是否有该部门的通讯录权限。无部门权限返回无部门通讯录权限错误码，有权限则返回部门下子部门列表（根据fetch_child决定是否递归）。
             */
            children: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        fetch_child?: boolean;
                        page_size?: number;
                        page_token?: string;
                    };
                    path: { department_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    name: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        ja_jp?: string;
                                        en_us?: string;
                                    };
                                    parent_department_id: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    leader_user_id?: string;
                                    chat_id?: string;
                                    order?: string;
                                    unit_ids?: Array<string>;
                                    member_count?: number;
                                    status?: { is_deleted?: boolean };
                                    create_group_chat?: boolean;
                                    leaders?: Array<{
                                        leaderType: number;
                                        leaderID: string;
                                    }>;
                                    group_chat_employee_types?: Array<number>;
                                    department_hrbps?: Array<string>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments/:department_id/children`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=create&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/create document }
             *
             * 创建部门
             *
             * 该接口用于向通讯录中创建部门。
             *
             * 只可在应用的通讯录权限范围内的部门下创建部门。若需要在根部门下创建子部门，则应用通讯录权限范围需要设置为“全部成员”。应用商店应用无权限调用此接口。
             */
            create: async (
                payload?: {
                    data: {
                        name: string;
                        i18n_name?: {
                            zh_cn?: string;
                            ja_jp?: string;
                            en_us?: string;
                        };
                        parent_department_id: string;
                        department_id?: string;
                        leader_user_id?: string;
                        order?: string;
                        unit_ids?: Array<string>;
                        create_group_chat?: boolean;
                        leaders?: Array<{
                            leaderType: number;
                            leaderID: string;
                        }>;
                        group_chat_employee_types?: Array<number>;
                        department_hrbps?: Array<string>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        client_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                department?: {
                                    name: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        ja_jp?: string;
                                        en_us?: string;
                                    };
                                    parent_department_id: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    leader_user_id?: string;
                                    chat_id?: string;
                                    order?: string;
                                    unit_ids?: Array<string>;
                                    member_count?: number;
                                    status?: { is_deleted?: boolean };
                                    leaders?: Array<{
                                        leaderType: number;
                                        leaderID: string;
                                    }>;
                                    group_chat_employee_types?: Array<number>;
                                    department_hrbps?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=delete&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/delete document }
             *
             * 删除部门
             *
             * 该接口用于从通讯录中删除部门。
             *
             * 应用需要同时拥有待删除部门及其父部门的通讯录授权。
             */
            delete: async (
                payload?: {
                    params?: {
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { department_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments/:department_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=get&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/get document }
             *
             * 获取单个部门信息
             *
             * 该接口用于向通讯录获取单个部门信息。
             *
             * - 使用`tenant_access_token`时，应用需要拥有待查询部门的通讯录授权。如果需要获取根部门信息，则需要拥有全员权限。;- 使用`user_access_token`时，用户需要有待查询部门的可见性，如果需要获取根部门信息，则要求员工可见所有人。
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { department_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                department?: {
                                    name: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        ja_jp?: string;
                                        en_us?: string;
                                    };
                                    parent_department_id: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    leader_user_id?: string;
                                    chat_id?: string;
                                    order?: string;
                                    unit_ids?: Array<string>;
                                    member_count?: number;
                                    status?: { is_deleted?: boolean };
                                    leaders?: Array<{
                                        leaderType: number;
                                        leaderID: string;
                                    }>;
                                    group_chat_employee_types?: Array<number>;
                                    department_hrbps?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments/:department_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        parent_department_id?: string;
                        fetch_child?: boolean;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/departments`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    name: string;
                                                    i18n_name?: {
                                                        zh_cn?: string;
                                                        ja_jp?: string;
                                                        en_us?: string;
                                                    };
                                                    parent_department_id: string;
                                                    department_id?: string;
                                                    open_department_id?: string;
                                                    leader_user_id?: string;
                                                    chat_id?: string;
                                                    order?: string;
                                                    unit_ids?: Array<string>;
                                                    member_count?: number;
                                                    status?: {
                                                        is_deleted?: boolean;
                                                    };
                                                    leaders?: Array<{
                                                        leaderType: number;
                                                        leaderID: string;
                                                    }>;
                                                    group_chat_employee_types?: Array<number>;
                                                    department_hrbps?: Array<string>;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=list&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=contact&resource=department&version=v3 document }
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        parent_department_id?: string;
                        fetch_child?: boolean;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    name: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        ja_jp?: string;
                                        en_us?: string;
                                    };
                                    parent_department_id: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    leader_user_id?: string;
                                    chat_id?: string;
                                    order?: string;
                                    unit_ids?: Array<string>;
                                    member_count?: number;
                                    status?: { is_deleted?: boolean };
                                    leaders?: Array<{
                                        leaderType: number;
                                        leaderID: string;
                                    }>;
                                    group_chat_employee_types?: Array<number>;
                                    department_hrbps?: Array<string>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            parentWithIterator: async (
                payload?: {
                    params: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        department_id: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/departments/parent`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    name: string;
                                                    i18n_name?: {
                                                        zh_cn?: string;
                                                        ja_jp?: string;
                                                        en_us?: string;
                                                    };
                                                    parent_department_id: string;
                                                    department_id?: string;
                                                    open_department_id?: string;
                                                    leader_user_id?: string;
                                                    chat_id?: string;
                                                    order?: string;
                                                    unit_ids?: Array<string>;
                                                    member_count?: number;
                                                    status?: {
                                                        is_deleted?: boolean;
                                                    };
                                                    leaders?: Array<{
                                                        leaderType: number;
                                                        leaderID: string;
                                                    }>;
                                                    group_chat_employee_types?: Array<number>;
                                                    department_hrbps?: Array<string>;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=parent&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/parent document }
             *
             * 获取父部门信息
             *
             * 该接口用来递归获取部门父部门的信息，并按照由子到父的顺序返回有权限的父部门信息列表。
             *
             * 使用`tenant_access_token`时,该接口只返回可见性范围内的父部门信息。;例如：A >>B>>C>>D四级部门，通讯录权限只到B，那么查询D部门的parent，会返回B和C两级部门。;使用user_access_token时,该接口只返回对于用户可见的父部门信息。
             */
            parent: async (
                payload?: {
                    params: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        department_id: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    name: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        ja_jp?: string;
                                        en_us?: string;
                                    };
                                    parent_department_id: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    leader_user_id?: string;
                                    chat_id?: string;
                                    order?: string;
                                    unit_ids?: Array<string>;
                                    member_count?: number;
                                    status?: { is_deleted?: boolean };
                                    leaders?: Array<{
                                        leaderType: number;
                                        leaderID: string;
                                    }>;
                                    group_chat_employee_types?: Array<number>;
                                    department_hrbps?: Array<string>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments/parent`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=patch&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/patch document }
             *
             * 修改部门部分信息
             *
             * 该接口用于更新通讯录中部门的信息。
             *
             * 调用该接口需要具有该部门以及更新操作涉及的部门的通讯录权限。
             */
            patch: async (
                payload?: {
                    data?: {
                        name?: string;
                        i18n_name?: {
                            zh_cn?: string;
                            ja_jp?: string;
                            en_us?: string;
                        };
                        parent_department_id?: string;
                        leader_user_id?: string;
                        order?: string;
                        unit_ids?: Array<string>;
                        create_group_chat?: boolean;
                        leaders?: Array<{
                            leaderType: number;
                            leaderID: string;
                        }>;
                        group_chat_employee_types?: Array<number>;
                        department_hrbps?: Array<string>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { department_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                department?: {
                                    name: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        ja_jp?: string;
                                        en_us?: string;
                                    };
                                    parent_department_id: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    leader_user_id?: string;
                                    chat_id?: string;
                                    order?: string;
                                    unit_ids?: Array<string>;
                                    member_count?: number;
                                    status?: { is_deleted?: boolean };
                                    leaders?: Array<{
                                        leaderType: number;
                                        leaderID: string;
                                    }>;
                                    group_chat_employee_types?: Array<number>;
                                    department_hrbps?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments/:department_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            searchWithIterator: async (
                payload?: {
                    data: { query: string };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/departments/search`,
                                path
                            ),
                            method: "POST",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    name: string;
                                                    i18n_name?: {
                                                        zh_cn?: string;
                                                        ja_jp?: string;
                                                        en_us?: string;
                                                    };
                                                    parent_department_id: string;
                                                    department_id?: string;
                                                    open_department_id?: string;
                                                    leader_user_id?: string;
                                                    chat_id?: string;
                                                    order?: string;
                                                    unit_ids?: Array<string>;
                                                    member_count?: number;
                                                    status?: {
                                                        is_deleted?: boolean;
                                                    };
                                                    create_group_chat?: boolean;
                                                    leaders?: Array<{
                                                        leaderType: number;
                                                        leaderID: string;
                                                    }>;
                                                    group_chat_employee_types?: Array<number>;
                                                    department_hrbps?: Array<string>;
                                                }>;
                                                page_token?: string;
                                                has_more: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=search&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/search document }
             *
             * 搜索部门
             *
             * 搜索部门，用户通过关键词查询可见的部门数据，部门可见性需要管理员在后台配置。
             *
             * 部门存在，但用户搜索不到并不一定是搜索有问题，可能是管理员在后台配置了权限控制，导致用户无法搜索到该部门。
             */
            search: async (
                payload?: {
                    data: { query: string };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    name: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        ja_jp?: string;
                                        en_us?: string;
                                    };
                                    parent_department_id: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    leader_user_id?: string;
                                    chat_id?: string;
                                    order?: string;
                                    unit_ids?: Array<string>;
                                    member_count?: number;
                                    status?: { is_deleted?: boolean };
                                    create_group_chat?: boolean;
                                    leaders?: Array<{
                                        leaderType: number;
                                        leaderID: string;
                                    }>;
                                    group_chat_employee_types?: Array<number>;
                                    department_hrbps?: Array<string>;
                                }>;
                                page_token?: string;
                                has_more: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments/search`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=unbind_department_chat&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/unbind_department_chat document }
             *
             * 部门群转为普通群
             *
             * 通过该接口将部门群转为普通群。
             */
            unbindDepartmentChat: async (
                payload?: {
                    data: { department_id: string };
                    params?: {
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments/unbind_department_chat`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=update&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/update document }
             *
             * 更新部门所有信息
             *
             * 该接口用于更新当前部门所有信息。
             *
             * - 调用该接口需要具有该部门与更新部门信息涉及的通讯录权限。;; - 没有填写的字段会被置为空值（order字段除外）。
             */
            update: async (
                payload?: {
                    data: {
                        name: string;
                        i18n_name?: {
                            zh_cn?: string;
                            ja_jp?: string;
                            en_us?: string;
                        };
                        parent_department_id: string;
                        leader_user_id?: string;
                        order?: string;
                        unit_ids?: Array<string>;
                        create_group_chat?: boolean;
                        leaders?: Array<{
                            leaderType: number;
                            leaderID: string;
                        }>;
                        group_chat_employee_types?: Array<number>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { department_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                department?: {
                                    name: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        ja_jp?: string;
                                        en_us?: string;
                                    };
                                    parent_department_id: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    leader_user_id?: string;
                                    chat_id?: string;
                                    order?: string;
                                    unit_ids?: Array<string>;
                                    member_count?: number;
                                    status?: { is_deleted?: boolean };
                                    leaders?: Array<{
                                        leaderType: number;
                                        leaderID: string;
                                    }>;
                                    group_chat_employee_types?: Array<number>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments/:department_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 人员类型
         */
        employeeTypeEnum: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=employee_type_enum&apiName=create&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/create document }
             *
             * 新增人员类型
             *
             * 新增自定义人员类型
             */
            create: async (
                payload?: {
                    data: {
                        content: string;
                        enum_type: number;
                        enum_status: number;
                        i18n_content?: Array<{
                            locale?: string;
                            value?: string;
                        }>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employee_type_enum?: {
                                    enum_id?: string;
                                    enum_value?: string;
                                    content: string;
                                    enum_type: number;
                                    enum_status: number;
                                    i18n_content?: Array<{
                                        locale?: string;
                                        value?: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/employee_type_enums`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=employee_type_enum&apiName=delete&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/delete document }
             *
             * 删除人员类型
             *
             * 删除自定义人员类型
             */
            delete: async (
                payload?: {
                    path?: { enum_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/employee_type_enums/:enum_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/employee_type_enums`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    enum_id?: string;
                                                    enum_value?: string;
                                                    content: string;
                                                    enum_type: number;
                                                    enum_status: number;
                                                    i18n_content?: Array<{
                                                        locale?: string;
                                                        value?: string;
                                                    }>;
                                                }>;
                                                has_more?: boolean;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=employee_type_enum&apiName=list&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list document }
             *
             * 查询人员类型
             *
             * 该接口用于获取员工的人员类型
             */
            list: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    enum_id?: string;
                                    enum_value?: string;
                                    content: string;
                                    enum_type: number;
                                    enum_status: number;
                                    i18n_content?: Array<{
                                        locale?: string;
                                        value?: string;
                                    }>;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/employee_type_enums`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=employee_type_enum&apiName=update&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/update document }
             *
             * 更新人员类型
             *
             * 更新自定义人员类型
             */
            update: async (
                payload?: {
                    data: {
                        content: string;
                        enum_type: number;
                        enum_status: number;
                        i18n_content?: Array<{
                            locale?: string;
                            value?: string;
                        }>;
                    };
                    path?: { enum_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employee_type_enum?: {
                                    enum_id?: string;
                                    enum_value?: string;
                                    content: string;
                                    enum_type: number;
                                    enum_status: number;
                                    i18n_content?: Array<{
                                        locale?: string;
                                        value?: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/employee_type_enums/:enum_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 用户组
         */
        group: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=create&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/create document }
             *
             * 创建用户组
             *
             * 使用该接口创建用户组，请注意创建用户组时应用的通讯录权限范围需为“全部员工”，否则会创建失败，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
             */
            create: async (
                payload?: {
                    data: {
                        group_id?: string;
                        name: string;
                        description?: string;
                        type?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { group_id: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=delete&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/delete document }
             *
             * 删除用户组
             *
             * 通过该接口可删除企业中的用户组，请注意删除用户组时应用的通讯录权限范围需为“全部员工”，否则会删除失败，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
             */
            delete: async (
                payload?: {
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/:group_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=get&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/get document }
             *
             * 查询用户组
             *
             * 根据用户组 ID 查询某个用户组的基本信息，支持查询普通用户组和动态用户组。请确保应用的通讯录权限范围里包括该用户组或者是“全部员工”，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
             */
            get: async (
                payload?: {
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                group: {
                                    id: string;
                                    name: string;
                                    description?: string;
                                    member_user_count?: number;
                                    member_department_count?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/:group_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=member_belong&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/member_belong document }
             *
             * 查询用户所属用户组
             *
             * 通过该接口可查询该用户所属的用户组列表，可分别查询普通用户组和动态用户组。如果应用的通讯录权限范围是“全部员工”，则可获取该员工所属的全部用户组列表。如果应用的通讯录权限范围不是“全部员工”，则仅可获取通讯录权限范围内该员工所属的用户组。[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
             */
            memberBelong: async (
                payload?: {
                    params: {
                        member_id: string;
                        member_id_type?: "open_id" | "union_id" | "user_id";
                        group_type?: number;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                group_list?: Array<string>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/member_belong`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=patch&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/patch document }
             *
             * 更新用户组
             *
             * 使用该接口更新用户组信息，请注意更新用户组时应用的通讯录权限范围需为“全部员工”，否则会更新失败。[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
             */
            patch: async (
                payload?: {
                    data?: { name?: string; description?: string };
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/:group_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            simplelistWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        type?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/group/simplelist`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                grouplist: Array<{
                                                    id: string;
                                                    name: string;
                                                    description?: string;
                                                    member_user_count?: number;
                                                    member_department_count?: number;
                                                }>;
                                                page_token: string;
                                                has_more: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=simplelist&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist document }
             *
             * 查询用户组列表
             *
             * 通过该接口可查询企业的用户组列表，可分别查询普通用户组或动态用户组。如果应用的通讯录权限范围是“全部员工”，则可获取企业全部用户组列表。如果应用的通讯录权限范围不是“全部员工”，则仅可获取通讯录权限范围内的用户组。[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
             */
            simplelist: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        type?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                grouplist: Array<{
                                    id: string;
                                    name: string;
                                    description?: string;
                                    member_user_count?: number;
                                    member_department_count?: number;
                                }>;
                                page_token: string;
                                has_more: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/simplelist`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 用户组成员
         */
        groupMember: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group.member&apiName=add&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/add document }
             *
             * 添加用户组成员
             *
             * 向用户组中添加成员(目前成员仅支持用户，未来会支持部门)，如果应用的通讯录权限范围是“全部员工”，则可将任何成员添加到任何用户组。如果应用的通讯录权限范围不是“全部员工”，则仅可将通讯录权限范围中的成员添加到通讯录权限范围的用户组中，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
             */
            add: async (
                payload?: {
                    data: {
                        member_type: "user";
                        member_id_type: "open_id" | "union_id" | "user_id";
                        member_id: string;
                    };
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/:group_id/member/add`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group.member&apiName=batch_add&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/batch_add document }
             *
             * 批量添加用户组成员
             *
             * 向普通用户组中批量添加成员(目前仅支持添加用户，暂不支持添加部门），如果应用的通讯录权限范围是“全部员工”，则可将任何成员添加到任何用户组。如果应用的通讯录权限范围不是“全部员工”，则仅可将通讯录权限范围中的成员添加到通讯录权限范围的用户组中，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
             *
             * 请求体中的member_type，目前仅支持user， 未来将支持department。
             */
            batchAdd: async (
                payload?: {
                    data?: {
                        members?: Array<{
                            member_id: string;
                            member_type: string;
                            member_id_type?: string;
                        }>;
                    };
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                results?: Array<{
                                    member_id: string;
                                    code: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/:group_id/member/batch_add`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group.member&apiName=batch_remove&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/batch_remove document }
             *
             * 批量移除用户组成员
             *
             * 从普通用户组中批量移除成员 (目前仅支持移除用户，暂不支持移除部门）。如果应用的通讯录权限范围是“全部员工”，则可将任何成员移出任何用户组。如果应用的通讯录权限范围不是“全部员工”，则仅可将通讯录权限范围中的成员从通讯录权限范围的用户组中移除， [点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
             *
             * 请求体中的member_type，目前仅支持user， 未来将支持department。
             */
            batchRemove: async (
                payload?: {
                    data: {
                        members: Array<{
                            member_id: string;
                            member_type: string;
                            member_id_type?: string;
                        }>;
                    };
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/:group_id/member/batch_remove`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group.member&apiName=remove&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/remove document }
             *
             * 移除用户组成员
             *
             * 从用户组中移除成员 (目前成员仅支持用户，未来会支持部门)，如果应用的通讯录权限范围是“全部员工”，则可将任何成员移出任何用户组。如果应用的通讯录权限范围不是“全部员工”，则仅可将通讯录权限范围中的成员从通讯录权限范围的用户组中移除， [点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
             */
            remove: async (
                payload?: {
                    data: {
                        member_type: "user";
                        member_id: string;
                        member_id_type: "open_id" | "union_id" | "user_id";
                    };
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/:group_id/member/remove`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group.member&apiName=simplelist&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/simplelist document }
             *
             * 查询用户组成员列表
             *
             * 通过该接口可查询某个用户组的成员列表（支持查询成员中的用户和部门）, 本接口支持普通用户组和动态用户组。如果应用的通讯录权限范围是“全部员工”，则可查询企业内任何用户组的成员列表。如果应用的通讯录权限范围不是“全部员工”，则仅可查询通讯录权限范围中的用户组的成员列表，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
             */
            simplelist: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        member_id_type?:
                            | "open_id"
                            | "union_id"
                            | "user_id"
                            | "department_id";
                        member_type?: "user" | "department";
                    };
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                memberlist: Array<{
                                    member_id: string;
                                    member_type: string;
                                    member_id_type?: string;
                                }>;
                                page_token: string;
                                has_more: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/:group_id/member/simplelist`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 通讯录权限范围
         */
        scope: {
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/scopes`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                department_ids?: Array<string>;
                                                user_ids?: Array<string>;
                                                group_ids?: Array<string>;
                                                has_more?: boolean;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=scope&apiName=list&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/scope/list document }
             *
             * 获取通讯录授权范围
             *
             * 该接口用于获取应用被授权可访问的通讯录范围，包括可访问的部门列表、用户列表和用户组列表。;授权范围为全员时，返回的部门列表为该企业所有的一级部门；否则返回的部门为管理员在设置授权范围时勾选的部门（不包含勾选部门的子部门）。
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                department_ids?: Array<string>;
                                user_ids?: Array<string>;
                                group_ids?: Array<string>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/scopes`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 单位
         */
        unit: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=bind_department&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/bind_department document }
             *
             * 建立部门与单位的绑定关系
             *
             * 通过该接口建立部门与单位的绑定关系。由于单位是旗舰版付费功能，企业需开通相关版本，否则会绑定失败，不同版本请参考[飞书版本对比](https://www.feishu.cn/service)
             */
            bindDepartment: async (
                payload?: {
                    data: {
                        unit_id: string;
                        department_id: string;
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/unit/bind_department`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=create&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/create document }
             *
             * 创建单位
             *
             * 该接口用于创建单位。注意：单位功能属于旗舰版付费功能，企业需开通对应版本才可以创建单位，不同版本请参考[飞书版本对比](https://www.feishu.cn/service)。
             */
            create: async (
                payload?: {
                    data: { unit_id?: string; name: string; unit_type: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { unit_id: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/unit`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=delete&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/delete document }
             *
             * 删除单位
             *
             * 使用该接口删除单位，需要有更新单位的权限。注意：如果单位的单位类型被其它的业务使用，不允许删除。
             */
            delete: async (
                payload?: {
                    path: { unit_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/unit/:unit_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=get&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/get document }
             *
             * 获取单位信息
             *
             * 该接口用于获取单位信息
             */
            get: async (
                payload?: {
                    path: { unit_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                unit: {
                                    unit_id: string;
                                    name: string;
                                    unit_type: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/unit/:unit_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=list&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/list document }
             *
             * 批量获取单位列表
             *
             * 通过该接口获取企业的单位列表，需获取单位的权限
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                unitlist: Array<{
                                    unit_id: string;
                                    name: string;
                                    unit_type: string;
                                }>;
                                has_more: boolean;
                                page_token: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/unit`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=list_department&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/list_department document }
             *
             * 获取单位绑定的部门列表
             *
             * 通过该接口获取单位绑定的部门列表，需具有获取单位的权限
             */
            listDepartment: async (
                payload?: {
                    params: {
                        unit_id: string;
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                departmentlist: Array<{
                                    unit_id: string;
                                    department_id: string;
                                }>;
                                has_more: boolean;
                                page_token: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/unit/list_department`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=patch&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/patch document }
             *
             * 修改单位信息
             *
             * 调用该接口，需要有更新单位的权限。注意：单位功能属于旗舰版付费功能，企业需开通对应版本才可以修改单位
             */
            patch: async (
                payload?: {
                    data?: { name?: string };
                    path: { unit_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/unit/:unit_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=unbind_department&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/unbind_department document }
             *
             * 解除部门与单位的绑定关系
             *
             * 通过该接口解除部门与单位的绑定关系，需更新单位的权限，需对应部门的通讯录权限。由于单位是旗舰版付费功能，企业需开通相关功能，否则会解绑失败
             */
            unbindDepartment: async (
                payload?: {
                    data: {
                        unit_id: string;
                        department_id: string;
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/unit/unbind_department`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 用户
         */
        user: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=batch_get_id&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id document }
             *
             * 通过手机号或邮箱获取用户 ID
             *
             * 通过该接口，可使用手机号/邮箱获取用户的 ID 信息，具体获取支持的 ID 类型包括 open_id、user_id、union_id，可通过查询参数指定。
             *
             * 如果查询的手机号、邮箱不存在，或者无权限查看对应的用户，则返回的用户ID列表为空。
             */
            batchGetId: async (
                payload?: {
                    data?: { emails?: Array<string>; mobiles?: Array<string> };
                    params?: {
                        user_id_type?: "open_id" | "union_id" | "user_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_list?: Array<{
                                    user_id?: string;
                                    mobile?: string;
                                    email?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/users/batch_get_id`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=create&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/create document }
             *
             * 创建用户
             *
             * 使用该接口向通讯录创建一个用户，可以理解为员工入职。创建用户后只返回有数据权限的数据。具体的数据权限的与字段的对应关系请参照[应用权限](https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN)。
             *
             * - 新增用户的所有部门必须都在当前应用的通讯录授权范围内才允许新增用户，如果想要在根部门下新增用户，必须要有全员权限。;- 应用商店应用无权限调用此接口。;- 创建用户后，会给用户发送邀请短信/邮件，用户在操作同意后才可访问团队。;- 返回数据中不返回手机号，如果需要请重新查询用户信息获取手机号。
             */
            create: async (
                payload?: {
                    data: {
                        user_id?: string;
                        name: string;
                        en_name?: string;
                        nickname?: string;
                        email?: string;
                        mobile: string;
                        mobile_visible?: boolean;
                        gender?: number;
                        avatar_key?: string;
                        department_ids: Array<string>;
                        leader_user_id?: string;
                        city?: string;
                        country?: string;
                        work_station?: string;
                        join_time?: number;
                        employee_no?: string;
                        employee_type: number;
                        positions?: Array<{
                            position_code?: string;
                            position_name?: string;
                            department_id?: string;
                            leader_user_id?: string;
                            leader_position_code?: string;
                            is_major?: boolean;
                        }>;
                        orders?: Array<{
                            department_id?: string;
                            user_order?: number;
                            department_order?: number;
                        }>;
                        custom_attrs?: Array<{
                            type?: string;
                            id?: string;
                            value?: {
                                text?: string;
                                url?: string;
                                pc_url?: string;
                                option_id?: string;
                                generic_user?: { id: string; type: number };
                            };
                        }>;
                        enterprise_email?: string;
                        idp_type?: string;
                        description?: string;
                        job_title?: string;
                        need_send_notification?: boolean;
                        notification_option?: {
                            channels?: Array<string>;
                            language?: "zh-CN" | "en-US" | "ja-JP";
                        };
                        geo?: string;
                        job_level_id?: string;
                        job_family_id?: string;
                        subscription_ids?: Array<string>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        client_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user?: {
                                    union_id?: string;
                                    user_id?: string;
                                    open_id?: string;
                                    name: string;
                                    en_name?: string;
                                    nickname?: string;
                                    email?: string;
                                    mobile: string;
                                    mobile_visible?: boolean;
                                    gender?: number;
                                    avatar_key?: string;
                                    avatar?: {
                                        avatar_72?: string;
                                        avatar_240?: string;
                                        avatar_640?: string;
                                        avatar_origin?: string;
                                    };
                                    status?: {
                                        is_frozen?: boolean;
                                        is_resigned?: boolean;
                                        is_activated?: boolean;
                                        is_exited?: boolean;
                                        is_unjoin?: boolean;
                                    };
                                    department_ids?: Array<string>;
                                    leader_user_id?: string;
                                    city?: string;
                                    country?: string;
                                    work_station?: string;
                                    join_time?: number;
                                    is_tenant_manager?: boolean;
                                    employee_no?: string;
                                    employee_type?: number;
                                    positions?: Array<{
                                        position_code?: string;
                                        position_name?: string;
                                        department_id?: string;
                                        leader_user_id?: string;
                                        leader_position_code?: string;
                                        is_major?: boolean;
                                    }>;
                                    orders?: Array<{
                                        department_id?: string;
                                        user_order?: number;
                                        department_order?: number;
                                    }>;
                                    custom_attrs?: Array<{
                                        type?: string;
                                        id?: string;
                                        value?: {
                                            text?: string;
                                            url?: string;
                                            pc_url?: string;
                                            option_id?: string;
                                            option_value?: string;
                                            name?: string;
                                            picture_url?: string;
                                            generic_user?: {
                                                id: string;
                                                type: number;
                                            };
                                        };
                                    }>;
                                    enterprise_email?: string;
                                    idp_type?: string;
                                    time_zone?: string;
                                    description?: string;
                                    job_title?: string;
                                    need_send_notification?: boolean;
                                    notification_option?: {
                                        channels?: Array<string>;
                                        language?: "zh-CN" | "en-US" | "ja-JP";
                                    };
                                    is_frozen?: boolean;
                                    geo?: string;
                                    job_level_id?: string;
                                    job_family_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/users`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=delete&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/delete document }
             *
             * 删除用户
             *
             * 该接口用于从通讯录删除一个用户信息，可以理解为员工离职。
             *
             * - 若用户归属部门A、部门B，应用的通讯录权限范围必须包括部门A和部门B才可以删除用户。;- 用户可以在删除员工时设置删除员工数据（如文档）的接收者，如果不设置则由其leader接收，如果该员工没有leader，则会将该员工的数据删除。
             */
            delete: async (
                payload?: {
                    data?: {
                        department_chat_acceptor_user_id?: string;
                        external_chat_acceptor_user_id?: string;
                        docs_acceptor_user_id?: string;
                        calendar_acceptor_user_id?: string;
                        application_acceptor_user_id?: string;
                        minutes_acceptor_user_id?: string;
                        survey_acceptor_user_id?: string;
                        email_acceptor?: {
                            processing_type: "1" | "2" | "3";
                            acceptor_user_id?: string;
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { user_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/users/:user_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            findByDepartmentWithIterator: async (
                payload?: {
                    params: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        department_id: string;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/users/find_by_department`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    union_id?: string;
                                                    user_id?: string;
                                                    open_id?: string;
                                                    name: string;
                                                    en_name?: string;
                                                    nickname?: string;
                                                    email?: string;
                                                    mobile: string;
                                                    mobile_visible?: boolean;
                                                    gender?: number;
                                                    avatar_key?: string;
                                                    avatar?: {
                                                        avatar_72?: string;
                                                        avatar_240?: string;
                                                        avatar_640?: string;
                                                        avatar_origin?: string;
                                                    };
                                                    status?: {
                                                        is_frozen?: boolean;
                                                        is_resigned?: boolean;
                                                        is_activated?: boolean;
                                                        is_exited?: boolean;
                                                        is_unjoin?: boolean;
                                                    };
                                                    department_ids?: Array<string>;
                                                    leader_user_id?: string;
                                                    city?: string;
                                                    country?: string;
                                                    work_station?: string;
                                                    join_time?: number;
                                                    is_tenant_manager?: boolean;
                                                    employee_no?: string;
                                                    employee_type?: number;
                                                    positions?: Array<{
                                                        position_code?: string;
                                                        position_name?: string;
                                                        department_id?: string;
                                                        leader_user_id?: string;
                                                        leader_position_code?: string;
                                                        is_major?: boolean;
                                                    }>;
                                                    orders?: Array<{
                                                        department_id?: string;
                                                        user_order?: number;
                                                        department_order?: number;
                                                    }>;
                                                    custom_attrs?: Array<{
                                                        type?: string;
                                                        id?: string;
                                                        value?: {
                                                            text?: string;
                                                            url?: string;
                                                            pc_url?: string;
                                                            option_id?: string;
                                                            option_value?: string;
                                                            name?: string;
                                                            picture_url?: string;
                                                            generic_user?: {
                                                                id: string;
                                                                type: number;
                                                            };
                                                        };
                                                    }>;
                                                    enterprise_email?: string;
                                                    idp_type?: string;
                                                    time_zone?: string;
                                                    description?: string;
                                                    job_title?: string;
                                                    need_send_notification?: boolean;
                                                    notification_option?: {
                                                        channels?: Array<string>;
                                                        language?:
                                                            | "zh-CN"
                                                            | "en-US"
                                                            | "ja-JP";
                                                    };
                                                    is_frozen?: boolean;
                                                    geo?: string;
                                                    job_level_id?: string;
                                                    job_family_id?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=find_by_department&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/find_by_department document }
             *
             * 获取部门直属用户列表
             *
             * 基于部门ID获取部门直属用户列表。
             *
             * - 部门ID 必填，根部门的部门ID为0。;- 使用 `user_access_token` 情况下根据个人组织架构的通讯录可见范围进行权限过滤，返回个人组织架构通讯录范围（[登录企业管理后台进行权限配置](https://www.feishu.cn/admin/security/permission/visibility)）内可见的用户数据。;- 使用`tenant_access_token`会根据应用通讯录的范围进行权限过滤。 如果请求的部门ID为0，则校验应用是否具有全员通讯录权限； 如果是非0的部门ID，则会验证应用是否具有该部门的通讯录权限。 无权限返回无权限错误码，有权限则返回对应部门下的直接用户列表。
             */
            findByDepartment: async (
                payload?: {
                    params: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        department_id: string;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    union_id?: string;
                                    user_id?: string;
                                    open_id?: string;
                                    name: string;
                                    en_name?: string;
                                    nickname?: string;
                                    email?: string;
                                    mobile: string;
                                    mobile_visible?: boolean;
                                    gender?: number;
                                    avatar_key?: string;
                                    avatar?: {
                                        avatar_72?: string;
                                        avatar_240?: string;
                                        avatar_640?: string;
                                        avatar_origin?: string;
                                    };
                                    status?: {
                                        is_frozen?: boolean;
                                        is_resigned?: boolean;
                                        is_activated?: boolean;
                                        is_exited?: boolean;
                                        is_unjoin?: boolean;
                                    };
                                    department_ids?: Array<string>;
                                    leader_user_id?: string;
                                    city?: string;
                                    country?: string;
                                    work_station?: string;
                                    join_time?: number;
                                    is_tenant_manager?: boolean;
                                    employee_no?: string;
                                    employee_type?: number;
                                    positions?: Array<{
                                        position_code?: string;
                                        position_name?: string;
                                        department_id?: string;
                                        leader_user_id?: string;
                                        leader_position_code?: string;
                                        is_major?: boolean;
                                    }>;
                                    orders?: Array<{
                                        department_id?: string;
                                        user_order?: number;
                                        department_order?: number;
                                    }>;
                                    custom_attrs?: Array<{
                                        type?: string;
                                        id?: string;
                                        value?: {
                                            text?: string;
                                            url?: string;
                                            pc_url?: string;
                                            option_id?: string;
                                            option_value?: string;
                                            name?: string;
                                            picture_url?: string;
                                            generic_user?: {
                                                id: string;
                                                type: number;
                                            };
                                        };
                                    }>;
                                    enterprise_email?: string;
                                    idp_type?: string;
                                    time_zone?: string;
                                    description?: string;
                                    job_title?: string;
                                    need_send_notification?: boolean;
                                    notification_option?: {
                                        channels?: Array<string>;
                                        language?: "zh-CN" | "en-US" | "ja-JP";
                                    };
                                    is_frozen?: boolean;
                                    geo?: string;
                                    job_level_id?: string;
                                    job_family_id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/users/find_by_department`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=get&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/get document }
             *
             * 获取单个用户信息
             *
             * 该接口用于获取通讯录中单个用户的信息。
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path: { user_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user?: {
                                    union_id?: string;
                                    user_id?: string;
                                    open_id?: string;
                                    name?: string;
                                    en_name?: string;
                                    nickname?: string;
                                    email?: string;
                                    mobile?: string;
                                    mobile_visible?: boolean;
                                    gender?: number;
                                    avatar?: {
                                        avatar_72?: string;
                                        avatar_240?: string;
                                        avatar_640?: string;
                                        avatar_origin?: string;
                                    };
                                    status?: {
                                        is_frozen?: boolean;
                                        is_resigned?: boolean;
                                        is_activated?: boolean;
                                        is_exited?: boolean;
                                        is_unjoin?: boolean;
                                    };
                                    department_ids?: Array<string>;
                                    leader_user_id?: string;
                                    city?: string;
                                    country?: string;
                                    work_station?: string;
                                    join_time?: number;
                                    is_tenant_manager?: boolean;
                                    employee_no?: string;
                                    employee_type?: number;
                                    positions?: Array<{
                                        position_code?: string;
                                        position_name?: string;
                                        department_id?: string;
                                        leader_user_id?: string;
                                        leader_position_code?: string;
                                        is_major?: boolean;
                                    }>;
                                    orders?: Array<{
                                        department_id?: string;
                                        user_order?: number;
                                        department_order?: number;
                                    }>;
                                    custom_attrs?: Array<{
                                        type?: string;
                                        id?: string;
                                        value?: {
                                            text?: string;
                                            url?: string;
                                            pc_url?: string;
                                            option_value?: string;
                                            name?: string;
                                            picture_url?: string;
                                            generic_user?: {
                                                id: string;
                                                type: number;
                                            };
                                        };
                                    }>;
                                    enterprise_email?: string;
                                    time_zone?: string;
                                    description?: string;
                                    job_title?: string;
                                    geo?: string;
                                    job_level_id?: string;
                                    job_family_id?: string;
                                    assign_info?: Array<{
                                        subscription_id?: string;
                                        license_plan_key?: string;
                                        product_name?: string;
                                        i18n_name?: {
                                            zh_cn?: string;
                                            ja_jp?: string;
                                            en_us?: string;
                                        };
                                        start_time?: string;
                                        end_time?: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/users/:user_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        department_id?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/users`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    union_id?: string;
                                                    user_id?: string;
                                                    open_id?: string;
                                                    name: string;
                                                    en_name?: string;
                                                    nickname?: string;
                                                    email?: string;
                                                    mobile: string;
                                                    mobile_visible?: boolean;
                                                    gender?: number;
                                                    avatar?: {
                                                        avatar_72?: string;
                                                        avatar_240?: string;
                                                        avatar_640?: string;
                                                        avatar_origin?: string;
                                                    };
                                                    status?: {
                                                        is_frozen?: boolean;
                                                        is_resigned?: boolean;
                                                        is_activated?: boolean;
                                                        is_exited?: boolean;
                                                        is_unjoin?: boolean;
                                                    };
                                                    department_ids?: Array<string>;
                                                    leader_user_id?: string;
                                                    city?: string;
                                                    country?: string;
                                                    work_station?: string;
                                                    join_time?: number;
                                                    is_tenant_manager?: boolean;
                                                    employee_no?: string;
                                                    employee_type?: number;
                                                    positions?: Array<{
                                                        position_code?: string;
                                                        position_name?: string;
                                                        department_id?: string;
                                                        leader_user_id?: string;
                                                        leader_position_code?: string;
                                                        is_major?: boolean;
                                                    }>;
                                                    orders?: Array<{
                                                        department_id?: string;
                                                        user_order?: number;
                                                        department_order?: number;
                                                    }>;
                                                    custom_attrs?: Array<{
                                                        type?: string;
                                                        id?: string;
                                                        value?: {
                                                            text?: string;
                                                            url?: string;
                                                            pc_url?: string;
                                                            option_value?: string;
                                                            name?: string;
                                                            picture_url?: string;
                                                            generic_user?: {
                                                                id: string;
                                                                type: number;
                                                            };
                                                        };
                                                    }>;
                                                    enterprise_email?: string;
                                                    time_zone?: string;
                                                    description?: string;
                                                    job_title?: string;
                                                    geo?: string;
                                                    job_level_id?: string;
                                                    job_family_id?: string;
                                                    assign_info?: Array<{
                                                        subscription_id?: string;
                                                        license_plan_key?: string;
                                                        product_name?: string;
                                                        i18n_name?: {
                                                            zh_cn?: string;
                                                            ja_jp?: string;
                                                            en_us?: string;
                                                        };
                                                        start_time?: string;
                                                        end_time?: string;
                                                    }>;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=list&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=contact&resource=user&version=v3 document }
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        department_id?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    union_id?: string;
                                    user_id?: string;
                                    open_id?: string;
                                    name: string;
                                    en_name?: string;
                                    nickname?: string;
                                    email?: string;
                                    mobile: string;
                                    mobile_visible?: boolean;
                                    gender?: number;
                                    avatar?: {
                                        avatar_72?: string;
                                        avatar_240?: string;
                                        avatar_640?: string;
                                        avatar_origin?: string;
                                    };
                                    status?: {
                                        is_frozen?: boolean;
                                        is_resigned?: boolean;
                                        is_activated?: boolean;
                                        is_exited?: boolean;
                                        is_unjoin?: boolean;
                                    };
                                    department_ids?: Array<string>;
                                    leader_user_id?: string;
                                    city?: string;
                                    country?: string;
                                    work_station?: string;
                                    join_time?: number;
                                    is_tenant_manager?: boolean;
                                    employee_no?: string;
                                    employee_type?: number;
                                    positions?: Array<{
                                        position_code?: string;
                                        position_name?: string;
                                        department_id?: string;
                                        leader_user_id?: string;
                                        leader_position_code?: string;
                                        is_major?: boolean;
                                    }>;
                                    orders?: Array<{
                                        department_id?: string;
                                        user_order?: number;
                                        department_order?: number;
                                    }>;
                                    custom_attrs?: Array<{
                                        type?: string;
                                        id?: string;
                                        value?: {
                                            text?: string;
                                            url?: string;
                                            pc_url?: string;
                                            option_value?: string;
                                            name?: string;
                                            picture_url?: string;
                                            generic_user?: {
                                                id: string;
                                                type: number;
                                            };
                                        };
                                    }>;
                                    enterprise_email?: string;
                                    time_zone?: string;
                                    description?: string;
                                    job_title?: string;
                                    geo?: string;
                                    job_level_id?: string;
                                    job_family_id?: string;
                                    assign_info?: Array<{
                                        subscription_id?: string;
                                        license_plan_key?: string;
                                        product_name?: string;
                                        i18n_name?: {
                                            zh_cn?: string;
                                            ja_jp?: string;
                                            en_us?: string;
                                        };
                                        start_time?: string;
                                        end_time?: string;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/users`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=patch&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/patch document }
             *
             * 修改用户部分信息
             *
             * 该接口用于更新通讯录中用户的字段，未传递的参数不会更新。
             */
            patch: async (
                payload?: {
                    data?: {
                        name?: string;
                        en_name?: string;
                        nickname?: string;
                        email?: string;
                        mobile?: string;
                        mobile_visible?: boolean;
                        gender?: number;
                        avatar_key?: string;
                        department_ids?: Array<string>;
                        leader_user_id?: string;
                        city?: string;
                        country?: string;
                        work_station?: string;
                        join_time?: number;
                        employee_no?: string;
                        employee_type?: number;
                        positions?: Array<{
                            position_code?: string;
                            position_name?: string;
                            department_id?: string;
                            leader_user_id?: string;
                            leader_position_code?: string;
                            is_major?: boolean;
                        }>;
                        orders?: Array<{
                            department_id?: string;
                            user_order?: number;
                            department_order?: number;
                        }>;
                        custom_attrs?: Array<{
                            type?: string;
                            id?: string;
                            value?: {
                                text?: string;
                                url?: string;
                                pc_url?: string;
                                option_id?: string;
                                generic_user?: { id: string; type: number };
                            };
                        }>;
                        enterprise_email?: string;
                        idp_type?: string;
                        description?: string;
                        job_title?: string;
                        is_frozen?: boolean;
                        geo?: string;
                        job_level_id?: string;
                        job_family_id?: string;
                        subscription_ids?: Array<string>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path: { user_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user?: {
                                    union_id?: string;
                                    user_id?: string;
                                    open_id?: string;
                                    name: string;
                                    en_name?: string;
                                    nickname?: string;
                                    email?: string;
                                    mobile: string;
                                    mobile_visible?: boolean;
                                    gender?: number;
                                    avatar_key?: string;
                                    avatar?: {
                                        avatar_72?: string;
                                        avatar_240?: string;
                                        avatar_640?: string;
                                        avatar_origin?: string;
                                    };
                                    status?: {
                                        is_frozen?: boolean;
                                        is_resigned?: boolean;
                                        is_activated?: boolean;
                                        is_exited?: boolean;
                                        is_unjoin?: boolean;
                                    };
                                    department_ids?: Array<string>;
                                    leader_user_id?: string;
                                    city?: string;
                                    country?: string;
                                    work_station?: string;
                                    join_time?: number;
                                    is_tenant_manager?: boolean;
                                    employee_no?: string;
                                    employee_type?: number;
                                    positions?: Array<{
                                        position_code?: string;
                                        position_name?: string;
                                        department_id?: string;
                                        leader_user_id?: string;
                                        leader_position_code?: string;
                                        is_major?: boolean;
                                    }>;
                                    orders?: Array<{
                                        department_id?: string;
                                        user_order?: number;
                                        department_order?: number;
                                    }>;
                                    custom_attrs?: Array<{
                                        type?: string;
                                        id?: string;
                                        value?: {
                                            text?: string;
                                            url?: string;
                                            pc_url?: string;
                                            option_id?: string;
                                            option_value?: string;
                                            name?: string;
                                            picture_url?: string;
                                            generic_user?: {
                                                id: string;
                                                type: number;
                                            };
                                        };
                                    }>;
                                    enterprise_email?: string;
                                    idp_type?: string;
                                    time_zone?: string;
                                    description?: string;
                                    job_title?: string;
                                    need_send_notification?: boolean;
                                    notification_option?: {
                                        channels?: Array<string>;
                                        language?: "zh-CN" | "en-US" | "ja-JP";
                                    };
                                    is_frozen?: boolean;
                                    geo?: string;
                                    job_level_id?: string;
                                    job_family_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/users/:user_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=update&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/update document }
             *
             * 更新用户所有信息
             *
             * 该接口用于更新通讯录中用户的字段。
             *
             * 应用需要拥有待更新用户的通讯录授权，如果涉及到用户部门变更，还需要同时拥有变更前、后所有新部门的通讯录授权。
             */
            update: async (
                payload?: {
                    data: {
                        name: string;
                        en_name?: string;
                        nickname?: string;
                        email?: string;
                        mobile: string;
                        mobile_visible?: boolean;
                        gender?: number;
                        avatar_key?: string;
                        department_ids: Array<string>;
                        leader_user_id?: string;
                        city?: string;
                        country?: string;
                        work_station?: string;
                        join_time?: number;
                        employee_no?: string;
                        employee_type: number;
                        positions?: Array<{
                            position_code?: string;
                            position_name?: string;
                            department_id?: string;
                            leader_user_id?: string;
                            leader_position_code?: string;
                            is_major?: boolean;
                        }>;
                        orders?: Array<{
                            department_id?: string;
                            user_order?: number;
                            department_order?: number;
                        }>;
                        custom_attrs?: Array<{
                            type?: string;
                            id?: string;
                            value?: {
                                text?: string;
                                url?: string;
                                pc_url?: string;
                                option_id?: string;
                                generic_user?: { id: string; type: number };
                            };
                        }>;
                        enterprise_email?: string;
                        idp_type?: string;
                        description?: string;
                        job_title?: string;
                        is_frozen?: boolean;
                        geo?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path: { user_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user?: {
                                    union_id?: string;
                                    user_id?: string;
                                    open_id?: string;
                                    name: string;
                                    en_name?: string;
                                    nickname?: string;
                                    email?: string;
                                    mobile: string;
                                    mobile_visible?: boolean;
                                    gender?: number;
                                    avatar_key?: string;
                                    avatar?: {
                                        avatar_72?: string;
                                        avatar_240?: string;
                                        avatar_640?: string;
                                        avatar_origin?: string;
                                    };
                                    status?: {
                                        is_frozen?: boolean;
                                        is_resigned?: boolean;
                                        is_activated?: boolean;
                                        is_exited?: boolean;
                                        is_unjoin?: boolean;
                                    };
                                    department_ids?: Array<string>;
                                    leader_user_id?: string;
                                    city?: string;
                                    country?: string;
                                    work_station?: string;
                                    join_time?: number;
                                    is_tenant_manager?: boolean;
                                    employee_no?: string;
                                    employee_type?: number;
                                    positions?: Array<{
                                        position_code?: string;
                                        position_name?: string;
                                        department_id?: string;
                                        leader_user_id?: string;
                                        leader_position_code?: string;
                                        is_major?: boolean;
                                    }>;
                                    orders?: Array<{
                                        department_id?: string;
                                        user_order?: number;
                                        department_order?: number;
                                    }>;
                                    custom_attrs?: Array<{
                                        type?: string;
                                        id?: string;
                                        value?: {
                                            text?: string;
                                            url?: string;
                                            pc_url?: string;
                                            option_id?: string;
                                            option_value?: string;
                                            name?: string;
                                            picture_url?: string;
                                            generic_user?: {
                                                id: string;
                                                type: number;
                                            };
                                        };
                                    }>;
                                    enterprise_email?: string;
                                    idp_type?: string;
                                    time_zone?: string;
                                    description?: string;
                                    job_title?: string;
                                    need_send_notification?: boolean;
                                    notification_option?: {
                                        channels?: Array<string>;
                                        language?: "zh-CN" | "en-US" | "ja-JP";
                                    };
                                    is_frozen?: boolean;
                                    geo?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/users/:user_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
         
         */
    content_check = {};
    /**
         
         */
    contract = {};
    /**
     * CoreHR
     */
    corehr = {
        /**
         * 休假管理
         */
        leave: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave&apiName=leave_request_history&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave/leave_request_history document }
             *
             * 批量查询员工请假记录
             *
             * 批量获取员工的请假记录数据
             */
            leaveRequestHistory: async (
                payload?: {
                    params: {
                        page_token?: string;
                        page_size: string;
                        employment_id_list?: number;
                        initiator_id_list?: number;
                        leave_request_status?: number;
                        leave_type_id_list?: number;
                        leave_start_date_min?: string;
                        leave_start_date_max?: string;
                        leave_end_date_min?: string;
                        leave_end_date_max?: string;
                        leave_submit_date_min?: string;
                        leave_submit_date_max?: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_corehr_id";
                        leave_update_time_min?: string;
                        leave_update_time_max?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                leave_request_list?: Array<{
                                    leave_request_id: string;
                                    employment_id: string;
                                    employment_name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    leave_type_id: string;
                                    leave_type_name: Array<{
                                        lang: string;
                                        value: string;
                                    }>;
                                    start_time: string;
                                    end_time: string;
                                    leave_duration: string;
                                    leave_duration_unit: number;
                                    leave_request_status: number;
                                    grant_source: string;
                                    return_time: string;
                                    submitted_at: string;
                                    submitted_by: string;
                                    notes: string;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/corehr/v1/leaves/leave_request_history`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
         
         */
    docs_tool = {};
    /**
     * 云文档-文档
     */
    docx = {
        /**
         * 块
         */
        documentBlock: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block&apiName=batch_update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/batch_update document }
             *
             * 批量更新块
             *
             * 批量更新块的富文本内容。
             *
             * 频率限制：单个应用调用频率上限为每秒 3 次。
             *
             * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcnMiwAKCiE6oQEkPyhvmmQEe)，了解相关规则及约束。
             */
            batchUpdate: async (
                payload?: {
                    data: {
                        requests: Array<{
                            update_text_elements?: {
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        title?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_notify?: boolean;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        notify_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    undefined?: {};
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                            };
                            update_text_style?: {
                                style: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                fields: Array<number>;
                            };
                            update_table_property?: {
                                column_width: number;
                                column_index: number;
                            };
                            insert_table_row?: { row_index: number };
                            insert_table_column?: { column_index: number };
                            delete_table_rows?: {
                                row_start_index: number;
                                row_end_index: number;
                            };
                            delete_table_columns?: {
                                column_start_index: number;
                                column_end_index: number;
                            };
                            merge_table_cells?: {
                                row_start_index: number;
                                row_end_index: number;
                                column_start_index: number;
                                column_end_index: number;
                            };
                            unmerge_table_cells?: {
                                row_index: number;
                                column_index: number;
                            };
                            insert_grid_column?: { column_index: number };
                            delete_grid_column?: { column_index: number };
                            update_grid_column_width_ratio?: {
                                width_ratios: Array<number>;
                            };
                            replace_image?: { token: string };
                            replace_file?: { token: string };
                            block_id?: string;
                            update_text?: {
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        title?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_notify?: boolean;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        notify_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    undefined?: {};
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                                style: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                fields: Array<number>;
                            };
                        }>;
                    };
                    params?: {
                        document_revision_id?: number;
                        client_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { document_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                blocks?: Array<{
                                    block_id?: string;
                                    parent_id?: string;
                                    children?: Array<string>;
                                    block_type: number;
                                    page?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    text?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading1?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading2?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading3?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading4?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading5?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading6?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading7?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading8?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading9?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    bullet?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    ordered?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    code?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    quote?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    equation?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    todo?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    bitable?: {
                                        token?: string;
                                        view_type?: number;
                                    };
                                    callout?: {
                                        background_color?: number;
                                        border_color?: number;
                                        text_color?: number;
                                        emoji_id?: string;
                                    };
                                    chat_card?: {
                                        chat_id: string;
                                        align?: number;
                                    };
                                    diagram?: { diagram_type?: number };
                                    divider?: {};
                                    file?: { token?: string; name?: string };
                                    grid?: { column_size: number };
                                    grid_column?: { width_ratio?: number };
                                    iframe?: {
                                        component: {
                                            iframe_type?: number;
                                            url: string;
                                        };
                                    };
                                    image?: {
                                        width?: number;
                                        height?: number;
                                        token?: string;
                                    };
                                    isv?: {
                                        component_id?: string;
                                        component_type_id?: string;
                                    };
                                    add_ons?: {
                                        component_id?: string;
                                        component_type_id: string;
                                        record?: string;
                                    };
                                    mindnote?: { token?: string };
                                    sheet?: {
                                        token?: string;
                                        row_size?: number;
                                        column_size?: number;
                                    };
                                    table?: {
                                        cells?: Array<string>;
                                        property: {
                                            row_size: number;
                                            column_size: number;
                                            column_width?: Array<number>;
                                            merge_info?: Array<{
                                                row_span?: number;
                                                col_span?: number;
                                            }>;
                                        };
                                    };
                                    table_cell?: {};
                                    view?: { view_type?: number };
                                    undefined?: {};
                                    quote_container?: {};
                                    task?: { task_id: string };
                                    okr?: {
                                        okr_id?: string;
                                        objectives?: Array<{
                                            objective_id?: string;
                                            kr_ids?: Array<string>;
                                        }>;
                                        period_display_status?:
                                            | "default"
                                            | "normal"
                                            | "invalid"
                                            | "hidden";
                                        period_name_zh?: string;
                                        period_name_en?: string;
                                        user_id?: string;
                                        visible_setting?: {
                                            progress_fill_area_visible?: boolean;
                                            progress_status_visible?: boolean;
                                            score_visible?: boolean;
                                        };
                                    };
                                    okr_objective?: {
                                        objective_id?: string;
                                        confidential?: boolean;
                                        position?: number;
                                        score?: number;
                                        visible?: boolean;
                                        weight?: number;
                                        progress_rate?: {
                                            mode?: "simple" | "advanced";
                                            current?: number;
                                            percent?: number;
                                            progress_status?:
                                                | "unset"
                                                | "normal"
                                                | "risk"
                                                | "extended";
                                            start?: number;
                                            status_type?: "default" | "custom";
                                            target?: number;
                                        };
                                        content?: {
                                            style?: {
                                                align?: number;
                                                done?: boolean;
                                                folded?: boolean;
                                                language?: number;
                                                wrap?: boolean;
                                            };
                                            elements: Array<{
                                                text_run?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_user?: {
                                                    user_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_doc?: {
                                                    token: string;
                                                    obj_type: number;
                                                    url: string;
                                                    title?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                reminder?: {
                                                    create_user_id: string;
                                                    is_notify?: boolean;
                                                    is_whole_day?: boolean;
                                                    expire_time: string;
                                                    notify_time: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                file?: {
                                                    file_token?: string;
                                                    source_block_id?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                undefined?: {};
                                                inline_block?: {
                                                    block_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                equation?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                            }>;
                                        };
                                    };
                                    okr_key_result?: {
                                        kr_id?: string;
                                        confidential?: boolean;
                                        position?: number;
                                        score?: number;
                                        visible?: boolean;
                                        weight?: number;
                                        progress_rate?: {
                                            mode?: "simple" | "advanced";
                                            current?: number;
                                            percent?: number;
                                            progress_status?:
                                                | "unset"
                                                | "normal"
                                                | "risk"
                                                | "extended";
                                            start?: number;
                                            status_type?: "default" | "custom";
                                            target?: number;
                                        };
                                        content?: {
                                            style?: {
                                                align?: number;
                                                done?: boolean;
                                                folded?: boolean;
                                                language?: number;
                                                wrap?: boolean;
                                            };
                                            elements: Array<{
                                                text_run?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_user?: {
                                                    user_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_doc?: {
                                                    token: string;
                                                    obj_type: number;
                                                    url: string;
                                                    title?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                reminder?: {
                                                    create_user_id: string;
                                                    is_notify?: boolean;
                                                    is_whole_day?: boolean;
                                                    expire_time: string;
                                                    notify_time: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                file?: {
                                                    file_token?: string;
                                                    source_block_id?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                undefined?: {};
                                                inline_block?: {
                                                    block_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                equation?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                            }>;
                                        };
                                    };
                                    okr_progress?: {};
                                    comment_ids?: Array<string>;
                                }>;
                                document_revision_id?: number;
                                client_token: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/batch_update`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/get document }
             *
             * 获取块
             *
             * 获取指定块的富文本内容。
             *
             * 频率限制：单个应用调用频率上限为每秒 5 次。
             *
             * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnamKaccZKqIMopnREJCZUMe#doxcnWEMWYAg2YMkEq0SZXHzaih)，了解相关规则及约束。
             */
            get: async (
                payload?: {
                    params?: {
                        document_revision_id?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { document_id: string; block_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                block?: {
                                    block_id?: string;
                                    parent_id?: string;
                                    children?: Array<string>;
                                    block_type: number;
                                    page?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    text?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading1?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading2?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading3?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading4?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading5?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading6?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading7?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading8?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading9?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    bullet?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    ordered?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    code?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    quote?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    equation?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    todo?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    bitable?: { token?: string };
                                    callout?: {
                                        background_color?: number;
                                        border_color?: number;
                                        text_color?: number;
                                        emoji_id?: string;
                                    };
                                    chat_card?: {
                                        chat_id: string;
                                        align?: number;
                                    };
                                    diagram?: { diagram_type?: number };
                                    divider?: {};
                                    file?: { token?: string; name?: string };
                                    grid?: { column_size: number };
                                    grid_column?: { width_ratio?: number };
                                    iframe?: {
                                        component: {
                                            iframe_type?: number;
                                            url: string;
                                        };
                                    };
                                    image?: {
                                        width?: number;
                                        height?: number;
                                        token?: string;
                                    };
                                    isv?: {
                                        component_id?: string;
                                        component_type_id?: string;
                                    };
                                    add_ons?: {
                                        component_id?: string;
                                        component_type_id: string;
                                        record?: string;
                                    };
                                    mindnote?: { token?: string };
                                    sheet?: { token?: string };
                                    table?: {
                                        cells?: Array<string>;
                                        property: {
                                            row_size: number;
                                            column_size: number;
                                            column_width?: Array<number>;
                                            merge_info?: Array<{
                                                row_span?: number;
                                                col_span?: number;
                                            }>;
                                        };
                                    };
                                    table_cell?: {};
                                    view?: { view_type?: number };
                                    undefined?: {};
                                    quote_container?: {};
                                    task?: { task_id: string };
                                    okr?: {
                                        okr_id?: string;
                                        period_display_status?:
                                            | "default"
                                            | "normal"
                                            | "invalid"
                                            | "hidden";
                                        period_name_zh?: string;
                                        period_name_en?: string;
                                        user_id?: string;
                                        visible_setting?: {
                                            progress_fill_area_visible?: boolean;
                                            progress_status_visible?: boolean;
                                            score_visible?: boolean;
                                        };
                                    };
                                    okr_objective?: {
                                        objective_id?: string;
                                        confidential?: boolean;
                                        position?: number;
                                        score?: number;
                                        visible?: boolean;
                                        weight?: number;
                                        progress_rate?: {
                                            mode?: "simple" | "advanced";
                                            current?: number;
                                            percent?: number;
                                            progress_status?:
                                                | "unset"
                                                | "normal"
                                                | "risk"
                                                | "extended";
                                            start?: number;
                                            status_type?: "default" | "custom";
                                            target?: number;
                                        };
                                        content?: {
                                            style?: {
                                                align?: number;
                                                done?: boolean;
                                                folded?: boolean;
                                                language?: number;
                                                wrap?: boolean;
                                            };
                                            elements: Array<{
                                                text_run?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_user?: {
                                                    user_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_doc?: {
                                                    token: string;
                                                    obj_type: number;
                                                    url: string;
                                                    title?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                reminder?: {
                                                    create_user_id: string;
                                                    is_notify?: boolean;
                                                    is_whole_day?: boolean;
                                                    expire_time: string;
                                                    notify_time: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                file?: {
                                                    file_token?: string;
                                                    source_block_id?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                undefined?: {};
                                                inline_block?: {
                                                    block_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                equation?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                            }>;
                                        };
                                    };
                                    okr_key_result?: {
                                        kr_id?: string;
                                        confidential?: boolean;
                                        position?: number;
                                        score?: number;
                                        visible?: boolean;
                                        weight?: number;
                                        progress_rate?: {
                                            mode?: "simple" | "advanced";
                                            current?: number;
                                            percent?: number;
                                            progress_status?:
                                                | "unset"
                                                | "normal"
                                                | "risk"
                                                | "extended";
                                            start?: number;
                                            status_type?: "default" | "custom";
                                            target?: number;
                                        };
                                        content?: {
                                            style?: {
                                                align?: number;
                                                done?: boolean;
                                                folded?: boolean;
                                                language?: number;
                                                wrap?: boolean;
                                            };
                                            elements: Array<{
                                                text_run?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_user?: {
                                                    user_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_doc?: {
                                                    token: string;
                                                    obj_type: number;
                                                    url: string;
                                                    title?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                reminder?: {
                                                    create_user_id: string;
                                                    is_notify?: boolean;
                                                    is_whole_day?: boolean;
                                                    expire_time: string;
                                                    notify_time: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                file?: {
                                                    file_token?: string;
                                                    source_block_id?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                undefined?: {};
                                                inline_block?: {
                                                    block_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                equation?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                            }>;
                                        };
                                    };
                                    okr_progress?: {};
                                    comment_ids?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        document_revision_id?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { document_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    block_id?: string;
                                                    parent_id?: string;
                                                    children?: Array<string>;
                                                    block_type: number;
                                                    page?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    text?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading1?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading2?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading3?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading4?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading5?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading6?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading7?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading8?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading9?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    bullet?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    ordered?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    code?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    quote?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    equation?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    todo?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    bitable?: {
                                                        token?: string;
                                                    };
                                                    callout?: {
                                                        background_color?: number;
                                                        border_color?: number;
                                                        text_color?: number;
                                                        emoji_id?: string;
                                                    };
                                                    chat_card?: {
                                                        chat_id: string;
                                                        align?: number;
                                                    };
                                                    diagram?: {
                                                        diagram_type?: number;
                                                    };
                                                    divider?: {};
                                                    file?: {
                                                        token?: string;
                                                        name?: string;
                                                    };
                                                    grid?: {
                                                        column_size: number;
                                                    };
                                                    grid_column?: {
                                                        width_ratio?: number;
                                                    };
                                                    iframe?: {
                                                        component: {
                                                            iframe_type?: number;
                                                            url: string;
                                                        };
                                                    };
                                                    image?: {
                                                        width?: number;
                                                        height?: number;
                                                        token?: string;
                                                    };
                                                    isv?: {
                                                        component_id?: string;
                                                        component_type_id?: string;
                                                    };
                                                    add_ons?: {
                                                        component_id?: string;
                                                        component_type_id: string;
                                                        record?: string;
                                                    };
                                                    mindnote?: {
                                                        token?: string;
                                                    };
                                                    sheet?: { token?: string };
                                                    table?: {
                                                        cells?: Array<string>;
                                                        property: {
                                                            row_size: number;
                                                            column_size: number;
                                                            column_width?: Array<number>;
                                                            merge_info?: Array<{
                                                                row_span?: number;
                                                                col_span?: number;
                                                            }>;
                                                        };
                                                    };
                                                    table_cell?: {};
                                                    view?: {
                                                        view_type?: number;
                                                    };
                                                    undefined?: {};
                                                    quote_container?: {};
                                                    task?: { task_id: string };
                                                    okr?: {
                                                        okr_id?: string;
                                                        period_display_status?:
                                                            | "default"
                                                            | "normal"
                                                            | "invalid"
                                                            | "hidden";
                                                        period_name_zh?: string;
                                                        period_name_en?: string;
                                                        user_id?: string;
                                                        visible_setting?: {
                                                            progress_fill_area_visible?: boolean;
                                                            progress_status_visible?: boolean;
                                                            score_visible?: boolean;
                                                        };
                                                    };
                                                    okr_objective?: {
                                                        objective_id?: string;
                                                        confidential?: boolean;
                                                        position?: number;
                                                        score?: number;
                                                        visible?: boolean;
                                                        weight?: number;
                                                        progress_rate?: {
                                                            mode?:
                                                                | "simple"
                                                                | "advanced";
                                                            current?: number;
                                                            percent?: number;
                                                            progress_status?:
                                                                | "unset"
                                                                | "normal"
                                                                | "risk"
                                                                | "extended";
                                                            start?: number;
                                                            status_type?:
                                                                | "default"
                                                                | "custom";
                                                            target?: number;
                                                        };
                                                        content?: {
                                                            style?: {
                                                                align?: number;
                                                                done?: boolean;
                                                                folded?: boolean;
                                                                language?: number;
                                                                wrap?: boolean;
                                                            };
                                                            elements: Array<{
                                                                text_run?: {
                                                                    content: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                mention_user?: {
                                                                    user_id: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                mention_doc?: {
                                                                    token: string;
                                                                    obj_type: number;
                                                                    url: string;
                                                                    title?: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                reminder?: {
                                                                    create_user_id: string;
                                                                    is_notify?: boolean;
                                                                    is_whole_day?: boolean;
                                                                    expire_time: string;
                                                                    notify_time: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                file?: {
                                                                    file_token?: string;
                                                                    source_block_id?: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                undefined?: {};
                                                                inline_block?: {
                                                                    block_id: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                equation?: {
                                                                    content: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                            }>;
                                                        };
                                                    };
                                                    okr_key_result?: {
                                                        kr_id?: string;
                                                        confidential?: boolean;
                                                        position?: number;
                                                        score?: number;
                                                        visible?: boolean;
                                                        weight?: number;
                                                        progress_rate?: {
                                                            mode?:
                                                                | "simple"
                                                                | "advanced";
                                                            current?: number;
                                                            percent?: number;
                                                            progress_status?:
                                                                | "unset"
                                                                | "normal"
                                                                | "risk"
                                                                | "extended";
                                                            start?: number;
                                                            status_type?:
                                                                | "default"
                                                                | "custom";
                                                            target?: number;
                                                        };
                                                        content?: {
                                                            style?: {
                                                                align?: number;
                                                                done?: boolean;
                                                                folded?: boolean;
                                                                language?: number;
                                                                wrap?: boolean;
                                                            };
                                                            elements: Array<{
                                                                text_run?: {
                                                                    content: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                mention_user?: {
                                                                    user_id: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                mention_doc?: {
                                                                    token: string;
                                                                    obj_type: number;
                                                                    url: string;
                                                                    title?: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                reminder?: {
                                                                    create_user_id: string;
                                                                    is_notify?: boolean;
                                                                    is_whole_day?: boolean;
                                                                    expire_time: string;
                                                                    notify_time: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                file?: {
                                                                    file_token?: string;
                                                                    source_block_id?: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                undefined?: {};
                                                                inline_block?: {
                                                                    block_id: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                equation?: {
                                                                    content: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                            }>;
                                                        };
                                                    };
                                                    okr_progress?: {};
                                                    comment_ids?: Array<string>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/list document }
             *
             * 获取文档所有块
             *
             * 获取文档所有块的富文本内容并分页返回。
             *
             * 频率限制：单个应用调用频率上限为每秒 5 次。
             *
             * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnamKaccZKqIMopnREJCZUMe#doxcn6AkCE2AUUm2WwxID7lS7Xc)，了解相关规则及约束。
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        document_revision_id?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { document_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    block_id?: string;
                                    parent_id?: string;
                                    children?: Array<string>;
                                    block_type: number;
                                    page?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    text?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading1?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading2?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading3?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading4?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading5?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading6?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading7?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading8?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading9?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    bullet?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    ordered?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    code?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    quote?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    equation?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    todo?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    bitable?: { token?: string };
                                    callout?: {
                                        background_color?: number;
                                        border_color?: number;
                                        text_color?: number;
                                        emoji_id?: string;
                                    };
                                    chat_card?: {
                                        chat_id: string;
                                        align?: number;
                                    };
                                    diagram?: { diagram_type?: number };
                                    divider?: {};
                                    file?: { token?: string; name?: string };
                                    grid?: { column_size: number };
                                    grid_column?: { width_ratio?: number };
                                    iframe?: {
                                        component: {
                                            iframe_type?: number;
                                            url: string;
                                        };
                                    };
                                    image?: {
                                        width?: number;
                                        height?: number;
                                        token?: string;
                                    };
                                    isv?: {
                                        component_id?: string;
                                        component_type_id?: string;
                                    };
                                    add_ons?: {
                                        component_id?: string;
                                        component_type_id: string;
                                        record?: string;
                                    };
                                    mindnote?: { token?: string };
                                    sheet?: { token?: string };
                                    table?: {
                                        cells?: Array<string>;
                                        property: {
                                            row_size: number;
                                            column_size: number;
                                            column_width?: Array<number>;
                                            merge_info?: Array<{
                                                row_span?: number;
                                                col_span?: number;
                                            }>;
                                        };
                                    };
                                    table_cell?: {};
                                    view?: { view_type?: number };
                                    undefined?: {};
                                    quote_container?: {};
                                    task?: { task_id: string };
                                    okr?: {
                                        okr_id?: string;
                                        period_display_status?:
                                            | "default"
                                            | "normal"
                                            | "invalid"
                                            | "hidden";
                                        period_name_zh?: string;
                                        period_name_en?: string;
                                        user_id?: string;
                                        visible_setting?: {
                                            progress_fill_area_visible?: boolean;
                                            progress_status_visible?: boolean;
                                            score_visible?: boolean;
                                        };
                                    };
                                    okr_objective?: {
                                        objective_id?: string;
                                        confidential?: boolean;
                                        position?: number;
                                        score?: number;
                                        visible?: boolean;
                                        weight?: number;
                                        progress_rate?: {
                                            mode?: "simple" | "advanced";
                                            current?: number;
                                            percent?: number;
                                            progress_status?:
                                                | "unset"
                                                | "normal"
                                                | "risk"
                                                | "extended";
                                            start?: number;
                                            status_type?: "default" | "custom";
                                            target?: number;
                                        };
                                        content?: {
                                            style?: {
                                                align?: number;
                                                done?: boolean;
                                                folded?: boolean;
                                                language?: number;
                                                wrap?: boolean;
                                            };
                                            elements: Array<{
                                                text_run?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_user?: {
                                                    user_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_doc?: {
                                                    token: string;
                                                    obj_type: number;
                                                    url: string;
                                                    title?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                reminder?: {
                                                    create_user_id: string;
                                                    is_notify?: boolean;
                                                    is_whole_day?: boolean;
                                                    expire_time: string;
                                                    notify_time: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                file?: {
                                                    file_token?: string;
                                                    source_block_id?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                undefined?: {};
                                                inline_block?: {
                                                    block_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                equation?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                            }>;
                                        };
                                    };
                                    okr_key_result?: {
                                        kr_id?: string;
                                        confidential?: boolean;
                                        position?: number;
                                        score?: number;
                                        visible?: boolean;
                                        weight?: number;
                                        progress_rate?: {
                                            mode?: "simple" | "advanced";
                                            current?: number;
                                            percent?: number;
                                            progress_status?:
                                                | "unset"
                                                | "normal"
                                                | "risk"
                                                | "extended";
                                            start?: number;
                                            status_type?: "default" | "custom";
                                            target?: number;
                                        };
                                        content?: {
                                            style?: {
                                                align?: number;
                                                done?: boolean;
                                                folded?: boolean;
                                                language?: number;
                                                wrap?: boolean;
                                            };
                                            elements: Array<{
                                                text_run?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_user?: {
                                                    user_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_doc?: {
                                                    token: string;
                                                    obj_type: number;
                                                    url: string;
                                                    title?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                reminder?: {
                                                    create_user_id: string;
                                                    is_notify?: boolean;
                                                    is_whole_day?: boolean;
                                                    expire_time: string;
                                                    notify_time: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                file?: {
                                                    file_token?: string;
                                                    source_block_id?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                undefined?: {};
                                                inline_block?: {
                                                    block_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                equation?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                            }>;
                                        };
                                    };
                                    okr_progress?: {};
                                    comment_ids?: Array<string>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/patch document }
             *
             * 更新块
             *
             * 更新指定的块。
             *
             * 频率限制：单个应用调用频率上限为每秒 3 次。
             *
             * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcnEeyS0I8MMqoieIMpK7jm8g)，了解相关规则及约束。
             */
            patch: async (
                payload?: {
                    data?: {
                        update_text_elements?: {
                            elements: Array<{
                                text_run?: {
                                    content: string;
                                    text_element_style?: {
                                        bold?: boolean;
                                        italic?: boolean;
                                        strikethrough?: boolean;
                                        underline?: boolean;
                                        inline_code?: boolean;
                                        background_color?: number;
                                        text_color?: number;
                                        link?: { url: string };
                                        comment_ids?: Array<string>;
                                    };
                                };
                                mention_user?: {
                                    user_id: string;
                                    text_element_style?: {
                                        bold?: boolean;
                                        italic?: boolean;
                                        strikethrough?: boolean;
                                        underline?: boolean;
                                        inline_code?: boolean;
                                        background_color?: number;
                                        text_color?: number;
                                        link?: { url: string };
                                        comment_ids?: Array<string>;
                                    };
                                };
                                mention_doc?: {
                                    token: string;
                                    obj_type: number;
                                    url: string;
                                    text_element_style?: {
                                        bold?: boolean;
                                        italic?: boolean;
                                        strikethrough?: boolean;
                                        underline?: boolean;
                                        inline_code?: boolean;
                                        background_color?: number;
                                        text_color?: number;
                                        link?: { url: string };
                                        comment_ids?: Array<string>;
                                    };
                                };
                                reminder?: {
                                    create_user_id: string;
                                    is_whole_day?: boolean;
                                    expire_time: string;
                                    text_element_style?: {
                                        bold?: boolean;
                                        italic?: boolean;
                                        strikethrough?: boolean;
                                        underline?: boolean;
                                        inline_code?: boolean;
                                        background_color?: number;
                                        text_color?: number;
                                        link?: { url: string };
                                        comment_ids?: Array<string>;
                                    };
                                };
                                file?: {
                                    file_token?: string;
                                    source_block_id?: string;
                                    text_element_style?: {
                                        bold?: boolean;
                                        italic?: boolean;
                                        strikethrough?: boolean;
                                        underline?: boolean;
                                        inline_code?: boolean;
                                        background_color?: number;
                                        text_color?: number;
                                        link?: { url: string };
                                        comment_ids?: Array<string>;
                                    };
                                };
                                inline_block?: {
                                    block_id: string;
                                    text_element_style?: {
                                        bold?: boolean;
                                        italic?: boolean;
                                        strikethrough?: boolean;
                                        underline?: boolean;
                                        inline_code?: boolean;
                                        background_color?: number;
                                        text_color?: number;
                                        link?: { url: string };
                                        comment_ids?: Array<string>;
                                    };
                                };
                                equation?: {
                                    content: string;
                                    text_element_style?: {
                                        bold?: boolean;
                                        italic?: boolean;
                                        strikethrough?: boolean;
                                        underline?: boolean;
                                        inline_code?: boolean;
                                        background_color?: number;
                                        text_color?: number;
                                        link?: { url: string };
                                        comment_ids?: Array<string>;
                                    };
                                };
                            }>;
                        };
                        update_text_style?: {
                            style: {
                                align?: number;
                                done?: boolean;
                                folded?: boolean;
                                language?: number;
                                wrap?: boolean;
                            };
                            fields: Array<number>;
                        };
                        update_table_property?: {
                            column_width: number;
                            column_index: number;
                        };
                        insert_table_row?: { row_index: number };
                        insert_table_column?: { column_index: number };
                        delete_table_rows?: {
                            row_start_index: number;
                            row_end_index: number;
                        };
                        delete_table_columns?: {
                            column_start_index: number;
                            column_end_index: number;
                        };
                        merge_table_cells?: {
                            row_start_index: number;
                            row_end_index: number;
                            column_start_index: number;
                            column_end_index: number;
                        };
                        unmerge_table_cells?: {
                            row_index: number;
                            column_index: number;
                        };
                        insert_grid_column?: { column_index: number };
                        delete_grid_column?: { column_index: number };
                        update_grid_column_width_ratio?: {
                            width_ratios: Array<number>;
                        };
                        replace_image?: { token: string };
                        replace_file?: { token: string };
                        update_text?: {
                            elements: Array<{
                                text_run?: {
                                    content: string;
                                    text_element_style?: {
                                        bold?: boolean;
                                        italic?: boolean;
                                        strikethrough?: boolean;
                                        underline?: boolean;
                                        inline_code?: boolean;
                                        background_color?: number;
                                        text_color?: number;
                                        link?: { url: string };
                                        comment_ids?: Array<string>;
                                    };
                                };
                                mention_user?: {
                                    user_id: string;
                                    text_element_style?: {
                                        bold?: boolean;
                                        italic?: boolean;
                                        strikethrough?: boolean;
                                        underline?: boolean;
                                        inline_code?: boolean;
                                        background_color?: number;
                                        text_color?: number;
                                        link?: { url: string };
                                        comment_ids?: Array<string>;
                                    };
                                };
                                mention_doc?: {
                                    token: string;
                                    obj_type: number;
                                    url: string;
                                    text_element_style?: {
                                        bold?: boolean;
                                        italic?: boolean;
                                        strikethrough?: boolean;
                                        underline?: boolean;
                                        inline_code?: boolean;
                                        background_color?: number;
                                        text_color?: number;
                                        link?: { url: string };
                                        comment_ids?: Array<string>;
                                    };
                                };
                                reminder?: {
                                    create_user_id: string;
                                    is_whole_day?: boolean;
                                    expire_time: string;
                                    text_element_style?: {
                                        bold?: boolean;
                                        italic?: boolean;
                                        strikethrough?: boolean;
                                        underline?: boolean;
                                        inline_code?: boolean;
                                        background_color?: number;
                                        text_color?: number;
                                        link?: { url: string };
                                        comment_ids?: Array<string>;
                                    };
                                };
                                file?: {
                                    file_token?: string;
                                    source_block_id?: string;
                                    text_element_style?: {
                                        bold?: boolean;
                                        italic?: boolean;
                                        strikethrough?: boolean;
                                        underline?: boolean;
                                        inline_code?: boolean;
                                        background_color?: number;
                                        text_color?: number;
                                        link?: { url: string };
                                        comment_ids?: Array<string>;
                                    };
                                };
                                inline_block?: {
                                    block_id: string;
                                    text_element_style?: {
                                        bold?: boolean;
                                        italic?: boolean;
                                        strikethrough?: boolean;
                                        underline?: boolean;
                                        inline_code?: boolean;
                                        background_color?: number;
                                        text_color?: number;
                                        link?: { url: string };
                                        comment_ids?: Array<string>;
                                    };
                                };
                                equation?: {
                                    content: string;
                                    text_element_style?: {
                                        bold?: boolean;
                                        italic?: boolean;
                                        strikethrough?: boolean;
                                        underline?: boolean;
                                        inline_code?: boolean;
                                        background_color?: number;
                                        text_color?: number;
                                        link?: { url: string };
                                        comment_ids?: Array<string>;
                                    };
                                };
                            }>;
                            style: {
                                align?: number;
                                done?: boolean;
                                folded?: boolean;
                                language?: number;
                                wrap?: boolean;
                            };
                            fields: Array<number>;
                        };
                    };
                    params?: {
                        document_revision_id?: number;
                        client_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { document_id: string; block_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                block?: {
                                    block_id?: string;
                                    parent_id?: string;
                                    children?: Array<string>;
                                    block_type: number;
                                    page?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    text?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading1?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading2?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading3?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading4?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading5?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading6?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading7?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading8?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading9?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    bullet?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    ordered?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    code?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    quote?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    equation?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    todo?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    bitable?: {
                                        token?: string;
                                        view_type?: number;
                                    };
                                    callout?: {
                                        background_color?: number;
                                        border_color?: number;
                                        text_color?: number;
                                        emoji_id?: string;
                                    };
                                    chat_card?: {
                                        chat_id: string;
                                        align?: number;
                                    };
                                    diagram?: { diagram_type?: number };
                                    divider?: {};
                                    file?: { token?: string; name?: string };
                                    grid?: { column_size: number };
                                    grid_column?: { width_ratio?: number };
                                    iframe?: {
                                        component: {
                                            iframe_type?: number;
                                            url: string;
                                        };
                                    };
                                    image?: {
                                        width?: number;
                                        height?: number;
                                        token?: string;
                                    };
                                    isv?: {
                                        component_id?: string;
                                        component_type_id?: string;
                                    };
                                    add_ons?: {
                                        component_id?: string;
                                        component_type_id: string;
                                        record?: string;
                                    };
                                    mindnote?: { token?: string };
                                    sheet?: {
                                        token?: string;
                                        row_size?: number;
                                        column_size?: number;
                                    };
                                    table?: {
                                        cells?: Array<string>;
                                        property: {
                                            row_size: number;
                                            column_size: number;
                                            column_width?: Array<number>;
                                            merge_info?: Array<{
                                                row_span?: number;
                                                col_span?: number;
                                            }>;
                                        };
                                    };
                                    table_cell?: {};
                                    view?: { view_type?: number };
                                    undefined?: {};
                                    quote_container?: {};
                                    task?: { task_id: string };
                                    okr?: {
                                        okr_id?: string;
                                        objectives?: Array<{
                                            objective_id?: string;
                                            kr_ids?: Array<string>;
                                        }>;
                                        period_display_status?:
                                            | "default"
                                            | "normal"
                                            | "invalid"
                                            | "hidden";
                                        period_name_zh?: string;
                                        period_name_en?: string;
                                        user_id?: string;
                                        visible_setting?: {
                                            progress_fill_area_visible?: boolean;
                                            progress_status_visible?: boolean;
                                            score_visible?: boolean;
                                        };
                                    };
                                    okr_objective?: {
                                        objective_id?: string;
                                        confidential?: boolean;
                                        position?: number;
                                        score?: number;
                                        visible?: boolean;
                                        weight?: number;
                                        progress_rate?: {
                                            mode?: "simple" | "advanced";
                                            current?: number;
                                            percent?: number;
                                            progress_status?:
                                                | "unset"
                                                | "normal"
                                                | "risk"
                                                | "extended";
                                            start?: number;
                                            status_type?: "default" | "custom";
                                            target?: number;
                                        };
                                        content?: {
                                            style?: {
                                                align?: number;
                                                done?: boolean;
                                                folded?: boolean;
                                                language?: number;
                                                wrap?: boolean;
                                            };
                                            elements: Array<{
                                                text_run?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_user?: {
                                                    user_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_doc?: {
                                                    token: string;
                                                    obj_type: number;
                                                    url: string;
                                                    title?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                reminder?: {
                                                    create_user_id: string;
                                                    is_notify?: boolean;
                                                    is_whole_day?: boolean;
                                                    expire_time: string;
                                                    notify_time: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                file?: {
                                                    file_token?: string;
                                                    source_block_id?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                undefined?: {};
                                                inline_block?: {
                                                    block_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                equation?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                            }>;
                                        };
                                    };
                                    okr_key_result?: {
                                        kr_id?: string;
                                        confidential?: boolean;
                                        position?: number;
                                        score?: number;
                                        visible?: boolean;
                                        weight?: number;
                                        progress_rate?: {
                                            mode?: "simple" | "advanced";
                                            current?: number;
                                            percent?: number;
                                            progress_status?:
                                                | "unset"
                                                | "normal"
                                                | "risk"
                                                | "extended";
                                            start?: number;
                                            status_type?: "default" | "custom";
                                            target?: number;
                                        };
                                        content?: {
                                            style?: {
                                                align?: number;
                                                done?: boolean;
                                                folded?: boolean;
                                                language?: number;
                                                wrap?: boolean;
                                            };
                                            elements: Array<{
                                                text_run?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_user?: {
                                                    user_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_doc?: {
                                                    token: string;
                                                    obj_type: number;
                                                    url: string;
                                                    title?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                reminder?: {
                                                    create_user_id: string;
                                                    is_notify?: boolean;
                                                    is_whole_day?: boolean;
                                                    expire_time: string;
                                                    notify_time: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                file?: {
                                                    file_token?: string;
                                                    source_block_id?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                undefined?: {};
                                                inline_block?: {
                                                    block_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                equation?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                            }>;
                                        };
                                    };
                                    okr_progress?: {};
                                    comment_ids?: Array<string>;
                                };
                                document_revision_id?: number;
                                client_token: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * document.block.children
         */
        documentBlockChildren: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block.children&apiName=batch_delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block-children/batch_delete document }
             *
             * 删除块
             *
             * 指定需要操作的块，删除其指定范围的子块。如果操作成功，接口将返回应用删除操作后的文档版本号。
             *
             * 频率限制：单个应用调用频率上限为每秒 3 次。
             *
             * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcngCsscGk0WacO258mYDgM6b)，了解相关规则及约束。
             */
            batchDelete: async (
                payload?: {
                    data: { start_index: number; end_index: number };
                    params?: {
                        document_revision_id?: number;
                        client_token?: string;
                    };
                    path: { document_id: string; block_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                document_revision_id?: number;
                                client_token: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children/batch_delete`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block.children&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block-children/create document }
             *
             * 创建块
             *
             * 指定需要操作的块，为其创建一批子块，并插入到指定位置。如果操作成功，接口将返回新创建子块的富文本内容。
             *
             * 频率限制：单个应用调用频率上限为每秒 3 次。
             *
             * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcnm0ooUe0s20GwwVB3a05rtb)，了解相关规则及约束。
             */
            create: async (
                payload?: {
                    data?: {
                        children?: Array<{
                            block_type: number;
                            text?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                            };
                            heading1?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                            };
                            heading2?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                            };
                            heading3?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                            };
                            heading4?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                            };
                            heading5?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                            };
                            heading6?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                            };
                            heading7?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                            };
                            heading8?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                            };
                            heading9?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                            };
                            bullet?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                            };
                            ordered?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                            };
                            code?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                            };
                            quote?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                            };
                            equation?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                            };
                            todo?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_user?: {
                                        user_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    inline_block?: {
                                        block_id: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                    equation?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                            comment_ids?: Array<string>;
                                        };
                                    };
                                }>;
                            };
                            bitable?: { view_type?: number };
                            callout?: {
                                background_color?: number;
                                border_color?: number;
                                text_color?: number;
                            };
                            chat_card?: { chat_id: string; align?: number };
                            divider?: {};
                            file?: {};
                            grid?: { column_size: number };
                            iframe?: {
                                component: {
                                    iframe_type?: number;
                                    url: string;
                                };
                            };
                            image?: {};
                            isv?: {};
                            add_ons?: {
                                component_id?: string;
                                component_type_id: string;
                                record?: string;
                            };
                            sheet?: { row_size?: number; column_size?: number };
                            table?: {
                                property: {
                                    row_size: number;
                                    column_size: number;
                                    merge_info?: Array<{
                                        row_span?: number;
                                        col_span?: number;
                                    }>;
                                };
                            };
                            quote_container?: {};
                            okr?: {
                                okr_id?: string;
                                objectives?: Array<{
                                    objective_id?: string;
                                    kr_ids?: Array<string>;
                                }>;
                            };
                            comment_ids?: Array<string>;
                        }>;
                        index?: number;
                    };
                    params?: {
                        document_revision_id?: number;
                        client_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { document_id: string; block_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                children?: Array<{
                                    block_id?: string;
                                    parent_id?: string;
                                    children?: Array<string>;
                                    block_type: number;
                                    page?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    text?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading1?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading2?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading3?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading4?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading5?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading6?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading7?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading8?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading9?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    bullet?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    ordered?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    code?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    quote?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    equation?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    todo?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    bitable?: {
                                        token?: string;
                                        view_type?: number;
                                    };
                                    callout?: {
                                        background_color?: number;
                                        border_color?: number;
                                        text_color?: number;
                                        emoji_id?: string;
                                    };
                                    chat_card?: {
                                        chat_id: string;
                                        align?: number;
                                    };
                                    diagram?: { diagram_type?: number };
                                    divider?: {};
                                    file?: { token?: string; name?: string };
                                    grid?: { column_size: number };
                                    grid_column?: { width_ratio?: number };
                                    iframe?: {
                                        component: {
                                            iframe_type?: number;
                                            url: string;
                                        };
                                    };
                                    image?: {
                                        width?: number;
                                        height?: number;
                                        token?: string;
                                    };
                                    isv?: {
                                        component_id?: string;
                                        component_type_id?: string;
                                    };
                                    add_ons?: {
                                        component_id?: string;
                                        component_type_id: string;
                                        record?: string;
                                    };
                                    mindnote?: { token?: string };
                                    sheet?: {
                                        token?: string;
                                        row_size?: number;
                                        column_size?: number;
                                    };
                                    table?: {
                                        cells?: Array<string>;
                                        property: {
                                            row_size: number;
                                            column_size: number;
                                            column_width?: Array<number>;
                                            merge_info?: Array<{
                                                row_span?: number;
                                                col_span?: number;
                                            }>;
                                        };
                                    };
                                    table_cell?: {};
                                    view?: { view_type?: number };
                                    undefined?: {};
                                    quote_container?: {};
                                    task?: { task_id: string };
                                    okr?: {
                                        okr_id?: string;
                                        objectives?: Array<{
                                            objective_id?: string;
                                            kr_ids?: Array<string>;
                                        }>;
                                        period_display_status?:
                                            | "default"
                                            | "normal"
                                            | "invalid"
                                            | "hidden";
                                        period_name_zh?: string;
                                        period_name_en?: string;
                                        user_id?: string;
                                        visible_setting?: {
                                            progress_fill_area_visible?: boolean;
                                            progress_status_visible?: boolean;
                                            score_visible?: boolean;
                                        };
                                    };
                                    okr_objective?: {
                                        objective_id?: string;
                                        confidential?: boolean;
                                        position?: number;
                                        score?: number;
                                        visible?: boolean;
                                        weight?: number;
                                        progress_rate?: {
                                            mode?: "simple" | "advanced";
                                            current?: number;
                                            percent?: number;
                                            progress_status?:
                                                | "unset"
                                                | "normal"
                                                | "risk"
                                                | "extended";
                                            start?: number;
                                            status_type?: "default" | "custom";
                                            target?: number;
                                        };
                                        content?: {
                                            style?: {
                                                align?: number;
                                                done?: boolean;
                                                folded?: boolean;
                                                language?: number;
                                                wrap?: boolean;
                                            };
                                            elements: Array<{
                                                text_run?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_user?: {
                                                    user_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_doc?: {
                                                    token: string;
                                                    obj_type: number;
                                                    url: string;
                                                    title?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                reminder?: {
                                                    create_user_id: string;
                                                    is_notify?: boolean;
                                                    is_whole_day?: boolean;
                                                    expire_time: string;
                                                    notify_time: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                file?: {
                                                    file_token?: string;
                                                    source_block_id?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                undefined?: {};
                                                inline_block?: {
                                                    block_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                equation?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                            }>;
                                        };
                                    };
                                    okr_key_result?: {
                                        kr_id?: string;
                                        confidential?: boolean;
                                        position?: number;
                                        score?: number;
                                        visible?: boolean;
                                        weight?: number;
                                        progress_rate?: {
                                            mode?: "simple" | "advanced";
                                            current?: number;
                                            percent?: number;
                                            progress_status?:
                                                | "unset"
                                                | "normal"
                                                | "risk"
                                                | "extended";
                                            start?: number;
                                            status_type?: "default" | "custom";
                                            target?: number;
                                        };
                                        content?: {
                                            style?: {
                                                align?: number;
                                                done?: boolean;
                                                folded?: boolean;
                                                language?: number;
                                                wrap?: boolean;
                                            };
                                            elements: Array<{
                                                text_run?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_user?: {
                                                    user_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_doc?: {
                                                    token: string;
                                                    obj_type: number;
                                                    url: string;
                                                    title?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                reminder?: {
                                                    create_user_id: string;
                                                    is_notify?: boolean;
                                                    is_whole_day?: boolean;
                                                    expire_time: string;
                                                    notify_time: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                file?: {
                                                    file_token?: string;
                                                    source_block_id?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                undefined?: {};
                                                inline_block?: {
                                                    block_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                equation?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                            }>;
                                        };
                                    };
                                    okr_progress?: {};
                                    comment_ids?: Array<string>;
                                }>;
                                document_revision_id?: number;
                                client_token: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            getWithIterator: async (
                payload?: {
                    params?: {
                        document_revision_id?: number;
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { document_id: string; block_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    block_id?: string;
                                                    parent_id?: string;
                                                    children?: Array<string>;
                                                    block_type: number;
                                                    page?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    text?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading1?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading2?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading3?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading4?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading5?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading6?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading7?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading8?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    heading9?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    bullet?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    ordered?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    code?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    quote?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    equation?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    todo?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                            equation?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                    comment_ids?: Array<string>;
                                                                };
                                                            };
                                                        }>;
                                                    };
                                                    bitable?: {
                                                        token?: string;
                                                    };
                                                    callout?: {
                                                        background_color?: number;
                                                        border_color?: number;
                                                        text_color?: number;
                                                        emoji_id?: string;
                                                    };
                                                    chat_card?: {
                                                        chat_id: string;
                                                        align?: number;
                                                    };
                                                    diagram?: {
                                                        diagram_type?: number;
                                                    };
                                                    divider?: {};
                                                    file?: {
                                                        token?: string;
                                                        name?: string;
                                                    };
                                                    grid?: {
                                                        column_size: number;
                                                    };
                                                    grid_column?: {
                                                        width_ratio?: number;
                                                    };
                                                    iframe?: {
                                                        component: {
                                                            iframe_type?: number;
                                                            url: string;
                                                        };
                                                    };
                                                    image?: {
                                                        width?: number;
                                                        height?: number;
                                                        token?: string;
                                                    };
                                                    isv?: {
                                                        component_id?: string;
                                                        component_type_id?: string;
                                                    };
                                                    add_ons?: {
                                                        component_id?: string;
                                                        component_type_id: string;
                                                        record?: string;
                                                    };
                                                    mindnote?: {
                                                        token?: string;
                                                    };
                                                    sheet?: { token?: string };
                                                    table?: {
                                                        cells?: Array<string>;
                                                        property: {
                                                            row_size: number;
                                                            column_size: number;
                                                            column_width?: Array<number>;
                                                            merge_info?: Array<{
                                                                row_span?: number;
                                                                col_span?: number;
                                                            }>;
                                                        };
                                                    };
                                                    table_cell?: {};
                                                    view?: {
                                                        view_type?: number;
                                                    };
                                                    undefined?: {};
                                                    quote_container?: {};
                                                    task?: { task_id: string };
                                                    okr?: {
                                                        okr_id?: string;
                                                        period_display_status?:
                                                            | "default"
                                                            | "normal"
                                                            | "invalid"
                                                            | "hidden";
                                                        period_name_zh?: string;
                                                        period_name_en?: string;
                                                        user_id?: string;
                                                        visible_setting?: {
                                                            progress_fill_area_visible?: boolean;
                                                            progress_status_visible?: boolean;
                                                            score_visible?: boolean;
                                                        };
                                                    };
                                                    okr_objective?: {
                                                        objective_id?: string;
                                                        confidential?: boolean;
                                                        position?: number;
                                                        score?: number;
                                                        visible?: boolean;
                                                        weight?: number;
                                                        progress_rate?: {
                                                            mode?:
                                                                | "simple"
                                                                | "advanced";
                                                            current?: number;
                                                            percent?: number;
                                                            progress_status?:
                                                                | "unset"
                                                                | "normal"
                                                                | "risk"
                                                                | "extended";
                                                            start?: number;
                                                            status_type?:
                                                                | "default"
                                                                | "custom";
                                                            target?: number;
                                                        };
                                                        content?: {
                                                            style?: {
                                                                align?: number;
                                                                done?: boolean;
                                                                folded?: boolean;
                                                                language?: number;
                                                                wrap?: boolean;
                                                            };
                                                            elements: Array<{
                                                                text_run?: {
                                                                    content: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                mention_user?: {
                                                                    user_id: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                mention_doc?: {
                                                                    token: string;
                                                                    obj_type: number;
                                                                    url: string;
                                                                    title?: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                reminder?: {
                                                                    create_user_id: string;
                                                                    is_notify?: boolean;
                                                                    is_whole_day?: boolean;
                                                                    expire_time: string;
                                                                    notify_time: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                file?: {
                                                                    file_token?: string;
                                                                    source_block_id?: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                undefined?: {};
                                                                inline_block?: {
                                                                    block_id: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                equation?: {
                                                                    content: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                            }>;
                                                        };
                                                    };
                                                    okr_key_result?: {
                                                        kr_id?: string;
                                                        confidential?: boolean;
                                                        position?: number;
                                                        score?: number;
                                                        visible?: boolean;
                                                        weight?: number;
                                                        progress_rate?: {
                                                            mode?:
                                                                | "simple"
                                                                | "advanced";
                                                            current?: number;
                                                            percent?: number;
                                                            progress_status?:
                                                                | "unset"
                                                                | "normal"
                                                                | "risk"
                                                                | "extended";
                                                            start?: number;
                                                            status_type?:
                                                                | "default"
                                                                | "custom";
                                                            target?: number;
                                                        };
                                                        content?: {
                                                            style?: {
                                                                align?: number;
                                                                done?: boolean;
                                                                folded?: boolean;
                                                                language?: number;
                                                                wrap?: boolean;
                                                            };
                                                            elements: Array<{
                                                                text_run?: {
                                                                    content: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                mention_user?: {
                                                                    user_id: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                mention_doc?: {
                                                                    token: string;
                                                                    obj_type: number;
                                                                    url: string;
                                                                    title?: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                reminder?: {
                                                                    create_user_id: string;
                                                                    is_notify?: boolean;
                                                                    is_whole_day?: boolean;
                                                                    expire_time: string;
                                                                    notify_time: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                file?: {
                                                                    file_token?: string;
                                                                    source_block_id?: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                undefined?: {};
                                                                inline_block?: {
                                                                    block_id: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                                equation?: {
                                                                    content: string;
                                                                    text_element_style?: {
                                                                        bold?: boolean;
                                                                        italic?: boolean;
                                                                        strikethrough?: boolean;
                                                                        underline?: boolean;
                                                                        inline_code?: boolean;
                                                                        background_color?: number;
                                                                        text_color?: number;
                                                                        link?: {
                                                                            url: string;
                                                                        };
                                                                        comment_ids?: Array<string>;
                                                                    };
                                                                };
                                                            }>;
                                                        };
                                                    };
                                                    okr_progress?: {};
                                                    comment_ids?: Array<string>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block.children&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block-children/get document }
             *
             * 获取所有子块
             *
             * 给定一个指定版本的文档，并指定需要操作的块，分页遍历其所有子块富文本内容 。如果不指定版本，则会默认查询最新版本。
             *
             * 频率限制：单个应用调用频率上限为每秒 5 次。
             *
             * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcnE2UK2yY0gEGK8nBMPtB0vd)，了解相关规则及约束。
             */
            get: async (
                payload?: {
                    params?: {
                        document_revision_id?: number;
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { document_id: string; block_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    block_id?: string;
                                    parent_id?: string;
                                    children?: Array<string>;
                                    block_type: number;
                                    page?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    text?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading1?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading2?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading3?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading4?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading5?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading6?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading7?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading8?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    heading9?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    bullet?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    ordered?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    code?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    quote?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    equation?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    todo?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_user?: {
                                                user_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            undefined?: {};
                                            inline_block?: {
                                                block_id: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                            equation?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                    comment_ids?: Array<string>;
                                                };
                                            };
                                        }>;
                                    };
                                    bitable?: { token?: string };
                                    callout?: {
                                        background_color?: number;
                                        border_color?: number;
                                        text_color?: number;
                                        emoji_id?: string;
                                    };
                                    chat_card?: {
                                        chat_id: string;
                                        align?: number;
                                    };
                                    diagram?: { diagram_type?: number };
                                    divider?: {};
                                    file?: { token?: string; name?: string };
                                    grid?: { column_size: number };
                                    grid_column?: { width_ratio?: number };
                                    iframe?: {
                                        component: {
                                            iframe_type?: number;
                                            url: string;
                                        };
                                    };
                                    image?: {
                                        width?: number;
                                        height?: number;
                                        token?: string;
                                    };
                                    isv?: {
                                        component_id?: string;
                                        component_type_id?: string;
                                    };
                                    add_ons?: {
                                        component_id?: string;
                                        component_type_id: string;
                                        record?: string;
                                    };
                                    mindnote?: { token?: string };
                                    sheet?: { token?: string };
                                    table?: {
                                        cells?: Array<string>;
                                        property: {
                                            row_size: number;
                                            column_size: number;
                                            column_width?: Array<number>;
                                            merge_info?: Array<{
                                                row_span?: number;
                                                col_span?: number;
                                            }>;
                                        };
                                    };
                                    table_cell?: {};
                                    view?: { view_type?: number };
                                    undefined?: {};
                                    quote_container?: {};
                                    task?: { task_id: string };
                                    okr?: {
                                        okr_id?: string;
                                        period_display_status?:
                                            | "default"
                                            | "normal"
                                            | "invalid"
                                            | "hidden";
                                        period_name_zh?: string;
                                        period_name_en?: string;
                                        user_id?: string;
                                        visible_setting?: {
                                            progress_fill_area_visible?: boolean;
                                            progress_status_visible?: boolean;
                                            score_visible?: boolean;
                                        };
                                    };
                                    okr_objective?: {
                                        objective_id?: string;
                                        confidential?: boolean;
                                        position?: number;
                                        score?: number;
                                        visible?: boolean;
                                        weight?: number;
                                        progress_rate?: {
                                            mode?: "simple" | "advanced";
                                            current?: number;
                                            percent?: number;
                                            progress_status?:
                                                | "unset"
                                                | "normal"
                                                | "risk"
                                                | "extended";
                                            start?: number;
                                            status_type?: "default" | "custom";
                                            target?: number;
                                        };
                                        content?: {
                                            style?: {
                                                align?: number;
                                                done?: boolean;
                                                folded?: boolean;
                                                language?: number;
                                                wrap?: boolean;
                                            };
                                            elements: Array<{
                                                text_run?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_user?: {
                                                    user_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_doc?: {
                                                    token: string;
                                                    obj_type: number;
                                                    url: string;
                                                    title?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                reminder?: {
                                                    create_user_id: string;
                                                    is_notify?: boolean;
                                                    is_whole_day?: boolean;
                                                    expire_time: string;
                                                    notify_time: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                file?: {
                                                    file_token?: string;
                                                    source_block_id?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                undefined?: {};
                                                inline_block?: {
                                                    block_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                equation?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                            }>;
                                        };
                                    };
                                    okr_key_result?: {
                                        kr_id?: string;
                                        confidential?: boolean;
                                        position?: number;
                                        score?: number;
                                        visible?: boolean;
                                        weight?: number;
                                        progress_rate?: {
                                            mode?: "simple" | "advanced";
                                            current?: number;
                                            percent?: number;
                                            progress_status?:
                                                | "unset"
                                                | "normal"
                                                | "risk"
                                                | "extended";
                                            start?: number;
                                            status_type?: "default" | "custom";
                                            target?: number;
                                        };
                                        content?: {
                                            style?: {
                                                align?: number;
                                                done?: boolean;
                                                folded?: boolean;
                                                language?: number;
                                                wrap?: boolean;
                                            };
                                            elements: Array<{
                                                text_run?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_user?: {
                                                    user_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                mention_doc?: {
                                                    token: string;
                                                    obj_type: number;
                                                    url: string;
                                                    title?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                reminder?: {
                                                    create_user_id: string;
                                                    is_notify?: boolean;
                                                    is_whole_day?: boolean;
                                                    expire_time: string;
                                                    notify_time: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                file?: {
                                                    file_token?: string;
                                                    source_block_id?: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                undefined?: {};
                                                inline_block?: {
                                                    block_id: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                                equation?: {
                                                    content: string;
                                                    text_element_style?: {
                                                        bold?: boolean;
                                                        italic?: boolean;
                                                        strikethrough?: boolean;
                                                        underline?: boolean;
                                                        inline_code?: boolean;
                                                        background_color?: number;
                                                        text_color?: number;
                                                        link?: { url: string };
                                                        comment_ids?: Array<string>;
                                                    };
                                                };
                                            }>;
                                        };
                                    };
                                    okr_progress?: {};
                                    comment_ids?: Array<string>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 文档
         */
        document: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document/create document }
             *
             * 创建文档
             *
             * 创建新版文档，文档标题和目录可选。
             *
             * 频率限制：单个应用调用频率上限为每秒 3 次。
             *
             * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcnyoyCgwS8ywWwMtQr9yjZ2f)，了解相关规则及约束。
             */
            create: async (
                payload?: {
                    data?: { folder_token?: string; title?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                document?: {
                                    document_id?: string;
                                    revision_id?: number;
                                    title?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document/get document }
             *
             * 获取文档基本信息
             *
             * 获取文档最新版本号、标题等
             *
             * 频率限制：单个应用调用频率上限为每秒 5 次。
             *
             * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcnWKAE4aSaIU4GcdLInSaVde)，了解相关规则及约束。
             */
            get: async (
                payload?: {
                    path: { document_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                document?: {
                                    document_id?: string;
                                    revision_id?: number;
                                    title?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document&apiName=raw_content&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document/raw_content document }
             *
             * 获取文档纯文本内容
             *
             * 获取文档的纯文本内容。
             *
             * 频率限制：单个应用调用频率上限为每秒 5 次。
             *
             * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcnQeqI4wiKIMis6GNvCOBuqg)，了解相关规则及约束。
             */
            rawContent: async (
                payload?: {
                    params?: { lang?: number };
                    path: { document_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { content?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id/raw_content`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * 云文档-文档
     */
    drive = {
        /**
         * 导出
         */
        exportTask: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=export_task&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/create document }
             *
             * 创建导出任务
             *
             * 创建导出任务，将云文件导出为指定格式的本地文件。该接口为异步接口，需要通过轮询 [查询导出任务结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/get) 接口获取任务结果。
             */
            create: async (
                payload?: {
                    data: {
                        file_extension: "docx" | "pdf" | "xlsx" | "csv";
                        token: string;
                        type: "doc" | "sheet" | "bitable" | "docx";
                        sub_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { ticket?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/export_tasks`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=export_task&apiName=download&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/download document }
             *
             * 下载导出文件
             *
             * 根据任务导出结果的token，下载导出文件
             */
            download: async (
                payload?: {
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/export_tasks/file/:file_token/download`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        return new Promise((resolve, reject) => {
                            const writableStream =
                                fs.createWriteStream(filePath);
                            writableStream.on("finish", () => {
                                resolve(filePath);
                            });
                            writableStream.on("error", (e) => {
                                reject(e);
                            });
                            res.pipe(writableStream);
                        });
                    },
                };
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=export_task&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/get document }
             *
             * 查询导出任务结果
             *
             * 根据[创建导出任务](/ssl::ttdoc//uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/create)的ticket查询导出任务的结果，前提条件需要先调用创建导出任务接口。;;通过该接口获取到下载文件的 token 后调用[下载导出文件接口](/ssl::ttdoc//uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/download)将文件进行下载
             */
            get: async (
                payload?: {
                    params: { token: string };
                    path?: { ticket?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                result?: {
                                    file_extension:
                                        | "docx"
                                        | "pdf"
                                        | "xlsx"
                                        | "csv";
                                    type: "doc" | "sheet" | "bitable" | "docx";
                                    file_name?: string;
                                    file_token?: string;
                                    file_size?: number;
                                    job_error_msg?: string;
                                    job_status?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/export_tasks/:ticket`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 评论
         */
        fileComment: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/create document }
             *
             * 添加评论
             *
             * 往云文档添加一条全局评论。
             */
            create: async (
                payload?: {
                    data?: {
                        comment_id?: string;
                        user_id?: string;
                        create_time?: number;
                        update_time?: number;
                        is_solved?: boolean;
                        solved_time?: number;
                        solver_user_id?: string;
                        has_more?: boolean;
                        page_token?: string;
                        is_whole?: boolean;
                        quote?: string;
                        reply_list?: {
                            replies: Array<{
                                reply_id?: string;
                                user_id?: string;
                                create_time?: number;
                                update_time?: number;
                                content: {
                                    elements: Array<{
                                        type:
                                            | "text_run"
                                            | "docs_link"
                                            | "person";
                                        text_run?: { text: string };
                                        docs_link?: { url: string };
                                        person?: { user_id: string };
                                    }>;
                                };
                                extra?: { image_list?: Array<string> };
                            }>;
                        };
                    };
                    params: {
                        file_type: "doc" | "docx";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                comment_id?: string;
                                user_id?: string;
                                create_time?: number;
                                update_time?: number;
                                is_solved?: boolean;
                                solved_time?: number;
                                solver_user_id?: string;
                                has_more?: boolean;
                                page_token?: string;
                                is_whole?: boolean;
                                quote?: string;
                                reply_list?: {
                                    replies: Array<{
                                        reply_id?: string;
                                        user_id?: string;
                                        create_time?: number;
                                        update_time?: number;
                                        content: {
                                            elements: Array<{
                                                type:
                                                    | "text_run"
                                                    | "docs_link"
                                                    | "person";
                                                text_run?: { text: string };
                                                docs_link?: { url: string };
                                                person?: { user_id: string };
                                            }>;
                                        };
                                        extra?: { image_list?: Array<string> };
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/comments`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/get document }
             *
             * 获取评论
             *
             * 获取云文档中的某条评论。
             */
            get: async (
                payload?: {
                    params: {
                        file_type: "doc" | "sheet" | "file" | "docx";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { file_token: string; comment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                comment_id?: string;
                                user_id?: string;
                                create_time?: number;
                                update_time?: number;
                                is_solved?: boolean;
                                solved_time?: number;
                                solver_user_id?: string;
                                has_more?: boolean;
                                page_token?: string;
                                is_whole?: boolean;
                                quote?: string;
                                reply_list?: {
                                    replies: Array<{
                                        reply_id?: string;
                                        user_id?: string;
                                        create_time?: number;
                                        update_time?: number;
                                        content: {
                                            elements: Array<{
                                                type:
                                                    | "text_run"
                                                    | "docs_link"
                                                    | "person";
                                                text_run?: { text: string };
                                                docs_link?: { url: string };
                                                person?: { user_id: string };
                                            }>;
                                        };
                                        extra?: { image_list?: Array<string> };
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/comments/:comment_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params: {
                        file_type: "doc" | "sheet" | "file" | "docx";
                        is_whole?: boolean;
                        is_solved?: boolean;
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/drive/v1/files/:file_token/comments`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    comment_id?: string;
                                                    user_id?: string;
                                                    create_time?: number;
                                                    update_time?: number;
                                                    is_solved?: boolean;
                                                    solved_time?: number;
                                                    solver_user_id?: string;
                                                    has_more?: boolean;
                                                    page_token?: string;
                                                    is_whole?: boolean;
                                                    quote?: string;
                                                    reply_list?: {
                                                        replies: Array<{
                                                            reply_id?: string;
                                                            user_id?: string;
                                                            create_time?: number;
                                                            update_time?: number;
                                                            content: {
                                                                elements: Array<{
                                                                    type:
                                                                        | "text_run"
                                                                        | "docs_link"
                                                                        | "person";
                                                                    text_run?: {
                                                                        text: string;
                                                                    };
                                                                    docs_link?: {
                                                                        url: string;
                                                                    };
                                                                    person?: {
                                                                        user_id: string;
                                                                    };
                                                                }>;
                                                            };
                                                            extra?: {
                                                                image_list?: Array<string>;
                                                            };
                                                        }>;
                                                    };
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/list document }
             *
             * 分页获取文档评论
             *
             * 该接口用于根据文档 token 分页获取文档评论。
             */
            list: async (
                payload?: {
                    params: {
                        file_type: "doc" | "sheet" | "file" | "docx";
                        is_whole?: boolean;
                        is_solved?: boolean;
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    comment_id?: string;
                                    user_id?: string;
                                    create_time?: number;
                                    update_time?: number;
                                    is_solved?: boolean;
                                    solved_time?: number;
                                    solver_user_id?: string;
                                    has_more?: boolean;
                                    page_token?: string;
                                    is_whole?: boolean;
                                    quote?: string;
                                    reply_list?: {
                                        replies: Array<{
                                            reply_id?: string;
                                            user_id?: string;
                                            create_time?: number;
                                            update_time?: number;
                                            content: {
                                                elements: Array<{
                                                    type:
                                                        | "text_run"
                                                        | "docs_link"
                                                        | "person";
                                                    text_run?: { text: string };
                                                    docs_link?: { url: string };
                                                    person?: {
                                                        user_id: string;
                                                    };
                                                }>;
                                            };
                                            extra?: {
                                                image_list?: Array<string>;
                                            };
                                        }>;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/comments`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/patch document }
             *
             * 解决/恢复 评论
             *
             * 解决或恢复云文档中的评论。
             */
            patch: async (
                payload?: {
                    data: { is_solved: boolean };
                    params: { file_type: "doc" | "sheet" | "file" | "docx" };
                    path: { file_token: string; comment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/comments/:comment_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 评论
         */
        fileCommentReply: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment.reply&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment-reply/delete document }
             *
             * 删除回复
             *
             * 删除云文档中的某条回复。
             */
            delete: async (
                payload?: {
                    params: { file_type: "doc" | "sheet" | "file" | "docx" };
                    path: {
                        file_token: string;
                        comment_id: string;
                        reply_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/comments/:comment_id/replies/:reply_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment.reply&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment-reply/update document }
             *
             * 更新回复
             *
             * 更新云文档中的某条回复。
             */
            update: async (
                payload?: {
                    data: {
                        content: {
                            elements: Array<{
                                type: "text_run" | "docs_link" | "person";
                                text_run?: { text: string };
                                docs_link?: { url: string };
                                person?: { user_id: string };
                            }>;
                        };
                    };
                    params: {
                        file_type: "doc" | "sheet" | "file" | "docx";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: {
                        file_token: string;
                        comment_id: string;
                        reply_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/comments/:comment_id/replies/:reply_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 事件
         */
        file: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=copy&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/copy document }
             *
             * 复制文件
             *
             * 将文件复制到用户云空间的其他文件夹中。不支持复制文件夹。;;如果目标文件夹是我的空间，则复制的文件会在「**我的空间**」的「**归我所有**」列表里。
             *
             * 该接口不支持并发拷贝多个文件，且调用频率上限为 5QPS 且 10000次/天
             */
            copy: async (
                payload?: {
                    data: {
                        name: string;
                        type?:
                            | "file"
                            | "doc"
                            | "sheet"
                            | "bitable"
                            | "docx"
                            | "mindnote";
                        folder_token: string;
                        extra?: Array<{ key: string; value: string }>;
                    };
                    path?: { file_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                file?: {
                                    token: string;
                                    name: string;
                                    type: string;
                                    parent_token?: string;
                                    url?: string;
                                    shortcut_info?: {
                                        target_type: string;
                                        target_token: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/copy`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=create_folder&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/create_folder document }
             *
             * 新建文件夹
             *
             * 在用户云空间的指定文件夹中创建一个新的空文件夹。
             *
             * 该接口不支持并发创建，且调用频率上限为 5QPS 以及 10000次/天
             */
            createFolder: async (
                payload?: {
                    data: { name: string; folder_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { token?: string; url?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/create_folder`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/delete document }
             *
             * 删除文件
             *
             * 删除用户在云空间内的文件或者文件夹。文件或者文件夹被删除后，会进入用户回收站里。
             *
             * 该接口不支持并发调用，且调用频率上限为5QPS。删除文件夹会异步执行并返回一个task_id，可以使用[task_check](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/task_check)接口查询任务执行状态。
             *
             * 要删除文件需要确保应用具有下述两种权限之一：;1. 该应用是文件所有者并且具有该文件所在父文件夹的编辑权限。;2. 该应用并非文件所有者，但是是该文件所在父文件夹的所有者或者拥有该父文件夹的所有权限（full access）。
             */
            delete: async (
                payload?: {
                    params: {
                        type:
                            | "file"
                            | "docx"
                            | "bitable"
                            | "folder"
                            | "doc"
                            | "sheet"
                            | "mindnote"
                            | "shortcut";
                    };
                    path?: { file_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { task_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=download&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/download document }
             *
             * 下载文件
             *
             * 使用该接口可以下载在云空间目录下的文件（不含飞书文档/表格/思维导图等在线文档）。支持range下载。
             *
             * 该接口支持调用频率上限为5QPS
             */
            download: async (
                payload?: {
                    path?: { file_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/download`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        return new Promise((resolve, reject) => {
                            const writableStream =
                                fs.createWriteStream(filePath);
                            writableStream.on("finish", () => {
                                resolve(filePath);
                            });
                            writableStream.on("error", (e) => {
                                reject(e);
                            });
                            res.pipe(writableStream);
                        });
                    },
                };
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        folder_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/drive/v1/files`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                files?: Array<{
                                                    token: string;
                                                    name: string;
                                                    type: string;
                                                    parent_token?: string;
                                                    url?: string;
                                                    shortcut_info?: {
                                                        target_type: string;
                                                        target_token: string;
                                                    };
                                                }>;
                                                next_page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list document }
             *
             * 获取文件夹下的清单
             *
             * 获取用户云空间中指定文件夹下的文件清单。清单类型包括文件、各种在线文档（文档、电子表格、多维表格、思维笔记）、文件夹和快捷方式。该接口支持分页，但是不会递归的获取子文件夹的清单。
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        folder_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                files?: Array<{
                                    token: string;
                                    name: string;
                                    type: string;
                                    parent_token?: string;
                                    url?: string;
                                    shortcut_info?: {
                                        target_type: string;
                                        target_token: string;
                                    };
                                }>;
                                next_page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=move&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/move document }
             *
             * 移动文件
             *
             * 将文件或者文件夹移动到用户云空间的其他位置。
             */
            move: async (
                payload?: {
                    data?: {
                        type?:
                            | "file"
                            | "docx"
                            | "bitable"
                            | "doc"
                            | "sheet"
                            | "mindnote"
                            | "folder";
                        folder_token?: string;
                    };
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { task_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/move`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=subscribe&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/subscribe document }
             *
             * 订阅云文档事件
             *
             * 该接口仅支持**文档拥有者**订阅自己文档的通知事件，可订阅的文档类型为**旧版文档**、**新版文档**、**电子表格**和**多维表格**。在调用该接口之前请确保正确[配置事件回调网址和订阅事件类型](https://open.feishu.cn/document/ukTMukTMukTM/uUTNz4SN1MjL1UzM#2eb3504a)(暂不支持单独订阅文档维度的某类事件)，事件类型参考[事件列表](https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-list)。
             */
            subscribe: async (
                payload?: {
                    params: { file_type: "doc" | "docx" | "sheet" | "bitable" };
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/subscribe`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=task_check&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/task_check document }
             *
             * 查询异步任务状态
             *
             * 查询删除文件夹等异步任务的状态信息。
             */
            taskCheck: async (
                payload?: {
                    params: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { status?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/task_check`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=upload_all&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_all document }
             *
             * 上传文件
             *
             * 向云空间指定目录下上传一个小文件。
             *
             * 该接口支持调用频率上限为5QPS
             *
             * 请不要使用这个接口上传大于20MB的文件，如果有这个需求可以尝试使用[分片上传接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/multipart-upload-file-/introduction)。
             */
            uploadAll: async (
                payload?: {
                    data: {
                        file_name: string;
                        parent_type: "explorer";
                        parent_node: string;
                        size: number;
                        checksum?: string;
                        file: Buffer;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { file_token?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/upload_all`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=upload_finish&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_finish document }
             *
             * 分片上传文件（完成上传）
             *
             * 触发完成上传。
             *
             * 该接口不支持太高的并发，且调用频率上限为5QPS
             */
            uploadFinish: async (
                payload?: {
                    data: { upload_id: string; block_num: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { file_token?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/upload_finish`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=upload_part&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_part document }
             *
             * 分片上传文件（上传分片）
             *
             * 上传对应的文件块。
             *
             * 该接口不支持太高的并发，且调用频率上限为5QPS
             */
            uploadPart: async (
                payload?: {
                    data: {
                        upload_id: string;
                        seq: number;
                        size: number;
                        checksum?: string;
                        file: Buffer;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/upload_part`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=upload_prepare&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_prepare document }
             *
             * 分片上传文件（预上传）
             *
             * 发送初始化请求获取上传事务ID和分块策略，目前是以4MB大小进行定长分片。
             *
             * 该接口不支持太高的并发，且调用频率上限为5QPS
             *
             * 你在24小时内可保存上传事务ID和上传进度，以便可以恢复上传
             */
            uploadPrepare: async (
                payload?: {
                    data: {
                        file_name: string;
                        parent_type: "explorer";
                        parent_node: string;
                        size: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                upload_id?: string;
                                block_size?: number;
                                block_num?: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/upload_prepare`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * file.statistics
         */
        fileStatistics: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.statistics&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-statistics/get document }
             *
             * 获取文件统计信息
             *
             * 此接口用于获取文件统计信息，包括文档阅读人数、次数和点赞数。
             */
            get: async (
                payload?: {
                    params: {
                        file_type:
                            | "doc"
                            | "sheet"
                            | "mindnote"
                            | "bitable"
                            | "wiki"
                            | "file"
                            | "docx";
                    };
                    path?: { file_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                file_token?: string;
                                file_type?: string;
                                statistics?: {
                                    uv?: number;
                                    pv?: number;
                                    like_count?: number;
                                    timestamp?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/statistics`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 订阅
         */
        fileSubscription: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.subscription&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-subscription/create document }
             *
             * 创建订阅
             *
             * 订阅文档中的变更事件，当前支持文档评论订阅，订阅后文档评论更新会有“云文档助手”推送给订阅的用户
             */
            create: async (
                payload?: {
                    data: {
                        subscription_id?: string;
                        subscription_type: "comment_update";
                        is_subcribe?: boolean;
                        file_type: "doc" | "docx" | "wiki";
                    };
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                subscription?: {
                                    subscription_id?: string;
                                    subscription_type?: "comment_update";
                                    is_subcribe?: boolean;
                                    file_type: "doc" | "docx" | "wiki";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/subscriptions`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.subscription&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-subscription/get document }
             *
             * 获取订阅状态
             *
             * 根据订阅ID获取该订阅的状态
             */
            get: async (
                payload?: {
                    data: {
                        subscription_id?: string;
                        subscription_type?: "comment_update";
                        is_subcribe?: boolean;
                        file_type: "doc" | "docx" | "wiki";
                    };
                    path?: { file_token?: string; subscription_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                subscription?: {
                                    subscription_id?: string;
                                    subscription_type?: "comment_update";
                                    is_subcribe?: boolean;
                                    file_type: "doc" | "docx" | "wiki";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/subscriptions/:subscription_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.subscription&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-subscription/patch document }
             *
             * 更新订阅状态
             *
             * 根据订阅ID更新订阅状态
             */
            patch: async (
                payload?: {
                    data: {
                        is_subscribe: boolean;
                        file_type: "doc" | "docx" | "wiki";
                    };
                    path?: { file_token?: string; subscription_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                subscription?: {
                                    subscription_id?: string;
                                    subscription_type?: "comment_update";
                                    is_subcribe?: boolean;
                                    file_type: "doc" | "docx" | "wiki";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/subscriptions/:subscription_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 文档版本
         */
        fileVersion: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.version&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-version/create document }
             *
             * 创建文档版本
             *
             * 创建文档版本。
             */
            create: async (
                payload?: {
                    data?: {
                        name?: string;
                        version?: string;
                        parent_token?: string;
                        owner_id?: string;
                        creator_id?: string;
                        create_time?: string;
                        update_time?: string;
                        status?: "0" | "1" | "2";
                        obj_type?: "doc" | "sheet" | "bitable" | "docx";
                        parent_type?: "doc" | "sheet" | "bitable" | "docx";
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                name?: string;
                                version?: string;
                                parent_token?: string;
                                owner_id?: string;
                                creator_id?: string;
                                create_time?: string;
                                update_time?: string;
                                status?: "0" | "1" | "2";
                                obj_type?: "doc" | "sheet" | "bitable" | "docx";
                                parent_type?:
                                    | "doc"
                                    | "sheet"
                                    | "bitable"
                                    | "docx";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/versions`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.version&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-version/delete document }
             *
             * 删除文档版本
             *
             * 删除文档版本。
             */
            delete: async (
                payload?: {
                    params: {
                        obj_type: "doc" | "sheet" | "bitable" | "docx";
                        user_id_type?: "open_id" | "union_id" | "user_id";
                    };
                    path: { file_token: string; version_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/versions/:version_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            getWithIterator: async (
                payload?: {
                    params: {
                        obj_type: "doc" | "sheet" | "bitable" | "docx";
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { file_token: string; version_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/drive/v1/files/:file_token/versions/:version_id`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                name?: string;
                                                version?: string;
                                                parent_token?: string;
                                                owner_id?: string;
                                                creator_id?: string;
                                                create_time?: string;
                                                update_time?: string;
                                                status?: "0" | "1" | "2";
                                                obj_type?:
                                                    | "doc"
                                                    | "sheet"
                                                    | "bitable"
                                                    | "docx";
                                                parent_type?:
                                                    | "doc"
                                                    | "sheet"
                                                    | "bitable"
                                                    | "docx";
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.version&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-version/get document }
             *
             * 获取文档版本
             *
             * 获取文档版本。
             */
            get: async (
                payload?: {
                    params: {
                        obj_type: "doc" | "sheet" | "bitable" | "docx";
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { file_token: string; version_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                name?: string;
                                version?: string;
                                parent_token?: string;
                                owner_id?: string;
                                creator_id?: string;
                                create_time?: string;
                                update_time?: string;
                                status?: "0" | "1" | "2";
                                obj_type?: "doc" | "sheet" | "bitable" | "docx";
                                parent_type?:
                                    | "doc"
                                    | "sheet"
                                    | "bitable"
                                    | "docx";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/versions/:version_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params: {
                        page_size: number;
                        page_token?: string;
                        obj_type: "doc" | "sheet" | "bitable" | "docx";
                        user_id_type?: "open_id" | "union_id" | "user_id";
                    };
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/drive/v1/files/:file_token/versions`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    name?: string;
                                                    version?: string;
                                                    parent_token?: string;
                                                    owner_id?: string;
                                                    creator_id?: string;
                                                    create_time?: string;
                                                    update_time?: string;
                                                    status?: "0" | "1" | "2";
                                                    obj_type?:
                                                        | "doc"
                                                        | "sheet"
                                                        | "bitable"
                                                        | "docx";
                                                    parent_type?:
                                                        | "doc"
                                                        | "sheet"
                                                        | "bitable"
                                                        | "docx";
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.version&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-version/list document }
             *
             * 获取文档版本列表
             *
             * 获取文档所有版本。
             */
            list: async (
                payload?: {
                    params: {
                        page_size: number;
                        page_token?: string;
                        obj_type: "doc" | "sheet" | "bitable" | "docx";
                        user_id_type?: "open_id" | "union_id" | "user_id";
                    };
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    name?: string;
                                    version?: string;
                                    parent_token?: string;
                                    owner_id?: string;
                                    creator_id?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    status?: "0" | "1" | "2";
                                    obj_type?:
                                        | "doc"
                                        | "sheet"
                                        | "bitable"
                                        | "docx";
                                    parent_type?:
                                        | "doc"
                                        | "sheet"
                                        | "bitable"
                                        | "docx";
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/versions`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 导入
         */
        importTask: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=import_task&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/create document }
             *
             * 创建导入任务
             *
             * 创建导入任务。支持导入为 doc、docx、sheet、bitable，参考[导入用户指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/import-user-guide)
             */
            create: async (
                payload?: {
                    data: {
                        file_extension: string;
                        file_token: string;
                        type: string;
                        file_name?: string;
                        point: { mount_type: number; mount_key: string };
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { ticket?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/import_tasks`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=import_task&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/get document }
             *
             * 查询导入结果
             *
             * 根据创建导入任务返回的 ticket 查询导入结果。
             */
            get: async (
                payload?: {
                    path: { ticket: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                result?: {
                                    ticket?: string;
                                    type: string;
                                    job_status?: number;
                                    job_error_msg?: string;
                                    token?: string;
                                    url?: string;
                                    extra?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/import_tasks/:ticket`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 分片上传
         */
        media: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=batch_get_tmp_download_url&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/batch_get_tmp_download_url document }
             *
             * 获取素材临时下载链接
             *
             * 通过file_token获取素材临时下载链接，链接时效性是24小时，过期失效。
             *
             * 该接口不支持太高的并发，且调用频率上限为5QPS
             */
            batchGetTmpDownloadUrl: async (
                payload?: {
                    params: { file_tokens: number; extra?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                tmp_download_urls?: Array<{
                                    file_token: string;
                                    tmp_download_url: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/medias/batch_get_tmp_download_url`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=download&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/download document }
             *
             * 下载素材
             *
             * 使用该接口可以下载素材。素材表示在各种创作容器里的文件，如Doc文档内的图片，文件均属于素材。支持range下载。
             *
             * 该接口不支持太高的并发，且调用频率上限为5QPS
             */
            download: async (
                payload?: {
                    params?: { extra?: string };
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/medias/:file_token/download`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        return new Promise((resolve, reject) => {
                            const writableStream =
                                fs.createWriteStream(filePath);
                            writableStream.on("finish", () => {
                                resolve(filePath);
                            });
                            writableStream.on("error", (e) => {
                                reject(e);
                            });
                            res.pipe(writableStream);
                        });
                    },
                };
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=upload_all&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_all document }
             *
             * 上传素材
             *
             * 将文件、图片、视频等素材文件上传到指定云文档中。素材文件在云空间中不会显示，只会显示在对应云文档中。
             *
             * 该接口支持调用频率上限为5QPS
             *
             * 请不要使用这个接口上传大于20MB的文件，如果有这个需求可以尝试使用[分片上传接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/multipart-upload-media/introduction)。
             */
            uploadAll: async (
                payload?: {
                    data: {
                        file_name: string;
                        parent_type:
                            | "doc_image"
                            | "docx_image"
                            | "sheet_image"
                            | "doc_file"
                            | "docx_file"
                            | "sheet_file"
                            | "vc_virtual_background"
                            | "bitable_image"
                            | "bitable_file"
                            | "moments"
                            | "ccm_import_open";
                        parent_node: string;
                        size: number;
                        checksum?: string;
                        extra?: string;
                        file: Buffer;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { file_token?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/medias/upload_all`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=upload_finish&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_finish document }
             *
             * 分片上传素材（完成上传）
             *
             * 触发完成上传。
             *
             * 该接口不支持太高的并发，且调用频率上限为5QPS
             */
            uploadFinish: async (
                payload?: {
                    data: { upload_id: string; block_num: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { file_token?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/medias/upload_finish`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=upload_part&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_part document }
             *
             * 分片上传素材（上传分片）
             *
             * 上传对应的文件块。
             *
             * 该接口不支持太高的并发，且调用频率上限为5QPS
             */
            uploadPart: async (
                payload?: {
                    data: {
                        upload_id: string;
                        seq: number;
                        size: number;
                        checksum?: string;
                        file: Buffer;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/medias/upload_part`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=upload_prepare&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_prepare document }
             *
             * 分片上传素材（预上传）
             *
             * 发送初始化请求获取上传事务ID和分块策略，目前是以4MB大小进行定长分片。
             *
             * 该接口不支持太高的并发，且调用频率上限为5QPS
             *
             * 您在24小时内可保存上传事务ID和上传进度，以便可以恢复上传
             */
            uploadPrepare: async (
                payload?: {
                    data: {
                        file_name: string;
                        parent_type:
                            | "doc_image"
                            | "docx_image"
                            | "sheet_image"
                            | "doc_file"
                            | "docx_file"
                            | "sheet_file"
                            | "vc_virtual_background"
                            | "bitable_image"
                            | "bitable_file"
                            | "moments"
                            | "ccm_import_open";
                        parent_node: string;
                        size: number;
                        extra?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                upload_id?: string;
                                block_size?: number;
                                block_num?: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/medias/upload_prepare`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * meta
         */
        meta: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=meta&apiName=batch_query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/meta/batch_query document }
             *
             * 获取文档元数据
             *
             * 该接口用于根据 token 获取各类文件的元数据
             */
            batchQuery: async (
                payload?: {
                    data: {
                        request_docs: Array<{
                            doc_token: string;
                            doc_type:
                                | "doc"
                                | "sheet"
                                | "bitable"
                                | "mindnote"
                                | "file"
                                | "wiki"
                                | "docx"
                                | "folder";
                        }>;
                        with_url?: boolean;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                metas: Array<{
                                    doc_token: string;
                                    doc_type: string;
                                    title: string;
                                    owner_id: string;
                                    create_time: string;
                                    latest_modify_user: string;
                                    latest_modify_time: string;
                                    url: string;
                                    sec_label_name?: string;
                                }>;
                                failed_list?: Array<{
                                    token: string;
                                    code: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/metas/batch_query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 成员
         */
        permissionMember: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.member&apiName=auth&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=auth&project=drive&resource=permission.member&version=v1 document }
             */
            auth: async (
                payload?: {
                    params: {
                        type:
                            | "doc"
                            | "sheet"
                            | "file"
                            | "wiki"
                            | "bitable"
                            | "docx"
                            | "mindnote"
                            | "minutes";
                        action:
                            | "view"
                            | "edit"
                            | "share"
                            | "comment"
                            | "export"
                            | "copy"
                            | "print";
                    };
                    path: { token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { auth_result: boolean };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/permissions/:token/members/auth`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.member&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/create document }
             *
             * 增加协作者权限
             *
             * 该接口用于根据 filetoken 给用户增加文档的权限。
             */
            create: async (
                payload?: {
                    data: {
                        member_type:
                            | "email"
                            | "openid"
                            | "openchat"
                            | "opendepartmentid"
                            | "userid";
                        member_id: string;
                        perm: "view" | "edit" | "full_access";
                    };
                    params: {
                        type:
                            | "doc"
                            | "sheet"
                            | "file"
                            | "wiki"
                            | "bitable"
                            | "docx"
                            | "folder"
                            | "mindnote"
                            | "minutes";
                        need_notification?: boolean;
                    };
                    path: { token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                member?: {
                                    member_type:
                                        | "email"
                                        | "openid"
                                        | "openchat"
                                        | "opendepartmentid"
                                        | "userid";
                                    member_id: string;
                                    perm: "view" | "edit" | "full_access";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/permissions/:token/members`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.member&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/delete document }
             *
             * 移除协作者权限
             *
             * 该接口用于根据 filetoken 移除文档协作者的权限。
             */
            delete: async (
                payload?: {
                    params: {
                        type:
                            | "doc"
                            | "sheet"
                            | "file"
                            | "wiki"
                            | "bitable"
                            | "docx"
                            | "folder"
                            | "mindnote"
                            | "minutes";
                        member_type:
                            | "email"
                            | "openid"
                            | "openchat"
                            | "opendepartmentid"
                            | "userid";
                    };
                    path: { token: string; member_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/permissions/:token/members/:member_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.member&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/list document }
             *
             * 获取协作者列表
             *
             * 该接口用于根据 filetoken 查询协作者
             *
             * - 你能获取到协作者列表的前提是你对该文档有分享权限;- 目前仅支持人、群、组织架构三种类型的协作者
             */
            list: async (
                payload?: {
                    params: {
                        type:
                            | "doc"
                            | "sheet"
                            | "file"
                            | "wiki"
                            | "bitable"
                            | "docx"
                            | "mindnote"
                            | "minutes";
                        fields?: string;
                    };
                    path: { token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    member_type:
                                        | "email"
                                        | "openid"
                                        | "openchat"
                                        | "opendepartmentid"
                                        | "userid";
                                    member_id: string;
                                    perm: "view" | "edit" | "full_access";
                                    type?: "user" | "chat" | "department";
                                    name?: string;
                                    avatar?: string;
                                    external_label?: boolean;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/permissions/:token/members`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.member&apiName=transfer_owner&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=transfer_owner&project=drive&resource=permission.member&version=v1 document }
             */
            transferOwner: async (
                payload?: {
                    data: {
                        member_type: "email" | "openid" | "userid";
                        member_id: string;
                    };
                    params: {
                        type:
                            | "doc"
                            | "sheet"
                            | "file"
                            | "wiki"
                            | "bitable"
                            | "docx"
                            | "mindnote"
                            | "minutes";
                        need_notification?: boolean;
                        remove_old_owner?: boolean;
                    };
                    path: { token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/permissions/:token/members/transfer_owner`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.member&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/update document }
             *
             * 更新协作者权限
             *
             * 该接口用于根据 filetoken 更新文档协作者的权限。
             *
             * 该接口要求文档协作者已存在，如还未对文档协作者授权请先调用[「增加权限」 ](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/create)接口进行授权。
             */
            update: async (
                payload?: {
                    data: {
                        member_type:
                            | "email"
                            | "openid"
                            | "openchat"
                            | "opendepartmentid"
                            | "userid";
                        perm: "view" | "edit" | "full_access";
                    };
                    params: {
                        need_notification?: boolean;
                        type:
                            | "doc"
                            | "sheet"
                            | "file"
                            | "wiki"
                            | "bitable"
                            | "docx"
                            | "mindnote"
                            | "minutes";
                    };
                    path: { token: string; member_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                member?: {
                                    member_type:
                                        | "email"
                                        | "openid"
                                        | "openchat"
                                        | "opendepartmentid"
                                        | "userid";
                                    member_id: string;
                                    perm: "view" | "edit" | "full_access";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/permissions/:token/members/:member_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 设置
         */
        permissionPublic: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.public&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-public/get document }
             *
             * 获取云文档权限设置
             *
             * 该接口用于根据 filetoken 获取云文档的权限设置。
             */
            get: async (
                payload?: {
                    params: {
                        type:
                            | "doc"
                            | "sheet"
                            | "file"
                            | "wiki"
                            | "bitable"
                            | "docx"
                            | "mindnote"
                            | "minutes";
                    };
                    path: { token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                permission_public?: {
                                    external_access?: boolean;
                                    security_entity?:
                                        | "anyone_can_view"
                                        | "anyone_can_edit"
                                        | "only_full_access";
                                    comment_entity?:
                                        | "anyone_can_view"
                                        | "anyone_can_edit";
                                    share_entity?:
                                        | "anyone"
                                        | "same_tenant"
                                        | "only_full_access";
                                    link_share_entity?:
                                        | "tenant_readable"
                                        | "tenant_editable"
                                        | "anyone_readable"
                                        | "anyone_editable"
                                        | "closed";
                                    invite_external?: boolean;
                                    lock_switch?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/permissions/:token/public`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.public&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-public/patch document }
             *
             * 更新云文档权限设置
             *
             * 该接口用于根据 filetoken 更新云文档的权限设置。
             */
            patch: async (
                payload?: {
                    data?: {
                        external_access?: boolean;
                        security_entity?:
                            | "anyone_can_view"
                            | "anyone_can_edit"
                            | "only_full_access";
                        comment_entity?: "anyone_can_view" | "anyone_can_edit";
                        share_entity?:
                            | "anyone"
                            | "same_tenant"
                            | "only_full_access";
                        link_share_entity?:
                            | "tenant_readable"
                            | "tenant_editable"
                            | "anyone_readable"
                            | "anyone_editable"
                            | "closed";
                        invite_external?: boolean;
                    };
                    params: {
                        type:
                            | "doc"
                            | "sheet"
                            | "file"
                            | "wiki"
                            | "bitable"
                            | "docx"
                            | "mindnote"
                            | "minutes";
                    };
                    path: { token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                permission_public?: {
                                    external_access?: boolean;
                                    security_entity?:
                                        | "anyone_can_view"
                                        | "anyone_can_edit"
                                        | "only_full_access";
                                    comment_entity?:
                                        | "anyone_can_view"
                                        | "anyone_can_edit";
                                    share_entity?:
                                        | "anyone"
                                        | "same_tenant"
                                        | "only_full_access";
                                    link_share_entity?:
                                        | "tenant_readable"
                                        | "tenant_editable"
                                        | "anyone_readable"
                                        | "anyone_editable"
                                        | "closed";
                                    invite_external?: boolean;
                                    lock_switch?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/permissions/:token/public`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
         
         */
    edu = {};
    /**
     * 智能人事
     */
    ehr = {
        /**
         * 飞书人事（标准版)
         */
        attachment: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=ehr&resource=attachment&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/ehr/ehr-v1/attachment/get document }
             *
             * 下载附件
             *
             * 根据文件 token 下载文件。;;调用 「批量获取员工花名册信息」接口的返回值中，「文件」类型的字段 id，即是文件 token
             *
             * ![image.png](//sf1-ttcdn-tos.pstatp.com/obj/open-platform-opendoc/bed391d2a8ce6ed2d5985ea69bf92850_9GY1mnuDXP.png)
             */
            get: async (
                payload?: {
                    path: { token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/ehr/v1/attachments/:token`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        return new Promise((resolve, reject) => {
                            const writableStream =
                                fs.createWriteStream(filePath);
                            writableStream.on("finish", () => {
                                resolve(filePath);
                            });
                            writableStream.on("error", (e) => {
                                reject(e);
                            });
                            res.pipe(writableStream);
                        });
                    },
                };
            },
        },
        /**
         * 飞书人事（标准版)
         */
        employee: {
            listWithIterator: async (
                payload?: {
                    params?: {
                        view?: "basic" | "full";
                        status?: number;
                        type?: number;
                        start_time?: string;
                        end_time?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        user_ids?: number;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/ehr/v1/employees`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    user_id?: string;
                                                    system_fields?: {
                                                        name?: string;
                                                        en_name?: string;
                                                        email?: string;
                                                        mobile?: string;
                                                        department_id?: string;
                                                        manager?: {
                                                            user_id?: string;
                                                            name?: string;
                                                            en_name?: string;
                                                        };
                                                        job?: {
                                                            id?: number;
                                                            name?: string;
                                                        };
                                                        job_level?: {
                                                            id?: number;
                                                            name?: string;
                                                        };
                                                        work_location?: {
                                                            id?: number;
                                                            name?: string;
                                                        };
                                                        gender?: number;
                                                        birthday?: string;
                                                        native_region?: {
                                                            iso_code?: string;
                                                            name?: string;
                                                        };
                                                        ethnicity?: number;
                                                        marital_status?: number;
                                                        political_status?: number;
                                                        entered_workforce_date?: string;
                                                        id_type?: number;
                                                        id_number?: string;
                                                        hukou_type?: number;
                                                        hukou_location?: string;
                                                        bank_account_number?: string;
                                                        bank_name?: string;
                                                        social_security_account?: string;
                                                        provident_fund_account?: string;
                                                        employee_no?: string;
                                                        employee_type?: number;
                                                        status?: number;
                                                        hire_date?: string;
                                                        probation_months?: number;
                                                        conversion_date?: string;
                                                        application?: number;
                                                        application_status?: number;
                                                        last_day?: string;
                                                        departure_type?: number;
                                                        departure_reason?: number;
                                                        departure_notes?: string;
                                                        contract_company?: {
                                                            id?: number;
                                                            name?: string;
                                                        };
                                                        contract_type?: number;
                                                        contract_start_date?: string;
                                                        contract_expiration_date?: string;
                                                        contract_sign_times?: number;
                                                        personal_email?: string;
                                                        family_address?: string;
                                                        primary_emergency_contact?: {
                                                            name?: string;
                                                            relationship?: number;
                                                            mobile?: string;
                                                        };
                                                        emergency_contact?: Array<{
                                                            name?: string;
                                                            relationship?: number;
                                                            mobile?: string;
                                                        }>;
                                                        highest_level_of_edu?: {
                                                            level?: number;
                                                            school?: string;
                                                            major?: string;
                                                            degree?: number;
                                                            start?: string;
                                                            end?: string;
                                                        };
                                                        education?: Array<{
                                                            level?: number;
                                                            school?: string;
                                                            major?: string;
                                                            degree?: number;
                                                            start?: string;
                                                            end?: string;
                                                        }>;
                                                        former_work_exp?: {
                                                            company?: string;
                                                            department?: string;
                                                            job?: string;
                                                            start?: string;
                                                            end?: string;
                                                            description?: string;
                                                        };
                                                        work_exp?: Array<{
                                                            company?: string;
                                                            department?: string;
                                                            job?: string;
                                                            start?: string;
                                                            end?: string;
                                                            description?: string;
                                                        }>;
                                                        id_photo_po_side?: Array<{
                                                            id?: string;
                                                            mime_type?: string;
                                                            name?: string;
                                                            size?: number;
                                                        }>;
                                                        id_photo_em_side?: Array<{
                                                            id?: string;
                                                            mime_type?: string;
                                                            name?: string;
                                                            size?: number;
                                                        }>;
                                                        id_photo?: Array<{
                                                            id?: string;
                                                            mime_type?: string;
                                                            name?: string;
                                                            size?: number;
                                                        }>;
                                                        diploma_photo?: Array<{
                                                            id?: string;
                                                            mime_type?: string;
                                                            name?: string;
                                                            size?: number;
                                                        }>;
                                                        graduation_cert?: Array<{
                                                            id?: string;
                                                            mime_type?: string;
                                                            name?: string;
                                                            size?: number;
                                                        }>;
                                                        cert_of_merit?: Array<{
                                                            id?: string;
                                                            mime_type?: string;
                                                            name?: string;
                                                            size?: number;
                                                        }>;
                                                        offboarding_file?: Array<{
                                                            id?: string;
                                                            mime_type?: string;
                                                            name?: string;
                                                            size?: number;
                                                        }>;
                                                        cancel_onboarding_reason?: number;
                                                        cancel_onboarding_notes?: string;
                                                        employee_form_status?: number;
                                                        create_time?: number;
                                                        update_time?: number;
                                                    };
                                                    custom_fields?: Array<{
                                                        key?: string;
                                                        label?: string;
                                                        type?:
                                                            | "text"
                                                            | "date"
                                                            | "option"
                                                            | "file";
                                                        value?: string;
                                                    }>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=ehr&resource=employee&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/ehr/ehr-v1/employee/list document }
             *
             * 批量获取员工花名册信息
             *
             * 根据员工飞书用户 ID / 员工状态 / 雇员类型等搜索条件 ，批量获取员工花名册字段信息。字段包括「系统标准字段 / system_fields」和「自定义字段 / custom_fields」
             */
            list: async (
                payload?: {
                    params?: {
                        view?: "basic" | "full";
                        status?: number;
                        type?: number;
                        start_time?: string;
                        end_time?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        user_ids?: number;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    user_id?: string;
                                    system_fields?: {
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                        mobile?: string;
                                        department_id?: string;
                                        manager?: {
                                            user_id?: string;
                                            name?: string;
                                            en_name?: string;
                                        };
                                        job?: { id?: number; name?: string };
                                        job_level?: {
                                            id?: number;
                                            name?: string;
                                        };
                                        work_location?: {
                                            id?: number;
                                            name?: string;
                                        };
                                        gender?: number;
                                        birthday?: string;
                                        native_region?: {
                                            iso_code?: string;
                                            name?: string;
                                        };
                                        ethnicity?: number;
                                        marital_status?: number;
                                        political_status?: number;
                                        entered_workforce_date?: string;
                                        id_type?: number;
                                        id_number?: string;
                                        hukou_type?: number;
                                        hukou_location?: string;
                                        bank_account_number?: string;
                                        bank_name?: string;
                                        social_security_account?: string;
                                        provident_fund_account?: string;
                                        employee_no?: string;
                                        employee_type?: number;
                                        status?: number;
                                        hire_date?: string;
                                        probation_months?: number;
                                        conversion_date?: string;
                                        application?: number;
                                        application_status?: number;
                                        last_day?: string;
                                        departure_type?: number;
                                        departure_reason?: number;
                                        departure_notes?: string;
                                        contract_company?: {
                                            id?: number;
                                            name?: string;
                                        };
                                        contract_type?: number;
                                        contract_start_date?: string;
                                        contract_expiration_date?: string;
                                        contract_sign_times?: number;
                                        personal_email?: string;
                                        family_address?: string;
                                        primary_emergency_contact?: {
                                            name?: string;
                                            relationship?: number;
                                            mobile?: string;
                                        };
                                        emergency_contact?: Array<{
                                            name?: string;
                                            relationship?: number;
                                            mobile?: string;
                                        }>;
                                        highest_level_of_edu?: {
                                            level?: number;
                                            school?: string;
                                            major?: string;
                                            degree?: number;
                                            start?: string;
                                            end?: string;
                                        };
                                        education?: Array<{
                                            level?: number;
                                            school?: string;
                                            major?: string;
                                            degree?: number;
                                            start?: string;
                                            end?: string;
                                        }>;
                                        former_work_exp?: {
                                            company?: string;
                                            department?: string;
                                            job?: string;
                                            start?: string;
                                            end?: string;
                                            description?: string;
                                        };
                                        work_exp?: Array<{
                                            company?: string;
                                            department?: string;
                                            job?: string;
                                            start?: string;
                                            end?: string;
                                            description?: string;
                                        }>;
                                        id_photo_po_side?: Array<{
                                            id?: string;
                                            mime_type?: string;
                                            name?: string;
                                            size?: number;
                                        }>;
                                        id_photo_em_side?: Array<{
                                            id?: string;
                                            mime_type?: string;
                                            name?: string;
                                            size?: number;
                                        }>;
                                        id_photo?: Array<{
                                            id?: string;
                                            mime_type?: string;
                                            name?: string;
                                            size?: number;
                                        }>;
                                        diploma_photo?: Array<{
                                            id?: string;
                                            mime_type?: string;
                                            name?: string;
                                            size?: number;
                                        }>;
                                        graduation_cert?: Array<{
                                            id?: string;
                                            mime_type?: string;
                                            name?: string;
                                            size?: number;
                                        }>;
                                        cert_of_merit?: Array<{
                                            id?: string;
                                            mime_type?: string;
                                            name?: string;
                                            size?: number;
                                        }>;
                                        offboarding_file?: Array<{
                                            id?: string;
                                            mime_type?: string;
                                            name?: string;
                                            size?: number;
                                        }>;
                                        cancel_onboarding_reason?: number;
                                        cancel_onboarding_notes?: string;
                                        employee_form_status?: number;
                                        create_time?: number;
                                        update_time?: number;
                                    };
                                    custom_fields?: Array<{
                                        key?: string;
                                        label?: string;
                                        type?:
                                            | "text"
                                            | "date"
                                            | "option"
                                            | "file";
                                        value?: string;
                                    }>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/ehr/v1/employees`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
         
         */
    elearning = {};
    /**
     * 事件订阅
     */
    event = {
        /**
         * 事件订阅
         */
        outboundIp: {
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/event/v1/outbound_ip`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                ip_list?: Array<string>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=event&resource=outbound_ip&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-v1/outbound_ip/list document }
             *
             * 获取事件出口 IP
             *
             * 飞书开放平台向应用配置的回调地址推送事件时，是通过特定的 IP 发送出去的，应用可以通过本接口获取所有相关的 IP 地址。
             *
             * IP 地址有变更可能，建议应用每隔 6 小时定时拉取最新的 IP 地址，以免由于企业防火墙设置，导致应用无法及时接收到飞书开放平台推送的事件。
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                ip_list?: Array<string>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/event/v1/outbound_ip`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
         
         */
    exam = {};
    /**
         
         */
    face_detection = {};
    /**
         
         */
    feelgood = {};
    /**
         
         */
    gray_test_open_sg = {
        /**
         * moto
         */
        moto: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=gray_test_open_sg&resource=moto&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=gray_test_open_sg&resource=moto&version=v1 document }
             */
            create: async (
                payload?: {
                    data?: { level?: string; body?: string; type?: string };
                    params?: {
                        department_id_type?: string;
                        user_id_type?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                moto?: {
                                    moto_id?: string;
                                    id?: string;
                                    user_name?: string;
                                    type?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/gray_test_open_sg/v1/motos`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=gray_test_open_sg&resource=moto&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=gray_test_open_sg&resource=moto&version=v1 document }
             */
            get: async (
                payload?: {
                    params?: { body_level?: string };
                    path?: { moto_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                moto?: {
                                    moto_id?: string;
                                    id?: string;
                                    user_name?: string;
                                    type?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/gray_test_open_sg/v1/motos/:moto_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        level?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/gray_test_open_sg/v1/motos`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<string>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=gray_test_open_sg&resource=moto&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=gray_test_open_sg&resource=moto&version=v1 document }
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        level?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<string>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/gray_test_open_sg/v1/motos`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * 服务台
     */
    helpdesk = {
        /**
         * 客服
         */
        agent: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent&apiName=agent_email&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent/agent_email document }
             *
             * 获取客服邮箱地址
             *
             * 该接口用于获取客服邮箱地址
             */
            agentEmail: async (payload?: {}, options?: IRequestOptions) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { agents?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_emails`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent/patch document }
             *
             * 更新客服信息
             *
             * 更新客服状态等信息
             */
            patch: async (
                payload?: {
                    data?: { status?: number };
                    path: { agent_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agents/:agent_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 客服工作日程
         */
        agentSchedules: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent.schedules&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent-schedules/delete document }
             *
             * 删除客服
             *
             * 该接口用于删除客服
             */
            delete: async (
                payload?: {
                    path?: { agent_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agents/:agent_id/schedules`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent.schedules&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent-schedules/get document }
             *
             * 获取客服工作日程;
             *
             * 该接口用于获取客服信息
             */
            get: async (
                payload?: {
                    path: { agent_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                agent_schedule?: {
                                    status?: number;
                                    agent?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        company_name?: string;
                                    };
                                    schedule?: Array<{
                                        start_time?: string;
                                        end_time?: string;
                                        weekday?: number;
                                    }>;
                                    agent_skills?: Array<{
                                        id?: string;
                                        name?: string;
                                        is_default?: boolean;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agents/:agent_id/schedules`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent.schedules&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent-schedules/patch document }
             *
             * 更新客服日程
             *
             * 该接口用于更新客服的日程
             */
            patch: async (
                payload?: {
                    data?: {
                        agent_schedule?: {
                            schedule?: Array<{
                                start_time?: string;
                                end_time?: string;
                                weekday?: number;
                            }>;
                            agent_skill_ids?: Array<string>;
                        };
                    };
                    path: { agent_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agents/:agent_id/schedules`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * agent_schedule
         */
        agentSchedule: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_schedule&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_schedule/create document }
             *
             * 创建客服
             *
             * 该接口用于创建客服
             */
            create: async (
                payload?: {
                    data?: {
                        agent_schedules?: Array<{
                            agent_id?: string;
                            schedule?: Array<{
                                start_time?: string;
                                end_time?: string;
                                weekday?: number;
                            }>;
                            agent_skill_ids?: Array<string>;
                        }>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_schedules`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_schedule&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_schedule/list document }
             *
             * 获取全部客服工作日程
             *
             * 该接口用于获取所有客服信息
             */
            list: async (
                payload?: {
                    params: { status: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                agent_schedules?: Array<{
                                    status?: number;
                                    agent?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        company_name?: string;
                                    };
                                    schedule?: Array<{
                                        start_time?: string;
                                        end_time?: string;
                                        weekday?: number;
                                    }>;
                                    agent_skills?: Array<{
                                        id?: string;
                                        name?: string;
                                        is_default?: boolean;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_schedules`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 客服技能
         */
        agentSkill: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/create document }
             *
             * 创建客服技能
             *
             * 该接口用于创建客服技能
             */
            create: async (
                payload?: {
                    data?: {
                        name?: string;
                        rules?: Array<{
                            id?: string;
                            selected_operator?: number;
                            operand?: string;
                            category?: number;
                        }>;
                        agent_ids?: Array<string>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { agent_skill_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_skills`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/delete document }
             *
             * 删除客服技能
             *
             * 该接口用于删除客服技能
             */
            delete: async (
                payload?: {
                    path?: { agent_skill_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_skills/:agent_skill_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/get document }
             *
             * 获取客服技能
             *
             * 该接口用于获取客服技能
             */
            get: async (
                payload?: {
                    path?: { agent_skill_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                agent_skill?: {
                                    id?: string;
                                    name?: string;
                                    rules?: Array<{
                                        id?: string;
                                        selected_operator?: number;
                                        operator_options?: Array<number>;
                                        operand?: string;
                                        category?: number;
                                        display_name?: string;
                                    }>;
                                    agent_ids?: Array<string>;
                                    is_default?: boolean;
                                    agents?: Array<{
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_skills/:agent_skill_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/list document }
             *
             * 获取全部客服技能
             *
             * 获取全部客服技能
             */
            list: async (payload?: {}, options?: IRequestOptions) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                agent_skills?: Array<{
                                    id?: string;
                                    name?: string;
                                    agent_ids?: Array<string>;
                                    is_default?: boolean;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_skills`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/patch document }
             *
             * 更新客服技能
             *
             * 该接口用于更新客服技能
             */
            patch: async (
                payload?: {
                    data?: {
                        agent_skill?: {
                            name?: string;
                            rules?: Array<{
                                id?: string;
                                selected_operator?: number;
                                operator_options?: Array<number>;
                                operand?: string;
                            }>;
                            agent_ids?: Array<string>;
                        };
                    };
                    path: { agent_skill_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_skills/:agent_skill_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 客服技能规则
         */
        agentSkillRule: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill_rule&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill_rule/list document }
             *
             * 获取客服技能列表
             *
             * 该接口用于获取全部客服技能。仅支持自建应用。
             */
            list: async (payload?: {}, options?: IRequestOptions) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                rules?: Array<{
                                    id?: string;
                                    operator_options?: Array<number>;
                                    operand?: string;
                                    category?: number;
                                    display_name?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_skill_rules`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 机器人消息
         */
        botMessage: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=bot.message&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/bot-message/create document }
             *
             * 服务台机器人发送消息
             *
             * 通过服务台机器人给指定用户的服务台专属群或私聊发送消息，支持文本、富文本、卡片、图片。
             */
            create: async (
                payload?: {
                    data: {
                        msg_type: "text" | "post" | "image" | "interactive";
                        content: string;
                        receiver_id: string;
                        receive_type?: "chat" | "user";
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { message_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/message`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 知识库分类
         */
        category: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=category&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/create document }
             *
             * 创建知识库分类
             *
             * 该接口用于创建知识库分类。
             */
            create: async (
                payload?: {
                    data: {
                        name: string;
                        parent_id: string;
                        language?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                category?: {
                                    category_id: string;
                                    id: string;
                                    name: string;
                                    parent_id: string;
                                    helpdesk_id: string;
                                    language?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/categories`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=category&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/delete document }
             *
             * 删除知识库分类详情
             *
             * 该接口用于删除知识库分类详情。
             */
            delete: async (
                payload?: {
                    path: { id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/categories/:id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=category&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/get document }
             *
             * 获取知识库分类
             *
             * 该接口用于获取知识库分类。
             */
            get: async (
                payload?: {
                    path: { id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                category_id: string;
                                id: string;
                                name: string;
                                helpdesk_id: string;
                                language?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/categories/:id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=category&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/list document }
             *
             * 获取全部知识库分类 - meta
             *
             * 该接口用于获取服务台知识库所有分类
             */
            list: async (
                payload?: {
                    params?: {
                        lang?: string;
                        order_by?: number;
                        asc?: boolean;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                categories?: Array<{
                                    category_id: string;
                                    id: string;
                                    name: string;
                                    parent_id: string;
                                    helpdesk_id: string;
                                    language?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/categories`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=category&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/patch document }
             *
             * 更新知识库分类详情
             *
             * 该接口用于更新知识库分类详情。
             */
            patch: async (
                payload?: {
                    data?: { name?: string; parent_id?: string };
                    path: { id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/categories/:id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 事件订阅
         */
        event: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=event&apiName=subscribe&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/event/subscribe document }
             *
             * 订阅服务台事件
             *
             * 用于订阅服务台事件
             */
            subscribe: async (
                payload?: {
                    data: { events: Array<{ type: string; subtype: string }> };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/events/subscribe`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=event&apiName=unsubscribe&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/event/unsubscribe document }
             *
             * 取消订阅服务台事件
             *
             * 用于取消订阅服务台事件
             */
            unsubscribe: async (
                payload?: {
                    data: { events: Array<{ type: string; subtype: string }> };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/events/unsubscribe`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 知识库
         */
        faq: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/create document }
             *
             * 创建知识库
             *
             * 该接口用于创建知识库。
             */
            create: async (
                payload?: {
                    data?: {
                        faq?: {
                            category_id?: string;
                            question: string;
                            answer?: string;
                            answer_richtext?: string;
                            tags?: Array<string>;
                        };
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                faq?: {
                                    faq_id?: string;
                                    id?: string;
                                    helpdesk_id?: string;
                                    question?: string;
                                    answer?: string;
                                    answer_richtext?: Array<{
                                        content?: string;
                                        type?: string;
                                    }>;
                                    create_time?: number;
                                    update_time?: number;
                                    categories?: Array<{
                                        category_id: string;
                                        id: string;
                                        name: string;
                                        parent_id: string;
                                        helpdesk_id: string;
                                        language?: string;
                                    }>;
                                    tags?: Array<string>;
                                    expire_time?: number;
                                    update_user?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    create_user?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/faqs`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/delete document }
             *
             * 删除知识库
             *
             * 该接口用于删除知识库。
             */
            delete: async (
                payload?: {
                    path?: { id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/faqs/:id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=faq_image&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/faq_image document }
             *
             * 获取知识库图像
             *
             * 该接口用于获取知识库图像。
             */
            faqImage: async (
                payload?: {
                    path?: { id?: string; image_key?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/faqs/:id/image/:image_key`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        return new Promise((resolve, reject) => {
                            const writableStream =
                                fs.createWriteStream(filePath);
                            writableStream.on("finish", () => {
                                resolve(filePath);
                            });
                            writableStream.on("error", (e) => {
                                reject(e);
                            });
                            res.pipe(writableStream);
                        });
                    },
                };
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/get document }
             *
             * 获取知识库详情
             *
             * 该接口用于获取服务台知识库详情。
             */
            get: async (
                payload?: {
                    path?: { id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                faq?: {
                                    faq_id?: string;
                                    id?: string;
                                    helpdesk_id?: string;
                                    question?: string;
                                    answer?: string;
                                    answer_richtext?: Array<{
                                        content?: string;
                                        type?: string;
                                    }>;
                                    create_time?: number;
                                    update_time?: number;
                                    categories?: Array<{
                                        category_id: string;
                                        id: string;
                                        name: string;
                                        parent_id: string;
                                        helpdesk_id: string;
                                        language?: string;
                                    }>;
                                    tags?: Array<string>;
                                    expire_time?: number;
                                    update_user?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    create_user?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/faqs/:id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        category_id?: string;
                        status?: string;
                        search?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/helpdesk/v1/faqs`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                page_size?: number;
                                                total?: number;
                                                items?: Array<{
                                                    faq_id?: string;
                                                    id?: string;
                                                    helpdesk_id?: string;
                                                    question?: string;
                                                    answer?: string;
                                                    answer_richtext?: Array<{
                                                        content?: string;
                                                        type?: string;
                                                    }>;
                                                    create_time?: number;
                                                    update_time?: number;
                                                    categories?: Array<{
                                                        category_id: string;
                                                        id: string;
                                                        name: string;
                                                        parent_id: string;
                                                        helpdesk_id: string;
                                                        language?: string;
                                                    }>;
                                                    tags?: Array<string>;
                                                    expire_time?: number;
                                                    update_user?: {
                                                        id?: string;
                                                        avatar_url?: string;
                                                        name?: string;
                                                        department?: string;
                                                        city?: string;
                                                        country?: string;
                                                    };
                                                    create_user?: {
                                                        id?: string;
                                                        avatar_url?: string;
                                                        name?: string;
                                                        department?: string;
                                                        city?: string;
                                                        country?: string;
                                                    };
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/list document }
             *
             * 获取全部知识库详情
             *
             * 该接口用于获取服务台知识库详情。
             */
            list: async (
                payload?: {
                    params?: {
                        category_id?: string;
                        status?: string;
                        search?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                page_size?: number;
                                total?: number;
                                items?: Array<{
                                    faq_id?: string;
                                    id?: string;
                                    helpdesk_id?: string;
                                    question?: string;
                                    answer?: string;
                                    answer_richtext?: Array<{
                                        content?: string;
                                        type?: string;
                                    }>;
                                    create_time?: number;
                                    update_time?: number;
                                    categories?: Array<{
                                        category_id: string;
                                        id: string;
                                        name: string;
                                        parent_id: string;
                                        helpdesk_id: string;
                                        language?: string;
                                    }>;
                                    tags?: Array<string>;
                                    expire_time?: number;
                                    update_user?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    create_user?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/faqs`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/patch document }
             *
             * 修改知识库
             *
             * 该接口用于修改知识库。
             */
            patch: async (
                payload?: {
                    data?: {
                        faq?: {
                            category_id?: string;
                            question: string;
                            answer?: string;
                            answer_richtext?: string;
                            tags?: Array<string>;
                        };
                    };
                    path?: { id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/faqs/:id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            searchWithIterator: async (
                payload?: {
                    params: {
                        query: string;
                        base64?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/helpdesk/v1/faqs/search`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    faq_id?: string;
                                                    id?: string;
                                                    helpdesk_id?: string;
                                                    question?: string;
                                                    answer?: string;
                                                    answer_richtext?: Array<{
                                                        content?: string;
                                                        type?: string;
                                                    }>;
                                                    create_time?: number;
                                                    update_time?: number;
                                                    categories?: Array<{
                                                        category_id: string;
                                                        id: string;
                                                        name: string;
                                                        parent_id: string;
                                                        helpdesk_id: string;
                                                        language?: string;
                                                    }>;
                                                    tags?: Array<string>;
                                                    expire_time?: number;
                                                    update_user?: {
                                                        id?: string;
                                                        avatar_url?: string;
                                                        name?: string;
                                                        department?: string;
                                                        city?: string;
                                                        country?: string;
                                                    };
                                                    create_user?: {
                                                        id?: string;
                                                        avatar_url?: string;
                                                        name?: string;
                                                        department?: string;
                                                        city?: string;
                                                        country?: string;
                                                    };
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=search&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/search document }
             *
             * 搜索知识库
             *
             * 该接口用于搜索服务台知识库。
             */
            search: async (
                payload?: {
                    params: {
                        query: string;
                        base64?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    faq_id?: string;
                                    id?: string;
                                    helpdesk_id?: string;
                                    question?: string;
                                    answer?: string;
                                    answer_richtext?: Array<{
                                        content?: string;
                                        type?: string;
                                    }>;
                                    create_time?: number;
                                    update_time?: number;
                                    categories?: Array<{
                                        category_id: string;
                                        id: string;
                                        name: string;
                                        parent_id: string;
                                        helpdesk_id: string;
                                        language?: string;
                                    }>;
                                    tags?: Array<string>;
                                    expire_time?: number;
                                    update_user?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    create_user?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/faqs/search`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 推送中心
         */
        notification: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=cancel_approve&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/cancel_approve document }
             *
             * 取消审核
             *
             * 提交审核后，如果需要取消审核，则调用此接口
             */
            cancelApprove: async (
                payload?: {
                    path: { notification_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id/cancel_approve`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=cancel_send&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/cancel_send document }
             *
             * 取消推送
             *
             * 取消推送接口，审核通过后待调度可以调用，发送过程中可以调用（会撤回已发送的消息），发送完成后可以需要推送（会撤回所有已发送的消息）
             */
            cancelSend: async (
                payload?: {
                    data: { is_recall: boolean };
                    path: { notification_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id/cancel_send`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/create document }
             *
             * 创建推送
             *
             * 调用接口创建推送，创建成功后为草稿状态
             */
            create: async (
                payload?: {
                    data?: {
                        id?: string;
                        job_name?: string;
                        status?: number;
                        create_user?: {
                            user_id?: string;
                            avatar_url?: string;
                            name?: string;
                        };
                        created_at?: string;
                        update_user?: {
                            user_id?: string;
                            avatar_url?: string;
                            name?: string;
                        };
                        updated_at?: string;
                        target_user_count?: number;
                        sent_user_count?: number;
                        read_user_count?: number;
                        send_at?: string;
                        push_content?: string;
                        push_type?: number;
                        push_scope_type?: number;
                        new_staff_scope_type?: number;
                        new_staff_scope_department_list?: Array<{
                            department_id?: string;
                            name?: string;
                        }>;
                        user_list?: Array<{
                            user_id?: string;
                            avatar_url?: string;
                            name?: string;
                        }>;
                        department_list?: Array<{
                            department_id?: string;
                            name?: string;
                        }>;
                        chat_list?: Array<{ chat_id?: string; name?: string }>;
                        ext?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                notification_id?: string;
                                status?: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/notifications`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=execute_send&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/execute_send document }
             *
             * 执行推送
             *
             * 审核通过后调用此接口设置推送时间，等待调度系统调度，发送消息
             */
            executeSend: async (
                payload?: {
                    data: { send_at: string };
                    path: { notification_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id/execute_send`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/get document }
             *
             * 查询推送
             *
             * 查询推送详情
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { notification_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                notification?: {
                                    id?: string;
                                    job_name?: string;
                                    status?: number;
                                    create_user?: {
                                        user_id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                    };
                                    created_at?: string;
                                    update_user?: {
                                        user_id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                    };
                                    updated_at?: string;
                                    target_user_count?: number;
                                    sent_user_count?: number;
                                    read_user_count?: number;
                                    send_at?: string;
                                    push_content?: string;
                                    push_type?: number;
                                    push_scope_type?: number;
                                    new_staff_scope_type?: number;
                                    new_staff_scope_department_list?: Array<{
                                        department_id?: string;
                                        name?: string;
                                    }>;
                                    user_list?: Array<{
                                        user_id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                    }>;
                                    department_list?: Array<{
                                        department_id?: string;
                                        name?: string;
                                    }>;
                                    chat_list?: Array<{
                                        chat_id?: string;
                                        name?: string;
                                    }>;
                                    ext?: string;
                                };
                                approval_app_link?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/patch document }
             *
             * 更新推送
             *
             * 更新推送信息，只有在草稿状态下才可以调用此接口进行更新
             */
            patch: async (
                payload?: {
                    data?: {
                        id?: string;
                        job_name?: string;
                        status?: number;
                        create_user?: {
                            user_id?: string;
                            avatar_url?: string;
                            name?: string;
                        };
                        created_at?: string;
                        update_user?: {
                            user_id?: string;
                            avatar_url?: string;
                            name?: string;
                        };
                        updated_at?: string;
                        target_user_count?: number;
                        sent_user_count?: number;
                        read_user_count?: number;
                        send_at?: string;
                        push_content?: string;
                        push_type?: number;
                        push_scope_type?: number;
                        new_staff_scope_type?: number;
                        new_staff_scope_department_list?: Array<{
                            department_id?: string;
                            name?: string;
                        }>;
                        user_list?: Array<{
                            user_id?: string;
                            avatar_url?: string;
                            name?: string;
                        }>;
                        department_list?: Array<{
                            department_id?: string;
                            name?: string;
                        }>;
                        chat_list?: Array<{ chat_id?: string; name?: string }>;
                        ext?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { notification_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=preview&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/preview document }
             *
             * 预览推送内容
             *
             * 在正式执行推送之前是可以调用此接口预览设置的推送内容
             */
            preview: async (
                payload?: {
                    path: { notification_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id/preview`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=submit_approve&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/submit_approve document }
             *
             * 提交审核
             *
             * 正常情况下调用创建推送接口后，就可以调用提交审核接口，如果创建人是服务台owner则会自动审核通过，否则会通知服务台owner审核此推送信息
             */
            submitApprove: async (
                payload?: {
                    data: { reason: string };
                    path: { notification_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { has_access?: boolean };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id/submit_approve`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 工单
         */
        ticket: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=answer_user_query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/answer_user_query document }
             *
             * 回复用户提问结果至工单
             *
             * 该接口用于回复用户提问结果至工单，需要工单仍处于进行中且未接入人工状态。仅支持自建应用。
             */
            answerUserQuery: async (
                payload?: {
                    data: {
                        event_id: string;
                        faqs?: Array<{ id?: string; score?: number }>;
                    };
                    path: { ticket_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/tickets/:ticket_id/answer_user_query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=customized_fields&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/customized_fields document }
             *
             * 获取服务台自定义字段详情
             *
             * 该接口用于获取服务台自定义字段详情。
             */
            customizedFields: async (
                payload?: {
                    params?: { visible_only?: boolean };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_customized_fields?: Array<{
                                    user_customized_field_id?: string;
                                    id?: string;
                                    helpdesk_id?: string;
                                    key_name?: string;
                                    display_name?: string;
                                    position?: string;
                                    field_type?: string;
                                    description?: string;
                                    visible?: boolean;
                                    editable?: boolean;
                                    required?: boolean;
                                    created_at?: string;
                                    updated_at?: string;
                                }>;
                                ticket_customized_fields?: Array<{
                                    ticket_customized_field_id: string;
                                    helpdesk_id: string;
                                    key_name: string;
                                    display_name: string;
                                    position: string;
                                    field_type: string;
                                    description: string;
                                    visible: boolean;
                                    editable: boolean;
                                    required: boolean;
                                    created_at?: string;
                                    updated_at?: string;
                                    created_by?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    updated_by?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    dropdown_allow_multiple?: boolean;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/customized_fields`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/get document }
             *
             * 获取工单详情
             *
             * 该接口用于获取单个服务台工单详情。仅支持自建应用。
             */
            get: async (
                payload?: {
                    path: { ticket_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                ticket?: {
                                    ticket_id: string;
                                    helpdesk_id?: string;
                                    guest?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    comments?: {
                                        content?: string;
                                        created_at?: number;
                                        id?: number;
                                        user_avatar_url?: string;
                                        user_name?: string;
                                        user_id?: number;
                                    };
                                    ticket_type?: number;
                                    status?: number;
                                    score?: number;
                                    created_at?: number;
                                    updated_at?: number;
                                    closed_at?: number;
                                    dissatisfaction_reason?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    agents?: Array<{
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    }>;
                                    channel?: number;
                                    solve?: number;
                                    closed_by?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    collaborators?: Array<{
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    }>;
                                    customized_fields?: Array<{
                                        id?: string;
                                        value?: string;
                                        key_name?: string;
                                        display_name?: string;
                                        position?: number;
                                        required?: boolean;
                                        editable?: boolean;
                                    }>;
                                    agent_service_duration?: number;
                                    agent_first_response_duration?: number;
                                    bot_service_duration?: number;
                                    agent_resolution_time?: number;
                                    actual_processing_time?: number;
                                    agent_entry_time?: number;
                                    agent_first_response_time?: number;
                                    agent_last_response_time?: number;
                                    agent_owner?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/tickets/:ticket_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/list document }
             *
             * 获取全部工单详情
             *
             * 该接口用于获取全部工单详情。仅支持自建应用。
             */
            list: async (
                payload?: {
                    params?: {
                        ticket_id?: string;
                        agent_id?: string;
                        closed_by_id?: string;
                        type?: number;
                        channel?: number;
                        solved?: number;
                        score?: number;
                        status_list?: number;
                        guest_name?: string;
                        guest_id?: string;
                        tags?: number;
                        page?: number;
                        page_size?: number;
                        create_time_start?: number;
                        create_time_end?: number;
                        update_time_start?: number;
                        update_time_end?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                total?: number;
                                tickets?: Array<{
                                    ticket_id: string;
                                    helpdesk_id?: string;
                                    guest?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    comments?: {
                                        content?: string;
                                        created_at?: number;
                                        id?: number;
                                        user_avatar_url?: string;
                                        user_name?: string;
                                        user_id?: number;
                                    };
                                    ticket_type?: number;
                                    status?: number;
                                    score?: number;
                                    created_at?: number;
                                    updated_at?: number;
                                    closed_at?: number;
                                    dissatisfaction_reason?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    agents?: Array<{
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    }>;
                                    channel?: number;
                                    solve?: number;
                                    closed_by?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    collaborators?: Array<{
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    }>;
                                    customized_fields?: Array<{
                                        id?: string;
                                        value?: string;
                                        key_name?: string;
                                        display_name?: string;
                                        position?: number;
                                        required?: boolean;
                                        editable?: boolean;
                                    }>;
                                    agent_service_duration?: number;
                                    agent_first_response_duration?: number;
                                    bot_service_duration?: number;
                                    agent_resolution_time?: number;
                                    actual_processing_time?: number;
                                    agent_entry_time?: number;
                                    agent_first_response_time?: number;
                                    agent_last_response_time?: number;
                                    agent_owner?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/tickets`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=start_service&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/start_service document }
             *
             * 创建服务台对话
             *
             * 该接口用于创建服务台对话。
             */
            startService: async (
                payload?: {
                    data: {
                        human_service?: boolean;
                        appointed_agents?: Array<string>;
                        open_id: string;
                        customized_info?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { chat_id: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/start_service`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=ticket_image&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/ticket_image document }
             *
             * 获取服务台工单内消息图像
             *
             * 该接口用于获取服务台工单消息图象。仅支持自建应用。
             */
            ticketImage: async (
                payload?: {
                    params: {
                        ticket_id: string;
                        msg_id: string;
                        index?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/ticket_images`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        return new Promise((resolve, reject) => {
                            const writableStream =
                                fs.createWriteStream(filePath);
                            writableStream.on("finish", () => {
                                resolve(filePath);
                            });
                            writableStream.on("error", (e) => {
                                reject(e);
                            });
                            res.pipe(writableStream);
                        });
                    },
                };
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/update document }
             *
             * 更新工单详情
             *
             * 该接口用于更新服务台工单详情。只会更新数据，不会触发相关操作。如修改工单状态到关单，不会关闭聊天页面。仅支持自建应用。要更新的工单字段必须至少输入一项。
             */
            update: async (
                payload?: {
                    data?: {
                        status?: number;
                        tag_names?: Array<string>;
                        comment?: string;
                        customized_fields?: Array<{
                            id?: string;
                            value?: string;
                            key_name?: string;
                        }>;
                        ticket_type?: number;
                        solved?: number;
                        channel?: number;
                    };
                    path: { ticket_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/tickets/:ticket_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 事件
         */
        ticketMessage: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket.message&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket-message/create document }
             *
             * 工单发送消息
             *
             * 该接口用于工单发送消息。
             */
            create: async (
                payload?: {
                    data: { msg_type: string; content: string };
                    path?: { ticket_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { message_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/tickets/:ticket_id/messages`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket.message&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket-message/list document }
             *
             * 获取服务台工单消息详情
             *
             * 该接口用于获取服务台工单消息详情。
             */
            list: async (
                payload?: {
                    params?: {
                        time_start?: number;
                        time_end?: number;
                        page?: number;
                        page_size?: number;
                    };
                    path?: { ticket_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                messages?: Array<{
                                    id?: string;
                                    message_id?: string;
                                    message_type: string;
                                    created_at?: number;
                                    content: string;
                                    user_name?: string;
                                    avatar_url?: string;
                                    user_id?: string;
                                }>;
                                total?: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/tickets/:ticket_id/messages`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 工单自定义字段
         */
        ticketCustomizedField: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket_customized_field&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/create document }
             *
             * 创建工单自定义字段
             *
             * 该接口用于创建自定义字段
             */
            create: async (
                payload?: {
                    data: {
                        helpdesk_id: string;
                        key_name: string;
                        display_name: string;
                        position: string;
                        field_type: string;
                        description: string;
                        visible: boolean;
                        editable: boolean;
                        required: boolean;
                        dropdown_allow_multiple?: boolean;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket_customized_field&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/delete document }
             *
             * 删除工单自定义字段
             *
             * 该接口用于删除工单自定义字段。
             */
            delete: async (
                payload?: {
                    path: { ticket_customized_field_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket_customized_field&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/get document }
             *
             * 获取工单自定义字段
             *
             * 该接口用于获取工单自定义字段详情。
             */
            get: async (
                payload?: {
                    path: { ticket_customized_field_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                ticket_customized_field_id: string;
                                helpdesk_id: string;
                                key_name: string;
                                display_name: string;
                                position: string;
                                field_type: string;
                                description: string;
                                visible: boolean;
                                editable: boolean;
                                required: boolean;
                                created_at?: string;
                                updated_at?: string;
                                created_by?: {
                                    id?: string;
                                    avatar_url?: string;
                                    name?: string;
                                    email?: string;
                                    department?: string;
                                    city?: string;
                                    country?: string;
                                };
                                updated_by?: {
                                    id?: string;
                                    avatar_url?: string;
                                    name?: string;
                                    email?: string;
                                    department?: string;
                                    city?: string;
                                    country?: string;
                                };
                                dropdown_allow_multiple?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    data?: { visible?: boolean };
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                next_page_token?: string;
                                                items?: Array<{
                                                    ticket_customized_field_id: string;
                                                    helpdesk_id: string;
                                                    key_name: string;
                                                    display_name: string;
                                                    position: string;
                                                    field_type: string;
                                                    description: string;
                                                    visible: boolean;
                                                    editable: boolean;
                                                    required: boolean;
                                                    created_at?: string;
                                                    updated_at?: string;
                                                    created_by?: {
                                                        id?: string;
                                                        avatar_url?: string;
                                                        name?: string;
                                                        email?: string;
                                                        department?: string;
                                                        city?: string;
                                                        country?: string;
                                                    };
                                                    updated_by?: {
                                                        id?: string;
                                                        avatar_url?: string;
                                                        name?: string;
                                                        email?: string;
                                                        department?: string;
                                                        city?: string;
                                                        country?: string;
                                                    };
                                                    dropdown_allow_multiple?: boolean;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket_customized_field&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/list document }
             *
             * 获取全部工单自定义字段
             *
             * 该接口用于获取全部工单自定义字段。
             */
            list: async (
                payload?: {
                    data?: { visible?: boolean };
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                next_page_token?: string;
                                items?: Array<{
                                    ticket_customized_field_id: string;
                                    helpdesk_id: string;
                                    key_name: string;
                                    display_name: string;
                                    position: string;
                                    field_type: string;
                                    description: string;
                                    visible: boolean;
                                    editable: boolean;
                                    required: boolean;
                                    created_at?: string;
                                    updated_at?: string;
                                    created_by?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    updated_by?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    dropdown_allow_multiple?: boolean;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket_customized_field&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/patch document }
             *
             * 更新工单自定义字段
             *
             * 该接口用于更新自定义字段。
             */
            patch: async (
                payload?: {
                    data?: {
                        display_name?: string;
                        position?: string;
                        description?: string;
                        visible?: boolean;
                        required?: boolean;
                    };
                    path: { ticket_customized_field_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * 招聘
     */
    hire = {
        /**
         * 入职
         */
        application: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/create document }
             *
             * 创建投递
             *
             * 根据人才 ID 和职位 ID 创建投递
             */
            create: async (
                payload?: {
                    data: {
                        talent_id: string;
                        job_id: string;
                        resume_source_id?: string;
                        application_preferred_city_code_list?: Array<string>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        { code?: number; msg?: string; data?: { id?: string } }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/applications`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/get document }
             *
             * 获取投递信息
             *
             * 根据投递 ID 获取单个投递信息
             */
            get: async (
                payload?: {
                    path: { application_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                application?: {
                                    id?: string;
                                    job_id?: string;
                                    talent_id?: string;
                                    resume_resource_id?: string;
                                    stage?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        type?: number;
                                    };
                                    active_status?: number;
                                    delivery_type?: number;
                                    resume_source_info?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        resume_source_type?: number;
                                    };
                                    website_resume_source?: {
                                        website_id?: string;
                                        website_name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        channel?: {
                                            channel_id?: string;
                                            channel_name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                        };
                                    };
                                    talent_attachment_resume_id?: string;
                                    create_time?: string;
                                    modify_time?: string;
                                    stage_time_list?: Array<{
                                        stage_id?: string;
                                        enter_time?: string;
                                        exit_time?: string;
                                    }>;
                                    termination_type?: number;
                                    termination_reason_list?: Array<string>;
                                    termination_reason_note?: string;
                                    application_preferred_city_list?: Array<{
                                        code?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/applications/:application_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list document }
             *
             * 获取投递列表
             *
             * 根据限定条件获取投递列表信息
             */
            list: async (
                payload?: {
                    params?: {
                        process_id?: string;
                        stage_id?: string;
                        talent_id?: string;
                        active_status?: string;
                        job_id?: string;
                        page_token?: string;
                        page_size?: number;
                        update_start_time?: string;
                        update_end_time?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<string>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/applications`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=offer&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/offer document }
             *
             * 获取 Offer 信息
             *
             * 根据投递 ID 获取 Offer 信息
             */
            offer: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id";
                    };
                    path: { application_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                offer?: {
                                    id?: string;
                                    application_id?: string;
                                    basic_info?: {
                                        offer_type?: number;
                                        remark?: string;
                                        expire_time?: number;
                                        owner_user_id?: string;
                                        creator_user_id?: string;
                                        employee_type?: {
                                            id?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                        };
                                        create_time?: string;
                                        leader_user_id?: string;
                                        onboard_date?: string;
                                        department_id?: string;
                                        probation_month?: number;
                                        contract_year?: number;
                                        recruitment_type?: {
                                            id?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                        };
                                        sequence?: {
                                            id?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                        };
                                        level?: {
                                            id?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                        };
                                        onboard_address?: {
                                            id?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                            district?: {
                                                zh_name?: string;
                                                en_name?: string;
                                                code?: string;
                                                location_type?: number;
                                            };
                                            city?: {
                                                zh_name?: string;
                                                en_name?: string;
                                                code?: string;
                                                location_type?: number;
                                            };
                                            state?: {
                                                zh_name?: string;
                                                en_name?: string;
                                                code?: string;
                                                location_type?: number;
                                            };
                                            country?: {
                                                zh_name?: string;
                                                en_name?: string;
                                                code?: string;
                                                location_type?: number;
                                            };
                                        };
                                        work_address?: {
                                            id?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                            district?: {
                                                zh_name?: string;
                                                en_name?: string;
                                                code?: string;
                                                location_type?: number;
                                            };
                                            city?: {
                                                zh_name?: string;
                                                en_name?: string;
                                                code?: string;
                                                location_type?: number;
                                            };
                                            state?: {
                                                zh_name?: string;
                                                en_name?: string;
                                                code?: string;
                                                location_type?: number;
                                            };
                                            country?: {
                                                zh_name?: string;
                                                en_name?: string;
                                                code?: string;
                                                location_type?: number;
                                            };
                                        };
                                        customize_info_list?: Array<{
                                            object_id?: string;
                                            customize_value?: string;
                                        }>;
                                    };
                                    salary_plan?: {
                                        currency?: string;
                                        basic_salary?: string;
                                        probation_salary_percentage?: string;
                                        award_salary_multiple?: string;
                                        option_shares?: string;
                                        quarterly_bonus?: string;
                                        half_year_bonus?: string;
                                        total_annual_cash?: string;
                                        customize_info_list?: Array<{
                                            object_id?: string;
                                            customize_value?: string;
                                        }>;
                                    };
                                    schema_id?: string;
                                    offer_status?: number;
                                    job_info?: {
                                        job_id?: string;
                                        job_name?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/applications/:application_id/offer`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=terminate&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/terminate document }
             *
             * 终止投递
             *
             * 根据投递 ID 修改投递状态为「已终止」
             */
            terminate: async (
                payload?: {
                    data: {
                        termination_type: number;
                        termination_reason_list?: Array<string>;
                        termination_reason_note?: string;
                    };
                    path: { application_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/applications/:application_id/terminate`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=transfer_onboard&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/transfer_onboard document }
             *
             * 操作候选人入职
             *
             * 根据投递 ID 操作候选人入职并创建员工。投递须处于「待入职」阶段，可通过「转移阶段」接口变更投递状态
             */
            transferOnboard: async (
                payload?: {
                    data?: {
                        actual_onboard_time?: number;
                        expected_conversion_time?: number;
                        job_requirement_id?: string;
                        operator_id?: string;
                        onboard_city_code?: string;
                        department?: string;
                        leader?: string;
                        sequence?: string;
                        level?: string;
                        employee_type?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id"
                            | "people_admin_department_id";
                    };
                    path: { application_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employee?: {
                                    id?: string;
                                    application_id?: string;
                                    onboard_status?: number;
                                    conversion_status?: number;
                                    onboard_time?: number;
                                    expected_conversion_time?: number;
                                    actual_conversion_time?: number;
                                    overboard_time?: number;
                                    overboard_note?: string;
                                    onboard_city_code?: string;
                                    department?: string;
                                    leader?: string;
                                    sequence?: string;
                                    level?: string;
                                    employee_type?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/applications/:application_id/transfer_onboard`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * application.interview
         */
        applicationInterview: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application.interview&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=hire&resource=application.interview&version=v1 document }
             */
            list: async (
                payload?: {
                    params: {
                        page_size: number;
                        page_token?: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                    };
                    path: { application_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                page_token?: string;
                                has_more?: boolean;
                                items?: Array<{
                                    id?: string;
                                    begin_time?: number;
                                    end_time?: number;
                                    round?: number;
                                    stage_id?: string;
                                    interview_record_list?: Array<{
                                        id?: string;
                                        user_id?: string;
                                        content?: string;
                                        min_job_level_id?: string;
                                        max_job_level_id?: string;
                                        commit_status?: number;
                                        feedback_submit_time?: number;
                                        conclusion?: number;
                                        interview_score?: {
                                            id?: string;
                                            level?: number;
                                            zh_name?: string;
                                            zh_description?: string;
                                            en_name?: string;
                                            en_description?: string;
                                        };
                                        interviewer?: {
                                            id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                        };
                                        dimension_assessment_list?: Array<{
                                            id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            content?: string;
                                            dimension_id?: string;
                                            dimension_score?: {
                                                id?: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                            };
                                            dimension_score_list?: Array<{
                                                id?: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                            }>;
                                            dimension_type?: number;
                                        }>;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/applications/:application_id/interviews`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 附件
         */
        attachment: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=attachment&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/attachment/get document }
             *
             * 获取附件信息
             *
             * 获取招聘系统中附件的元信息，比如文件名、创建时间、文件url等
             */
            get: async (
                payload?: {
                    params?: { type?: number };
                    path: { attachment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                attachment?: {
                                    id?: string;
                                    url?: string;
                                    name?: string;
                                    mime?: string;
                                    create_time?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/attachments/:attachment_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=attachment&apiName=preview&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/attachment/preview document }
             *
             * 获取附件预览信息
             *
             * 根据附件 ID 获取附件预览信息
             */
            preview: async (
                payload?: {
                    path: { attachment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        { code?: number; msg?: string; data?: { url: string } }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/attachments/:attachment_id/preview`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 导入 e-HR
         */
        ehrImportTask: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=ehr_import_task&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/ehr_import_task/patch document }
             *
             * 更新 e-HR 导入任务结果
             *
             * 在处理完导入 e-HR 事件后，可调用该接口，更新  e-HR 导入任务结果
             */
            patch: async (
                payload?: {
                    data: {
                        fail_reason?: string;
                        redirect_url?: string;
                        state: number;
                    };
                    path: { ehr_import_task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/ehr_import_tasks/:ehr_import_task_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 入职
         */
        employee: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=employee&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/get document }
             *
             * 通过员工 ID 获取入职信息
             *
             * 通过员工 ID 获取入职信息
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id"
                            | "people_admin_department_id";
                    };
                    path: { employee_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employee?: {
                                    id?: string;
                                    application_id?: string;
                                    onboard_status?: number;
                                    conversion_status?: number;
                                    onboard_time?: number;
                                    expected_conversion_time?: number;
                                    actual_conversion_time?: number;
                                    overboard_time?: number;
                                    overboard_note?: string;
                                    onboard_city_code?: string;
                                    department?: string;
                                    leader?: string;
                                    sequence?: string;
                                    level?: string;
                                    employee_type?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/employees/:employee_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=employee&apiName=get_by_application&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/get_by_application document }
             *
             * 通过投递 ID 获取入职信息
             *
             * 通过投递 ID 获取入职信息
             */
            getByApplication: async (
                payload?: {
                    params: {
                        application_id: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id"
                            | "people_admin_department_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employee?: {
                                    id?: string;
                                    application_id?: string;
                                    onboard_status?: number;
                                    conversion_status?: number;
                                    onboard_time?: number;
                                    expected_conversion_time?: number;
                                    actual_conversion_time?: number;
                                    overboard_time?: number;
                                    overboard_note?: string;
                                    onboard_city_code?: string;
                                    department?: string;
                                    leader?: string;
                                    sequence?: string;
                                    level?: string;
                                    employee_type?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/employees/get_by_application`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=employee&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/patch document }
             *
             * 更新入职状态
             *
             * 根据员工 ID 更新员工转正、离职状态
             */
            patch: async (
                payload?: {
                    data: {
                        operation: number;
                        conversion_info?: { actual_conversion_time?: number };
                        overboard_info?: {
                            actual_overboard_time?: number;
                            overboard_note?: string;
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id"
                            | "people_admin_department_id";
                    };
                    path: { employee_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employee?: {
                                    id?: string;
                                    application_id?: string;
                                    onboard_status?: number;
                                    conversion_status?: number;
                                    onboard_time?: number;
                                    expected_conversion_time?: number;
                                    actual_conversion_time?: number;
                                    overboard_time?: number;
                                    overboard_note?: string;
                                    onboard_city_code?: string;
                                    department?: string;
                                    leader?: string;
                                    sequence?: string;
                                    level?: string;
                                    employee_type?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/employees/:employee_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 职位
         */
        job: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job&apiName=combined_create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/combined_create document }
             *
             * 新建职位
             *
             * 新建职位，字段的是否必填，以系统中的「职位字段管理」中的设置为准。
             */
            combinedCreate: async (
                payload?: {
                    data: {
                        code?: string;
                        experience?: number;
                        expiry_time?: number;
                        customized_data_list?: Array<{
                            object_id?: string;
                            value?: string;
                        }>;
                        min_level_id?: string;
                        min_salary?: number;
                        title: string;
                        job_managers: {
                            id?: string;
                            recruiter_id: string;
                            hiring_manager_id_list: Array<string>;
                            assistant_id_list?: Array<string>;
                        };
                        job_process_id: string;
                        process_type: number;
                        subject_id?: string;
                        job_function_id?: string;
                        department_id: string;
                        head_count?: number;
                        is_never_expired: boolean;
                        max_salary?: number;
                        requirement?: string;
                        address_id?: string;
                        description?: string;
                        highlight_list?: Array<string>;
                        job_type_id: string;
                        max_level_id?: string;
                        recruitment_type_id: string;
                        required_degree?: number;
                        job_category_id?: string;
                        address_id_list?: Array<string>;
                        job_attribute?: number;
                        expiry_timestamp?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                default_job_post?: { id?: string };
                                job?: {
                                    id?: string;
                                    title?: string;
                                    description?: string;
                                    code?: string;
                                    requirement?: string;
                                    recruitment_type?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        active_status?: number;
                                    };
                                    department?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    };
                                    city?: {
                                        city_code?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    };
                                    min_job_level?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        active_status?: number;
                                    };
                                    max_job_level?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        active_status?: number;
                                    };
                                    highlight_list?: Array<{
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    }>;
                                    job_category?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        active_status?: number;
                                    };
                                    job_type?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    };
                                    active_status?: number;
                                    create_user_id?: string;
                                    create_time?: number;
                                    update_time?: number;
                                    process_type?: number;
                                    process_id?: string;
                                    process_name?: string;
                                    process_en_name?: string;
                                    customized_data_list?: Array<{
                                        object_id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        object_type?: number;
                                        value?: {
                                            content?: string;
                                            option?: {
                                                key?: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                            };
                                            option_list?: Array<{
                                                key?: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                            }>;
                                            time_range?: {
                                                start_time?: string;
                                                end_time?: string;
                                            };
                                            time?: string;
                                            number?: string;
                                        };
                                    }>;
                                    job_function?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                    subject?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                    head_count?: number;
                                    experience?: number;
                                    expiry_time?: number;
                                    min_salary?: number;
                                    max_salary?: number;
                                    required_degree?: number;
                                    city_list?: Array<{
                                        code?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    }>;
                                    job_attribute?: number;
                                    create_timestamp?: string;
                                    update_timestamp?: string;
                                    expiry_timestamp?: string;
                                };
                                job_manager?: {
                                    id?: string;
                                    recruiter_id: string;
                                    hiring_manager_id_list: Array<string>;
                                    assistant_id_list?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/jobs/combined_create`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job&apiName=combined_update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/combined_update document }
             *
             * 更新职位
             *
             * 更新职位信息，该接口为全量更新，若字段没有返回值，则原有值将会被清空。字段的是否必填，将以系统中的「职位字段管理」中的设置为准。
             */
            combinedUpdate: async (
                payload?: {
                    data: {
                        id?: string;
                        experience?: number;
                        expiry_time?: number;
                        customized_data_list?: Array<{
                            object_id?: string;
                            value?: string;
                        }>;
                        min_level_id?: string;
                        min_salary?: number;
                        title?: string;
                        job_managers?: {
                            id?: string;
                            recruiter_id: string;
                            hiring_manager_id_list: Array<string>;
                            assistant_id_list?: Array<string>;
                        };
                        job_process_id?: string;
                        subject_id?: string;
                        job_function_id?: string;
                        department_id?: string;
                        head_count?: number;
                        is_never_expired: boolean;
                        max_salary?: number;
                        requirement?: string;
                        address_id?: string;
                        description?: string;
                        highlight_list?: Array<string>;
                        job_type_id: string;
                        max_level_id?: string;
                        required_degree?: number;
                        job_category_id?: string;
                        address_id_list?: Array<string>;
                        job_attribute?: number;
                        expiry_timestamp?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id";
                    };
                    path: { job_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                default_job_post?: { id?: string };
                                job?: {
                                    id?: string;
                                    title?: string;
                                    description?: string;
                                    code?: string;
                                    requirement?: string;
                                    recruitment_type?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        active_status?: number;
                                    };
                                    department?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    };
                                    city?: {
                                        city_code?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    };
                                    min_job_level?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        active_status?: number;
                                    };
                                    max_job_level?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        active_status?: number;
                                    };
                                    highlight_list?: Array<{
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    }>;
                                    job_category?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        active_status?: number;
                                    };
                                    job_type?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    };
                                    active_status?: number;
                                    create_user_id?: string;
                                    create_time?: number;
                                    update_time?: number;
                                    process_type?: number;
                                    process_id?: string;
                                    process_name?: string;
                                    process_en_name?: string;
                                    customized_data_list?: Array<{
                                        object_id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        object_type?: number;
                                        value?: {
                                            content?: string;
                                            option?: {
                                                key?: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                            };
                                            option_list?: Array<{
                                                key?: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                            }>;
                                            time_range?: {
                                                start_time?: string;
                                                end_time?: string;
                                            };
                                            time?: string;
                                            number?: string;
                                        };
                                    }>;
                                    job_function?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                    subject?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                    head_count?: number;
                                    experience?: number;
                                    expiry_time?: number;
                                    min_salary?: number;
                                    max_salary?: number;
                                    required_degree?: number;
                                    city_list?: Array<{
                                        code?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    }>;
                                    job_attribute?: number;
                                    create_timestamp?: string;
                                    update_timestamp?: string;
                                    expiry_timestamp?: string;
                                };
                                job_manager?: {
                                    id?: string;
                                    recruiter_id: string;
                                    hiring_manager_id_list: Array<string>;
                                    assistant_id_list?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/jobs/:job_id/combined_update`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job&apiName=config&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/config document }
             *
             * 获取职位设置
             *
             * 获取职位设置
             */
            config: async (
                payload?: {
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                    };
                    path: { job_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                job_config?: {
                                    offer_apply_schema?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                    offer_process_conf?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                    recommended_evaluator_list?: Array<{
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    }>;
                                    assessment_template?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                    id?: string;
                                    interview_round_list?: Array<{
                                        interviewer_list?: Array<{
                                            id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                        }>;
                                        round?: number;
                                    }>;
                                    job_requirement_list?: Array<{
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    }>;
                                    interview_round_type_list?: Array<{
                                        assessment_round?: {
                                            id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                        };
                                        assessment_template?: {
                                            id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                        };
                                    }>;
                                    related_job_list?: Array<{
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    }>;
                                    job_attribute?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/jobs/:job_id/config`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/get document }
             *
             * 获取职位信息
             *
             * 根据职位 ID 获取职位信息
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                        department_id_type?:
                            | "open_department_id"
                            | "department_id";
                    };
                    path: { job_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                job?: {
                                    id?: string;
                                    title?: string;
                                    description?: string;
                                    code?: string;
                                    requirement?: string;
                                    recruitment_type?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        active_status?: number;
                                    };
                                    department?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    };
                                    city?: {
                                        city_code?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    };
                                    min_job_level?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        active_status?: number;
                                    };
                                    max_job_level?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        active_status?: number;
                                    };
                                    highlight_list?: Array<{
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    }>;
                                    job_category?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        active_status?: number;
                                    };
                                    job_type?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    };
                                    active_status?: number;
                                    create_user_id?: string;
                                    create_time?: number;
                                    update_time?: number;
                                    process_type?: number;
                                    process_id?: string;
                                    process_name?: string;
                                    process_en_name?: string;
                                    customized_data_list?: Array<{
                                        object_id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        object_type?: number;
                                        value?: {
                                            content?: string;
                                            option?: {
                                                key?: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                            };
                                            option_list?: Array<{
                                                key?: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                            }>;
                                            time_range?: {
                                                start_time?: string;
                                                end_time?: string;
                                            };
                                            time?: string;
                                            number?: string;
                                        };
                                    }>;
                                    job_function?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                    subject?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                    head_count?: number;
                                    experience?: number;
                                    expiry_time?: number;
                                    min_salary?: number;
                                    max_salary?: number;
                                    required_degree?: number;
                                    city_list?: Array<{
                                        code?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    }>;
                                    job_attribute?: number;
                                    create_timestamp?: string;
                                    update_timestamp?: string;
                                    expiry_timestamp?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/jobs/:job_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job&apiName=update_config&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/update_config document }
             *
             * 更新职位设置
             *
             * 更新职位设置，包括面试评价表、Offer 申请表等。接口将按照所选择的「更新选项」进行设置参数校验和更新。
             */
            updateConfig: async (
                payload?: {
                    data: {
                        offer_apply_schema_id?: string;
                        offer_process_conf?: string;
                        recommended_evaluator_id_list?: Array<string>;
                        update_option_list: Array<number>;
                        assessment_template_biz_id?: string;
                        interview_round_conf_list?: Array<{
                            interviewer_id_list?: Array<string>;
                            round?: number;
                        }>;
                        jr_id_list?: Array<string>;
                        interview_round_type_conf_list?: Array<{
                            round_biz_id?: string;
                            assessment_template_biz_id?: string;
                        }>;
                        related_job_id_list?: Array<string>;
                        interview_appointment_config?: {
                            enable_interview_appointment_by_interviewer?: boolean;
                            config?: {
                                interview_type?: number;
                                talent_timezone_code?: string;
                                contact_user_id?: string;
                                contact_mobile?: string;
                                contact_email?: string;
                                address_id?: string;
                                video_type?: number;
                                cc?: Array<string>;
                                remark?: string;
                                interview_notification_template_id?: string;
                                appointment_notification_template_id?: string;
                                cancel_interview_notification_template_id?: string;
                            };
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { job_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                job_config?: {
                                    offer_apply_schema?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                    offer_process_conf?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                    recommended_evaluator_list?: Array<{
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    }>;
                                    assessment_template?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                    id?: string;
                                    interview_round_list?: Array<{
                                        interviewer_list?: Array<{
                                            id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                        }>;
                                        round?: number;
                                    }>;
                                    job_requirement_list?: Array<{
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    }>;
                                    interview_round_type_list?: Array<{
                                        assessment_round?: {
                                            id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                        };
                                        assessment_template?: {
                                            id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                        };
                                    }>;
                                    related_job_list?: Array<{
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    }>;
                                    job_attribute?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/jobs/:job_id/update_config`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * job.manager
         */
        jobManager: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job.manager&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job-manager/get document }
             *
             * 获取职位上的招聘人员信息
             *
             * 根据职位 ID 获取职位上的招聘人员信息，如招聘负责人、用人经理
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                    };
                    path: { job_id: string; manager_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                info?: {
                                    id?: string;
                                    recruiter_id: string;
                                    hiring_manager_id_list: Array<string>;
                                    assistant_id_list?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/jobs/:job_id/managers/:manager_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 流程
         */
        jobProcess: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job_process&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_process/list document }
             *
             * 获取招聘流程信息
             *
             * 获取全部招聘流程信息
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    id?: string;
                                    zh_name?: string;
                                    en_name?: string;
                                    type?: number;
                                    stage_list?: Array<{
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        type?: number;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/job_processes`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 备注
         */
        note: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=note&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/create document }
             *
             * 创建备注
             *
             * 创建备注信息
             */
            create: async (
                payload?: {
                    data: {
                        talent_id: string;
                        application_id?: string;
                        creator_id?: string;
                        content: string;
                        privacy?: number;
                    };
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                note?: {
                                    id?: string;
                                    talent_id: string;
                                    application_id?: string;
                                    is_private?: boolean;
                                    create_time?: number;
                                    modify_time?: number;
                                    creator_id?: string;
                                    content: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/notes`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=note&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/get document }
             *
             * 获取备注
             *
             * 根据备注 ID 获取备注信息
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                    };
                    path: { note_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                note?: {
                                    id?: string;
                                    talent_id: string;
                                    application_id?: string;
                                    is_private?: boolean;
                                    create_time?: number;
                                    modify_time?: number;
                                    creator_id?: string;
                                    content: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/notes/:note_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=note&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/list document }
             *
             * 获取备注列表
             *
             * 获取备注列表
             */
            list: async (
                payload?: {
                    params: {
                        page_size?: number;
                        page_token?: string;
                        talent_id: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    talent_id: string;
                                    application_id?: string;
                                    is_private?: boolean;
                                    create_time?: number;
                                    modify_time?: number;
                                    creator_id?: string;
                                    content: string;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/notes`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=note&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/patch document }
             *
             * 更新备注
             *
             * 根据备注 ID 更新备注信息
             */
            patch: async (
                payload?: {
                    data: { content: string };
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                    };
                    path: { note_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                note?: {
                                    id?: string;
                                    talent_id: string;
                                    application_id?: string;
                                    is_private?: boolean;
                                    create_time?: number;
                                    modify_time?: number;
                                    creator_id?: string;
                                    content: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/notes/:note_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * offer_schema
         */
        offerSchema: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=offer_schema&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=hire&resource=offer_schema&version=v1 document }
             */
            get: async (
                payload?: {
                    path: { offer_schema_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                id?: string;
                                scenario?: number;
                                version?: number;
                                object_list?: Array<{
                                    id?: string;
                                    name?: { zh_cn?: string; en_us?: string };
                                    type?: string;
                                    is_customized?: boolean;
                                    option_list?: Array<{
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        index?: number;
                                        active_status?: number;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/offer_schemas/:offer_schema_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 内推
         */
        referral: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=referral&apiName=get_by_application&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral/get_by_application document }
             *
             * 获取内推信息
             *
             * 根据投递 ID 获取内推信息
             */
            getByApplication: async (
                payload?: {
                    params: {
                        application_id: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                referral?: {
                                    id: string;
                                    application_id: string;
                                    create_time: number;
                                    referral_user_id: string;
                                    referral_user?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/referrals/get_by_application`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 简历来源
         */
        resumeSource: {
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/hire/v1/resume_sources`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    id?: string;
                                                    zh_name?: string;
                                                    en_name?: string;
                                                    active_status?: number;
                                                    resume_source_type?: number;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=resume_source&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/resume_source/list document }
             *
             * 获取简历来源列表
             *
             * 获取简历来源列表
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    zh_name?: string;
                                    en_name?: string;
                                    active_status?: number;
                                    resume_source_type?: number;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/resume_sources`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 人才
         */
        talent: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=talent&apiName=batch_get_id&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/batch_get_id document }
             *
             * 通过人才信息获取人才 ID
             *
             * 通过人才信息获取人才 ID
             */
            batchGetId: async (
                payload?: {
                    data?: {
                        mobile_code?: string;
                        mobile_number_list?: Array<string>;
                        email_list?: Array<string>;
                        identification_type?: number;
                        identification_number_list?: Array<string>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                talent?: Array<{
                                    talent_id?: string;
                                    mobile_code?: string;
                                    mobile_number?: string;
                                    email?: string;
                                    identification_type?: number;
                                    identification_number?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/talents/batch_get_id`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=talent&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/get document }
             *
             * 获取人才信息
             *
             * 根据人才 ID 获取人才信息
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                    };
                    path: { talent_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                talent?: {
                                    id?: string;
                                    is_in_agency_period?: boolean;
                                    is_onboarded?: boolean;
                                    basic_info?: {
                                        name: string;
                                        mobile?: string;
                                        mobile_code?: string;
                                        mobile_country_code?: string;
                                        email?: string;
                                        experience_years?: number;
                                        age?: number;
                                        nationality?: {
                                            nationality_code?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                        };
                                        gender?: number;
                                        current_city?: {
                                            city_code?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                        };
                                        hometown_city?: {
                                            city_code?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                        };
                                        preferred_city_list?: Array<{
                                            city_code?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                        }>;
                                        identification_type?: number;
                                        identification_number?: string;
                                        identification?: {
                                            identification_type?: number;
                                            identification_number?: string;
                                        };
                                        birthday?: number;
                                        creator_id?: string;
                                        marital_status?: number;
                                        current_home_address?: string;
                                        customized_data_list?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                                customized_attachment?: Array<{
                                                    file_id?: string;
                                                    file_name?: string;
                                                    content_type?: string;
                                                    file_size?: string;
                                                }>;
                                            };
                                        }>;
                                        modify_time?: string;
                                    };
                                    education_list?: Array<{
                                        id?: string;
                                        degree?: number;
                                        school?: string;
                                        field_of_study?: string;
                                        start_time?: string;
                                        end_time?: string;
                                        education_type?: number;
                                        academic_ranking?: number;
                                        tag_list?: Array<number>;
                                        customized_data_list?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                                customized_attachment?: Array<{
                                                    file_id?: string;
                                                    file_name?: string;
                                                    content_type?: string;
                                                    file_size?: string;
                                                }>;
                                            };
                                        }>;
                                    }>;
                                    career_list?: Array<{
                                        id?: string;
                                        company?: string;
                                        title?: string;
                                        desc?: string;
                                        start_time?: string;
                                        end_time?: string;
                                        career_type?: number;
                                        tag_list?: Array<number>;
                                        customized_data_list?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                                customized_attachment?: Array<{
                                                    file_id?: string;
                                                    file_name?: string;
                                                    content_type?: string;
                                                    file_size?: string;
                                                }>;
                                            };
                                        }>;
                                    }>;
                                    project_list?: Array<{
                                        id?: string;
                                        name?: string;
                                        role?: string;
                                        link?: string;
                                        desc?: string;
                                        start_time?: string;
                                        end_time?: string;
                                        customized_data_list?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                                customized_attachment?: Array<{
                                                    file_id?: string;
                                                    file_name?: string;
                                                    content_type?: string;
                                                    file_size?: string;
                                                }>;
                                            };
                                        }>;
                                    }>;
                                    works_list?: Array<{
                                        id?: string;
                                        link?: string;
                                        desc?: string;
                                        name?: string;
                                        customized_data_list?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                                customized_attachment?: Array<{
                                                    file_id?: string;
                                                    file_name?: string;
                                                    content_type?: string;
                                                    file_size?: string;
                                                }>;
                                            };
                                        }>;
                                    }>;
                                    award_list?: Array<{
                                        id?: string;
                                        title?: string;
                                        award_time?: string;
                                        desc?: string;
                                        customized_data_list?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                                customized_attachment?: Array<{
                                                    file_id?: string;
                                                    file_name?: string;
                                                    content_type?: string;
                                                    file_size?: string;
                                                }>;
                                            };
                                        }>;
                                    }>;
                                    language_list?: Array<{
                                        id?: string;
                                        language?: number;
                                        proficiency?: number;
                                        customized_data_list?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                                customized_attachment?: Array<{
                                                    file_id?: string;
                                                    file_name?: string;
                                                    content_type?: string;
                                                    file_size?: string;
                                                }>;
                                            };
                                        }>;
                                    }>;
                                    sns_list?: Array<{
                                        id?: string;
                                        sns_type?: number;
                                        link?: string;
                                        customized_data_list?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                                customized_attachment?: Array<{
                                                    file_id?: string;
                                                    file_name?: string;
                                                    content_type?: string;
                                                    file_size?: string;
                                                }>;
                                            };
                                        }>;
                                    }>;
                                    resume_source_list?: Array<{
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    }>;
                                    interview_registration_list?: Array<{
                                        id?: string;
                                        registration_time?: number;
                                    }>;
                                    resume_attachment_id_list?: Array<string>;
                                    customized_data_list?: Array<{
                                        object_id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        object_type?: number;
                                        children?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                                customized_attachment?: Array<{
                                                    file_id?: string;
                                                    file_name?: string;
                                                    content_type?: string;
                                                    file_size?: string;
                                                }>;
                                            };
                                        }>;
                                    }>;
                                    top_degree?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/talents/:talent_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * 实名认证
     */
    human_authentication = {
        /**
         * 实名认证
         */
        identity: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=human_authentication&resource=identity&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/human_authentication-v1/identity/create document }
             *
             * 录入身份信息
             *
             * 该接口用于录入实名认证的身份信息，在唤起有源活体认证前，需要使用该接口进行实名认证。
             *
             * 实名认证接口会有计费管理，接入前请联系飞书开放平台工作人员，邮箱：openplatform@bytedance.com。;;仅通过计费申请的应用，才能在[开发者后台](https://open.feishu.cn/app)查找并申请该接口的权限。
             */
            create: async (
                payload?: {
                    data: {
                        identity_name: string;
                        identity_code: string;
                        mobile?: string;
                    };
                    params: {
                        user_id: string;
                        user_id_type?: "open_id" | "user_id" | "union_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { verify_uid: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/human_authentication/v1/identities`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * 消息与群组
     */
    im = {
        /**
         * 消息 - 批量消息
         */
        batchMessage: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=batch_message&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/batch_message/delete document }
             *
             * 批量撤回消息
             *
             * 批量撤回通过[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)接口发送的消息。
             *
             * 注意事项：;- 应用需要启用[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability) ;- 撤回单条发送的消息请使用[撤回消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/delete)接口;- 不支持撤回发出时间超过1天的消息;- 一次调用涉及大量消息，所以为异步接口，会有一定延迟。
             */
            delete: async (
                payload?: {
                    path: { batch_message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/batch_messages/:batch_message_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=batch_message&apiName=get_progress&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/batch_message/get_progress document }
             *
             * 查询批量消息整体进度
             *
             * 该接口在[查询批量消息推送和阅读人数](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/batch_message/read_user)查询结果的基础上，增加了批量请求中有效的userid数量以及消息撤回进度数据。
             *
             * 注意事项:;* 该接口返回的数据为查询时刻的快照数据
             */
            getProgress: async (
                payload?: {
                    path: { batch_message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                batch_message_send_progress?: {
                                    valid_user_ids_count?: number;
                                    success_user_ids_count?: number;
                                    read_user_ids_count?: number;
                                };
                                batch_message_recall_progress?: {
                                    recall?: boolean;
                                    recall_count?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/batch_messages/:batch_message_id/get_progress`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=batch_message&apiName=read_user&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/batch_message/read_user document }
             *
             * 查询批量消息推送和阅读人数
             *
             * 批量发送消息后，可以通过该接口查询批量消息推送的总人数和阅读人数。
             *
             * 注意事项：;- 只能查询通过[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)接口产生的消息;- 该接口返回的数据为查询时刻的快照数据
             */
            readUser: async (
                payload?: {
                    path: { batch_message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                read_user?: {
                                    read_count: string;
                                    total_count: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/batch_messages/:batch_message_id/read_user`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 群组 - 群公告
         */
        chatAnnouncement: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.announcement&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-announcement/get document }
             *
             * 获取群公告信息
             *
             * 获取会话中的群公告信息，公告信息格式与[云文档](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)格式相同。
             *
             * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 机器人或授权用户必须在群里;- 获取内部群信息时，操作者须与群组在同一租户下
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                content?: string;
                                revision?: string;
                                create_time?: string;
                                update_time?: string;
                                owner_id_type?:
                                    | "user_id"
                                    | "union_id"
                                    | "open_id"
                                    | "app_id";
                                owner_id?: string;
                                modifier_id_type?:
                                    | "user_id"
                                    | "union_id"
                                    | "open_id"
                                    | "app_id";
                                modifier_id?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/announcement`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.announcement&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-announcement/patch document }
             *
             * 更新群公告信息
             *
             * 更新会话中的群公告信息，更新公告信息的格式和更新[云文档](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)格式相同。
             *
             * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 机器人或授权用户必须在群里;- 操作者需要拥有群公告文档的阅读权限;- 获取内部群信息时，操作者须与群组在同一租户下;- 若群开启了 ==仅群主和群管理员可编辑群信息== 配置，群主/群管理员 或 创建群组且具备 ==更新应用所创建群的群信息== 权限的机器人，可更新群公告;- 若群未开启 ==仅群主和群管理员可编辑群信息== 配置，所有成员可以更新群公告
             */
            patch: async (
                payload?: {
                    data: { revision: string; requests?: Array<string> };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/announcement`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 群组
         */
        chat: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create document }
             *
             * 创建群
             *
             * 创建群并设置群头像、群名、群描述等。
             *
             * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 本接口支持在创建群的同时拉用户或机器人进群；如果仅需要拉用户或者机器人入群参考 [将用户或机器人拉入群聊](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/create)接口
             */
            create: async (
                payload?: {
                    data?: {
                        avatar?: string;
                        name?: string;
                        description?: string;
                        i18n_names?: {
                            zh_cn?: string;
                            en_us?: string;
                            ja_jp?: string;
                        };
                        owner_id?: string;
                        user_id_list?: Array<string>;
                        bot_id_list?: Array<string>;
                        chat_mode?: string;
                        chat_type?: string;
                        external?: boolean;
                        join_message_visibility?: string;
                        leave_message_visibility?: string;
                        membership_approval?: string;
                        labels?: Array<string>;
                        toolkit_ids?: Array<string>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        set_bot_manager?: boolean;
                        uuid?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                chat_id?: string;
                                avatar?: string;
                                name?: string;
                                description?: string;
                                i18n_names?: {
                                    zh_cn?: string;
                                    en_us?: string;
                                    ja_jp?: string;
                                };
                                owner_id?: string;
                                owner_id_type?: string;
                                add_member_permission?: string;
                                share_card_permission?: string;
                                at_all_permission?: string;
                                edit_permission?: string;
                                chat_mode?: string;
                                chat_type?: string;
                                chat_tag?: string;
                                external?: boolean;
                                tenant_key?: string;
                                join_message_visibility?: string;
                                leave_message_visibility?: string;
                                membership_approval?: string;
                                moderation_permission?: string;
                                labels?: Array<string>;
                                toolkit_ids?: Array<string>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/delete document }
             *
             * 解散群
             *
             * 解散群组。
             *
             * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 如果使用tenant_access_token，需要机器人符合以下任一情况才可解散群：;    - 机器人是群主;    - 机器人是群的创建者且具备==更新应用所创建群的群信息==权限;- 如果使用user_access_token，需要对应的用户是群主才可解散群
             */
            delete: async (
                payload?: {
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get document }
             *
             * 获取群信息
             *
             * 获取群名称、群描述、群头像、群主 ID 等群基本信息。
             *
             * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability); - 机器人或授权用户必须在群里（否则只会返回群名称、群头像等基本信息）;- 获取内部群信息时，操作者须与群组在同一租户下
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                avatar?: string;
                                name?: string;
                                description?: string;
                                i18n_names?: {
                                    zh_cn?: string;
                                    en_us?: string;
                                    ja_jp?: string;
                                };
                                add_member_permission?: string;
                                share_card_permission?: string;
                                at_all_permission?: string;
                                edit_permission?: string;
                                owner_id_type?: string;
                                owner_id?: string;
                                chat_mode?: string;
                                chat_type?: string;
                                chat_tag?: string;
                                join_message_visibility?: string;
                                leave_message_visibility?: string;
                                membership_approval?: string;
                                moderation_permission?: string;
                                external?: boolean;
                                tenant_key?: string;
                                user_count?: string;
                                bot_count?: string;
                                labels?: Array<string>;
                                toolkit_ids?: Array<string>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=link&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/link document }
             *
             * 获取群分享链接
             *
             * 获取指定群的分享链接。
             *
             * 注意事项:;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability); - access_token所对应的 **机器人** 或 **授权用户** 必须在`chat_id`参数指定的群组中;- 单聊、密聊、团队群不支持分享群链接;- 当Bot被停用或Bot退出群组时，Bot生成的群链接也将停用;- 当群聊开启了 ==仅群主和群管理员可添加群成员/分享群== 设置时，仅**群主**和**群管理员**可以获取群分享链接;- 获取内部群分享链接时，操作者须与群组在同一租户下
             */
            link: async (
                payload?: {
                    data?: {
                        validity_period?: "week" | "year" | "permanently";
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                share_link?: string;
                                expire_time?: string;
                                is_permanent?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/link`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/im/v1/chats`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    chat_id?: string;
                                                    avatar?: string;
                                                    name?: string;
                                                    description?: string;
                                                    owner_id?: string;
                                                    owner_id_type?: string;
                                                    external?: boolean;
                                                    tenant_key?: string;
                                                    labels?: Array<string>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list document }
             *
             * 获取用户或机器人所在的群列表
             *
             * 获取用户或者机器人所在群列表。
             *
             * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 请注意区分本接口和[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)的请求 URL;- 获取的群列表不包含P2P单聊
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    chat_id?: string;
                                    avatar?: string;
                                    name?: string;
                                    description?: string;
                                    owner_id?: string;
                                    owner_id_type?: string;
                                    external?: boolean;
                                    tenant_key?: string;
                                    labels?: Array<string>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            searchWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        query?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/im/v1/chats/search`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    chat_id?: string;
                                                    avatar?: string;
                                                    name?: string;
                                                    description?: string;
                                                    owner_id?: string;
                                                    owner_id_type?: string;
                                                    external?: boolean;
                                                    tenant_key?: string;
                                                    labels?: Array<string>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=search&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search document }
             *
             * 搜索对用户或机器人可见的群列表
             *
             * 搜索对用户或机器人可见的群列表，包括：用户或机器人所在的群、对用户或机器人公开的群。;搜索可获得的群信息包括：群ID（chat_id）、群名称、群描述等。
             *
             * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)
             */
            search: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        query?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    chat_id?: string;
                                    avatar?: string;
                                    name?: string;
                                    description?: string;
                                    owner_id?: string;
                                    owner_id_type?: string;
                                    external?: boolean;
                                    tenant_key?: string;
                                    labels?: Array<string>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/search`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/update document }
             *
             * 更新群信息
             *
             * 更新群头像、群名称、群描述、群配置、转让群主等。
             *
             * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 对于群主/群管理员 或 创建群组且具备 ==更新应用所创建群的群信息== 权限的机器人，可更新所有信息;- 对于不满足上述权限条件的群成员或机器人：;    - 若未开启 ==仅群主和群管理员可编辑群信息== 配置，仅可更新群头像、群名称、群描述、群国际化名称信息;    - 若开启了 ==仅群主和群管理员可编辑群信息== 配置，任何群信息都不能修改;- 如果同时更新 ==邀请用户或机器人入群权限== 和 ==群分享权限== 这两项设置需要满足以下条件：;    - 若未开启 ==仅群主和管理员可以邀请用户或机器人入群==，需要设置 ==群分享权限== 为 ==允许分享==;    - 若开启了 ==仅群主和管理员可以邀请用户或机器人入群==，需要设置 ==群分享权限== 为 ==不允许分享==
             */
            update: async (
                payload?: {
                    data?: {
                        avatar?: string;
                        name?: string;
                        description?: string;
                        i18n_names?: {
                            zh_cn?: string;
                            en_us?: string;
                            ja_jp?: string;
                        };
                        add_member_permission?: string;
                        share_card_permission?: string;
                        at_all_permission?: string;
                        edit_permission?: string;
                        owner_id?: string;
                        join_message_visibility?: string;
                        leave_message_visibility?: string;
                        membership_approval?: string;
                        labels?: Array<string>;
                        toolkit_ids?: Array<string>;
                        chat_type?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 群组 - 群成员
         */
        chatManagers: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.managers&apiName=add_managers&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-managers/add_managers document }
             *
             * 指定群管理员
             *
             * 将用户或机器人指定为群管理员。
             *
             * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 仅有群主可以指定群管理员
             */
            addManagers: async (
                payload?: {
                    data?: { manager_ids?: Array<string> };
                    params?: {
                        member_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "app_id";
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                chat_managers?: Array<string>;
                                chat_bot_managers?: Array<string>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/managers/add_managers`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.managers&apiName=delete_managers&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-managers/delete_managers document }
             *
             * 删除群管理员
             *
             * 删除指定的群管理员（用户或机器人）。
             *
             * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 仅有群主可以删除群管理员
             */
            deleteManagers: async (
                payload?: {
                    data?: { manager_ids?: Array<string> };
                    params?: {
                        member_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "app_id";
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                chat_managers?: Array<string>;
                                chat_bot_managers?: Array<string>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/managers/delete_managers`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 群组 - 群成员
         */
        chatMembers: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.members&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/create document }
             *
             * 将用户或机器人拉入群聊
             *
             * 将用户或机器人拉入群聊。
             *
             * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability); - 如需拉用户进群，需要机器人对用户有[可用性](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability); - 机器人或授权用户必须在群组中;- 外部租户不能被加入到内部群中;- 操作内部群时，操作者须与群组在同一租户下; - 在开启 ==仅群主和群管理员可添加群成员== 的设置时，仅有群主/管理员 或 创建群组且具备 ==更新应用所创建群的群信息== 权限的机器人，可以拉用户或者机器人进群; - 在未开启 ==仅群主和群管理员可添加群成员== 的设置时，所有群成员都可以拉用户或机器人进群
             */
            create: async (
                payload?: {
                    data?: { id_list?: Array<string> };
                    params?: {
                        member_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "app_id";
                        succeed_type?: number;
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                invalid_id_list?: Array<string>;
                                not_existed_id_list?: Array<string>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/members`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.members&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/delete document }
             *
             * 将用户或机器人移出群聊
             *
             * 将用户或机器人移出群聊。
             *
             * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 用户或机器人在任何条件下均可移除自己出群（即主动退群）;- 仅有群主/管理员 或 创建群组并且具备 ==更新应用所创建群的群信息== 权限的机器人，可以移除其他用户或者机器人;- 每次请求，最多移除50个用户或者5个机器人;- 操作内部群时，操作者须与群组在同一租户下
             */
            delete: async (
                payload?: {
                    data?: { id_list?: Array<string> };
                    params?: {
                        member_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "app_id";
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { invalid_id_list?: Array<string> };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/members`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            getWithIterator: async (
                payload?: {
                    params?: {
                        member_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/im/v1/chats/:chat_id/members`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    member_id_type?: string;
                                                    member_id?: string;
                                                    name?: string;
                                                    tenant_key?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                                member_total?: number;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.members&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/get document }
             *
             * 获取群成员列表
             *
             * 获取用户/机器人所在群的群成员列表。
             *
             * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability); - 机器人或授权用户必须在群组中; - 该接口不会返回群内的机器人成员; - 由于返回的群成员列表会过滤掉机器人成员，因此返回的群成员个数可能会小于指定的page_size; - 如果有同一时间加入群的群成员，会一次性返回，这会导致返回的群成员个数可能会大于指定的page_size;- 获取内部群信息时，操作者须与群组在同一租户下
             */
            get: async (
                payload?: {
                    params?: {
                        member_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    member_id_type?: string;
                                    member_id?: string;
                                    name?: string;
                                    tenant_key?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                                member_total?: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/members`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.members&apiName=is_in_chat&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/is_in_chat document }
             *
             * 判断用户或机器人是否在群里
             *
             * 根据使用的access_token判断对应的用户或者机器人是否在群里。
             *
             * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 获取内部群信息时，操作者须与群组在同一租户下
             */
            isInChat: async (
                payload?: {
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { is_in_chat?: boolean };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/members/is_in_chat`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.members&apiName=me_join&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/me_join document }
             *
             * 用户或机器人主动加入群聊
             *
             * 用户或机器人主动加入群聊。
             *
             * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 目前仅支持加入公开群;- 操作内部群时，操作者须与群组在同一租户下
             */
            meJoin: async (
                payload?: {
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/members/me_join`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * chat.menu_item
         */
        chatMenuItem: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.menu_item&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-menu_item/patch document }
             *
             * 修改群菜单元信息
             *
             * 修改某个一级菜单或者二级菜单的元信息。
             *
             * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。;- 机器人必须在群里。
             */
            patch: async (
                payload?: {
                    data: {
                        update_fields: Array<
                            "ICON" | "NAME" | "I18N_NAME" | "REDIRECT_LINK"
                        >;
                        chat_menu_item: {
                            action_type?: "NONE" | "REDIRECT_LINK";
                            redirect_link?: {
                                common_url?: string;
                                ios_url?: string;
                                android_url?: string;
                                pc_url?: string;
                                web_url?: string;
                            };
                            image_key?: string;
                            name?: string;
                            i18n_names?: {
                                zh_cn?: string;
                                en_us?: string;
                                ja_jp?: string;
                            };
                        };
                    };
                    path?: { chat_id?: string; menu_item_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                chat_menu_item?: {
                                    action_type?: "NONE" | "REDIRECT_LINK";
                                    redirect_link?: {
                                        common_url?: string;
                                        ios_url?: string;
                                        android_url?: string;
                                        pc_url?: string;
                                        web_url?: string;
                                    };
                                    image_key?: string;
                                    name?: string;
                                    i18n_names?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/menu_items/:menu_item_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 群组 - 群菜单
         */
        chatMenuTree: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.menu_tree&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-menu_tree/create document }
             *
             * 添加群菜单
             *
             * 向群内添加群菜单。
             *
             * 注意事项：;- 该API是向群内追加菜单，群内原来存在的菜单并不会被覆盖。操作API后，将返回群内所有菜单。;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。;- 机器人必须在群里。;- 一个群内，一级菜单最多有3个，每个一级菜单最多有5个二级菜单。
             */
            create: async (
                payload?: {
                    data: {
                        menu_tree: {
                            chat_menu_top_levels: Array<{
                                chat_menu_item: {
                                    action_type: "NONE" | "REDIRECT_LINK";
                                    redirect_link?: {
                                        common_url?: string;
                                        ios_url?: string;
                                        android_url?: string;
                                        pc_url?: string;
                                        web_url?: string;
                                    };
                                    image_key?: string;
                                    name: string;
                                    i18n_names?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                };
                                children?: Array<{
                                    chat_menu_item?: {
                                        action_type?: "NONE" | "REDIRECT_LINK";
                                        redirect_link?: {
                                            common_url?: string;
                                            ios_url?: string;
                                            android_url?: string;
                                            pc_url?: string;
                                            web_url?: string;
                                        };
                                        image_key?: string;
                                        name?: string;
                                        i18n_names?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                            ja_jp?: string;
                                        };
                                    };
                                }>;
                            }>;
                        };
                    };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                menu_tree?: {
                                    chat_menu_top_levels?: Array<{
                                        chat_menu_top_level_id?: string;
                                        chat_menu_item?: {
                                            action_type?:
                                                | "NONE"
                                                | "REDIRECT_LINK";
                                            redirect_link?: {
                                                common_url?: string;
                                                ios_url?: string;
                                                android_url?: string;
                                                pc_url?: string;
                                                web_url?: string;
                                            };
                                            image_key?: string;
                                            name?: string;
                                            i18n_names?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                                ja_jp?: string;
                                            };
                                        };
                                        children?: Array<{
                                            chat_menu_second_level_id?: string;
                                            chat_menu_item?: {
                                                action_type?:
                                                    | "NONE"
                                                    | "REDIRECT_LINK";
                                                redirect_link?: {
                                                    common_url?: string;
                                                    ios_url?: string;
                                                    android_url?: string;
                                                    pc_url?: string;
                                                    web_url?: string;
                                                };
                                                image_key?: string;
                                                name?: string;
                                                i18n_names?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                    ja_jp?: string;
                                                };
                                            };
                                        }>;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/menu_tree`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.menu_tree&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-menu_tree/delete document }
             *
             * 删除群菜单。
             *
             * 删除群内菜单。
             *
             * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。;- 机器人必须在群里。;- 操作API后，将返回群内所有菜单。
             */
            delete: async (
                payload?: {
                    data: { chat_menu_top_level_ids: Array<string> };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                menu_tree?: {
                                    chat_menu_top_levels?: Array<{
                                        chat_menu_top_level_id?: string;
                                        chat_menu_item?: {
                                            action_type?:
                                                | "NONE"
                                                | "REDIRECT_LINK";
                                            redirect_link?: {
                                                common_url?: string;
                                                ios_url?: string;
                                                android_url?: string;
                                                pc_url?: string;
                                                web_url?: string;
                                            };
                                            image_key?: string;
                                            name?: string;
                                            i18n_names?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                                ja_jp?: string;
                                            };
                                        };
                                        children?: Array<{
                                            chat_menu_second_level_id?: string;
                                            chat_menu_item?: {
                                                action_type?:
                                                    | "NONE"
                                                    | "REDIRECT_LINK";
                                                redirect_link?: {
                                                    common_url?: string;
                                                    ios_url?: string;
                                                    android_url?: string;
                                                    pc_url?: string;
                                                    web_url?: string;
                                                };
                                                image_key?: string;
                                                name?: string;
                                                i18n_names?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                    ja_jp?: string;
                                                };
                                            };
                                        }>;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/menu_tree`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.menu_tree&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-menu_tree/get document }
             *
             * 获取群内菜单
             *
             * 通过群ID获取群内菜单。
             *
             * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。;- 机器人必须在群里。
             */
            get: async (
                payload?: {
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                menu_tree?: {
                                    chat_menu_top_levels?: Array<{
                                        chat_menu_top_level_id?: string;
                                        chat_menu_item?: {
                                            action_type?:
                                                | "NONE"
                                                | "REDIRECT_LINK";
                                            redirect_link?: {
                                                common_url?: string;
                                                ios_url?: string;
                                                android_url?: string;
                                                pc_url?: string;
                                                web_url?: string;
                                            };
                                            image_key?: string;
                                            name?: string;
                                            i18n_names?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                                ja_jp?: string;
                                            };
                                        };
                                        children?: Array<{
                                            chat_menu_second_level_id?: string;
                                            chat_menu_item?: {
                                                action_type?:
                                                    | "NONE"
                                                    | "REDIRECT_LINK";
                                                redirect_link?: {
                                                    common_url?: string;
                                                    ios_url?: string;
                                                    android_url?: string;
                                                    pc_url?: string;
                                                    web_url?: string;
                                                };
                                                image_key?: string;
                                                name?: string;
                                                i18n_names?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                    ja_jp?: string;
                                                };
                                            };
                                        }>;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/menu_tree`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.menu_tree&apiName=sort&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-menu_tree/sort document }
             *
             * 排序群菜单
             *
             * 给一个群内的一级菜单排序。
             *
             * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。;- 机器人必须在群里。;- 操作API后，将返回群内所有菜单。
             */
            sort: async (
                payload?: {
                    data: { chat_menu_top_level_ids: Array<string> };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                menu_tree?: {
                                    chat_menu_top_levels?: Array<{
                                        chat_menu_top_level_id?: string;
                                        chat_menu_item?: {
                                            action_type?:
                                                | "NONE"
                                                | "REDIRECT_LINK";
                                            redirect_link?: {
                                                common_url?: string;
                                                ios_url?: string;
                                                android_url?: string;
                                                pc_url?: string;
                                                web_url?: string;
                                            };
                                            image_key?: string;
                                            name?: string;
                                            i18n_names?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                                ja_jp?: string;
                                            };
                                        };
                                        children?: Array<{
                                            chat_menu_second_level_id?: string;
                                            chat_menu_item?: {
                                                action_type?:
                                                    | "NONE"
                                                    | "REDIRECT_LINK";
                                                redirect_link?: {
                                                    common_url?: string;
                                                    ios_url?: string;
                                                    android_url?: string;
                                                    pc_url?: string;
                                                    web_url?: string;
                                                };
                                                image_key?: string;
                                                name?: string;
                                                i18n_names?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                    ja_jp?: string;
                                                };
                                            };
                                        }>;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/menu_tree/sort`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * chat.moderation
         */
        chatModeration: {
            getWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/im/v1/chats/:chat_id/moderation`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                moderation_setting?: string;
                                                page_token?: string;
                                                has_more?: boolean;
                                                items?: Array<{
                                                    user_id_type?: string;
                                                    user_id?: string;
                                                    tenant_key?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.moderation&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-moderation/get document }
             *
             * 获取群成员发言权限
             *
             * 获取群发言模式、可发言用户名单等
             *
             * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability); - 机器人 或 授权用户 必须在群里
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                moderation_setting?: string;
                                page_token?: string;
                                has_more?: boolean;
                                items?: Array<{
                                    user_id_type?: string;
                                    user_id?: string;
                                    tenant_key?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/moderation`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.moderation&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-moderation/update document }
             *
             * 更新群发言权限
             *
             * 更新群组的发言权限设置，可设置为全员可发言、仅管理员可发言  或 指定用户可发言。
             *
             * 注意事项：; - 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 若以用户授权调用接口，**当授权用户是群主**时，可更新群发言权限;- 若以租户授权调用接口(即以机器人身份调用接口)，当**机器人是群主** 或者 **机器人是群组创建者、具备==更新应用所创建群的群信息==权限且仍在群内**时，可更新群发言权限
             */
            update: async (
                payload?: {
                    data?: {
                        moderation_setting?: string;
                        moderator_added_list?: Array<string>;
                        moderator_removed_list?: Array<string>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/moderation`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 群组 - 会话标签页
         */
        chatTab: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.tab&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-tab/create document }
             *
             * 添加会话标签页
             *
             * 添加自定义会话标签页。
             *
             * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 机器人或授权用户必须在群里;- 只允许添加类型为`doc`和`url`的会话标签页;- 添加doc类型时，操作者（access token对应的身份）需要拥有对应文档的权限;- tab_config字段当前只对`url`类型的会话标签页生效;- 在开启 ==仅群主和管理员可管理标签页== 的设置时，仅群主和群管理员可以添加会话标签页;- 操作内部群时，操作者须与群组在同一租户下
             */
            create: async (
                payload?: {
                    data: {
                        chat_tabs: Array<{
                            tab_name?: string;
                            tab_type:
                                | "message"
                                | "doc_list"
                                | "doc"
                                | "pin"
                                | "meeting_minute"
                                | "chat_announcement"
                                | "url"
                                | "file";
                            tab_content?: {
                                url?: string;
                                doc?: string;
                                meeting_minute?: string;
                            };
                            tab_config?: {
                                icon_key?: string;
                                is_built_in?: boolean;
                            };
                        }>;
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                chat_tabs?: Array<{
                                    tab_id?: string;
                                    tab_name?: string;
                                    tab_type:
                                        | "message"
                                        | "doc_list"
                                        | "doc"
                                        | "pin"
                                        | "meeting_minute"
                                        | "chat_announcement"
                                        | "url"
                                        | "file";
                                    tab_content?: {
                                        url?: string;
                                        doc?: string;
                                        meeting_minute?: string;
                                    };
                                    tab_config?: {
                                        icon_key?: string;
                                        is_built_in?: boolean;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/chat_tabs`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.tab&apiName=delete_tabs&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-tab/delete_tabs document }
             *
             * 删除会话标签页
             *
             * 删除会话标签页。
             *
             * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 机器人或授权用户必须在群里;- 只允许删除类型为`doc`和`url`的会话标签页;- 在开启 ==仅群主和管理员可管理标签页== 的设置时，仅群主和群管理员可以删除会话标签页;- 操作内部群时，操作者须与群组在同一租户下
             */
            deleteTabs: async (
                payload?: {
                    data: { tab_ids: Array<string> };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                chat_tabs?: Array<{
                                    tab_id?: string;
                                    tab_name?: string;
                                    tab_type:
                                        | "message"
                                        | "doc_list"
                                        | "doc"
                                        | "pin"
                                        | "meeting_minute"
                                        | "chat_announcement"
                                        | "url"
                                        | "file";
                                    tab_content?: {
                                        url?: string;
                                        doc?: string;
                                        meeting_minute?: string;
                                    };
                                    tab_config?: {
                                        icon_key?: string;
                                        is_built_in?: boolean;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/chat_tabs/delete_tabs`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.tab&apiName=list_tabs&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-tab/list_tabs document }
             *
             * 拉取会话标签页
             *
             * 拉取会话标签页。
             *
             * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 机器人或授权用户必须在群里;- 操作内部群时，操作者须与群组在同一租户下
             */
            listTabs: async (
                payload?: {
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                chat_tabs?: Array<{
                                    tab_id?: string;
                                    tab_name?: string;
                                    tab_type:
                                        | "message"
                                        | "doc_list"
                                        | "doc"
                                        | "pin"
                                        | "meeting_minute"
                                        | "chat_announcement"
                                        | "url"
                                        | "file";
                                    tab_content?: {
                                        url?: string;
                                        doc?: string;
                                        meeting_minute?: string;
                                    };
                                    tab_config?: {
                                        icon_key?: string;
                                        is_built_in?: boolean;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/chat_tabs/list_tabs`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.tab&apiName=sort_tabs&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-tab/sort_tabs document }
             *
             * 会话标签页排序
             *
             * 会话标签页排序。
             *
             * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 机器人或授权用户必须在群里;- 消息标签页强制固定为第一顺位，不参与排序，但是请求体中必须包含该标签页的Tab ID;- 操作内部群时，操作者须与群组在同一租户下
             */
            sortTabs: async (
                payload?: {
                    data?: { tab_ids?: Array<string> };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                chat_tabs?: Array<{
                                    tab_id?: string;
                                    tab_name?: string;
                                    tab_type:
                                        | "message"
                                        | "doc_list"
                                        | "doc"
                                        | "pin"
                                        | "meeting_minute"
                                        | "chat_announcement"
                                        | "url"
                                        | "file";
                                    tab_content?: {
                                        url?: string;
                                        doc?: string;
                                        meeting_minute?: string;
                                    };
                                    tab_config?: {
                                        icon_key?: string;
                                        is_built_in?: boolean;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/chat_tabs/sort_tabs`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.tab&apiName=update_tabs&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-tab/update_tabs document }
             *
             * 更新会话标签页
             *
             * 更新会话标签页
             *
             * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 机器人或授权用户必须在群里;- 只允许更新类型为`doc`和`url`的会话标签页;- 更新doc类型时，操作者（access token对应的身份）需要拥有对应文档的权限;- 在开启 ==仅群主和管理员可管理标签页== 的设置时，仅群主和群管理员可以更新会话标签页;- 操作内部群时，操作者须与群组在同一租户下
             */
            updateTabs: async (
                payload?: {
                    data?: {
                        chat_tabs?: Array<{
                            tab_id?: string;
                            tab_name?: string;
                            tab_type:
                                | "message"
                                | "doc_list"
                                | "doc"
                                | "pin"
                                | "meeting_minute"
                                | "chat_announcement"
                                | "url"
                                | "file";
                            tab_content?: {
                                url?: string;
                                doc?: string;
                                meeting_minute?: string;
                            };
                            tab_config?: {
                                icon_key?: string;
                                is_built_in?: boolean;
                            };
                        }>;
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                chat_tabs?: Array<{
                                    tab_id?: string;
                                    tab_name?: string;
                                    tab_type:
                                        | "message"
                                        | "doc_list"
                                        | "doc"
                                        | "pin"
                                        | "meeting_minute"
                                        | "chat_announcement"
                                        | "url"
                                        | "file";
                                    tab_content?: {
                                        url?: string;
                                        doc?: string;
                                        meeting_minute?: string;
                                    };
                                    tab_config?: {
                                        icon_key?: string;
                                        is_built_in?: boolean;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/chat_tabs/update_tabs`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * chat.top_notice
         */
        chatTopNotice: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.top_notice&apiName=delete_top_notice&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-top_notice/delete_top_notice document }
             *
             * 撤销群置顶
             *
             * 撤销会话中的置顶。
             *
             * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability); - 机器人或授权用户必须在群组中;- 撤销内部群置顶时，操作者须与群组在同一租户下
             */
            deleteTopNotice: async (
                payload?: {
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/top_notice/delete_top_notice`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.top_notice&apiName=put_top_notice&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-top_notice/put_top_notice document }
             *
             * 更新群置顶
             *
             * 更新会话中的群置顶信息，可以将群中的某一条消息，或者群公告置顶显示。
             *
             * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability); - 机器人或授权用户必须在群组中;- 更新内部群置顶时，操作者须与群组在同一租户下
             */
            putTopNotice: async (
                payload?: {
                    data: {
                        chat_top_notice: Array<{
                            action_type?: "1" | "2";
                            message_id?: string;
                        }>;
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/top_notice/put_top_notice`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 消息 - 文件信息
         */
        file: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=file&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/file/create document }
             *
             * 上传文件
             *
             * 上传文件，可以上传视频，音频和常见的文件类型。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 文件大小不得超过30M，且不允许上传空文件
             */
            create: async (
                payload?: {
                    data: {
                        file_type:
                            | "opus"
                            | "mp4"
                            | "pdf"
                            | "doc"
                            | "xls"
                            | "ppt"
                            | "stream";
                        file_name: string;
                        duration?: number;
                        file: Buffer;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { file_key?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/files`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=file&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/file/get document }
             *
             * 下载文件
             *
             * 下载文件接口，只能下载应用自己上传的文件。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 只能下载机器人自己上传的文件;- 下载用户发送的资源，请使用[获取消息中的资源文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-resource/get)接口;- 下载的资源大小不能超过100M;- 如果需要Content-Disposition header，发起请求的时候需要在header中设置Content-Type为application/json
             */
            get: async (
                payload?: {
                    path: { file_key: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/files/:file_key`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        return new Promise((resolve, reject) => {
                            const writableStream =
                                fs.createWriteStream(filePath);
                            writableStream.on("finish", () => {
                                resolve(filePath);
                            });
                            writableStream.on("error", (e) => {
                                reject(e);
                            });
                            res.pipe(writableStream);
                        });
                    },
                };
            },
        },
        /**
         * 消息 - 图片信息
         */
        image: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=image&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/create document }
             *
             * 上传图片
             *
             * 上传图片接口，支持上传 JPEG、PNG、WEBP、GIF、TIFF、BMP、ICO格式图片。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 图片大小不得超过10M，且不支持上传大小为0的图片
             */
            create: async (
                payload?: {
                    data: { image_type: "message" | "avatar"; image: Buffer };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { image_key?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/images`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=image&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/get document }
             *
             * 下载图片
             *
             * 下载图片资源，只能下载当前应用所上传且图片类型为message的图片。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 只能下载机器人自己上传且图片类型为message的图片，avatar类型暂不支持下载;- 下载用户发送的资源，请使用[获取消息中的资源文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-resource/get)接口
             */
            get: async (
                payload?: {
                    path: { image_key: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/images/:image_key`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        return new Promise((resolve, reject) => {
                            const writableStream =
                                fs.createWriteStream(filePath);
                            writableStream.on("finish", () => {
                                resolve(filePath);
                            });
                            writableStream.on("error", (e) => {
                                reject(e);
                            });
                            res.pipe(writableStream);
                        });
                    },
                };
            },
        },
        /**
         * 消息
         */
        message: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create document }
             *
             * 发送消息
             *
             * 给指定用户或者会话发送消息，支持文本、富文本、可交互的[消息卡片](https://open.feishu.cn/document/ukTMukTMukTM/uczM3QjL3MzN04yNzcDN)、群名片、个人名片、图片、视频、音频、文件、表情包。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 给用户发送消息，需要机器人对用户有[可用性](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability);- 给群组发送消息，需要机器人在群组中
             */
            create: async (
                payload?: {
                    data: {
                        receive_id: string;
                        msg_type: string;
                        content: string;
                        uuid?: string;
                    };
                    params: {
                        receive_id_type:
                            | "open_id"
                            | "user_id"
                            | "union_id"
                            | "email"
                            | "chat_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                message_id?: string;
                                root_id?: string;
                                parent_id?: string;
                                msg_type?: string;
                                create_time?: string;
                                update_time?: string;
                                deleted?: boolean;
                                updated?: boolean;
                                chat_id?: string;
                                sender?: {
                                    id: string;
                                    id_type: string;
                                    sender_type: string;
                                    tenant_key?: string;
                                };
                                body?: { content: string };
                                mentions?: Array<{
                                    key: string;
                                    id: string;
                                    id_type: string;
                                    name: string;
                                    tenant_key?: string;
                                }>;
                                upper_message_id?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/delete document }
             *
             * 撤回消息
             *
             * 机器人撤回机器人自己发送的消息或群主撤回群内消息。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ，撤回消息时机器人仍需要在会话内;- 机器人可以撤回单聊和群组内，自己发送 且 发送时间不超过1天(24小时)的消息;- 若机器人要撤回群内他人发送的消息，则机器人必须是该群的群主、管理员 或者 创建者，且消息发送时间不超过1年;- 无法撤回通过「[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)」接口发送的消息
             */
            delete: async (
                payload?: {
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/get document }
             *
             * 获取指定消息的内容
             *
             * 通过 message_id 查询消息内容。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 机器人必须在群组中
             */
            get: async (
                payload?: {
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    message_id?: string;
                                    root_id?: string;
                                    parent_id?: string;
                                    msg_type?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    deleted?: boolean;
                                    updated?: boolean;
                                    chat_id?: string;
                                    sender?: {
                                        id: string;
                                        id_type: string;
                                        sender_type: string;
                                        tenant_key?: string;
                                    };
                                    body?: { content: string };
                                    mentions?: Array<{
                                        key: string;
                                        id: string;
                                        id_type: string;
                                        name: string;
                                        tenant_key?: string;
                                    }>;
                                    upper_message_id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params: {
                        container_id_type: string;
                        container_id: string;
                        start_time?: string;
                        end_time?: string;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/im/v1/messages`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    message_id?: string;
                                                    root_id?: string;
                                                    parent_id?: string;
                                                    msg_type?: string;
                                                    create_time?: string;
                                                    update_time?: string;
                                                    deleted?: boolean;
                                                    updated?: boolean;
                                                    chat_id?: string;
                                                    sender?: {
                                                        id: string;
                                                        id_type: string;
                                                        sender_type: string;
                                                        tenant_key?: string;
                                                    };
                                                    body?: { content: string };
                                                    mentions?: Array<{
                                                        key: string;
                                                        id: string;
                                                        id_type: string;
                                                        name: string;
                                                        tenant_key?: string;
                                                    }>;
                                                    upper_message_id?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list document }
             *
             * 获取会话历史消息
             *
             * 获取会话（包括单聊、群组）的历史消息（聊天记录）。
             *
             * - 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 获取消息时，机器人必须在群组中
             *
             * 接口级别权限默认只能获取单聊（p2p）消息，如果需要获取群组（group）消息，应用还必须拥有 **==获取群组中所有消息==** 权限
             */
            list: async (
                payload?: {
                    params: {
                        container_id_type: string;
                        container_id: string;
                        start_time?: string;
                        end_time?: string;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    message_id?: string;
                                    root_id?: string;
                                    parent_id?: string;
                                    msg_type?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    deleted?: boolean;
                                    updated?: boolean;
                                    chat_id?: string;
                                    sender?: {
                                        id: string;
                                        id_type: string;
                                        sender_type: string;
                                        tenant_key?: string;
                                    };
                                    body?: { content: string };
                                    mentions?: Array<{
                                        key: string;
                                        id: string;
                                        id_type: string;
                                        name: string;
                                        tenant_key?: string;
                                    }>;
                                    upper_message_id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/patch document }
             *
             * 更新应用发送的消息
             *
             * 更新应用已发送的消息卡片内容。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 若以user_access_token更新消息，该操作用户必须是卡片消息的发送者;- 仅支持对所有人更新**未撤回**的[「共享卡片」](ukTMukTMukTM/uAjNwUjLwYDM14CM2ATN)消息，需在卡片的config属性中，显式声明 =="update_multi":true==。 ;- **不支持更新批量消息**;- 文本消息请求体最大不能超过150KB；卡片及富文本消息请求体最大不能超过30KB;- 仅支持修改14天内发送的消息;- 单条消息更新频控为**5QPS**
             */
            patch: async (
                payload?: {
                    data: { content: string };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=read_users&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/read_users document }
             *
             * 查询消息已读信息
             *
             * 查询消息的已读信息。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 只能查询机器人自己发送，且发送时间不超过7天的消息;- 查询消息已读信息时机器人仍需要在会话内;- 本接口不支持查询批量消息
             */
            readUsers: async (
                payload?: {
                    params: {
                        user_id_type: "user_id" | "union_id" | "open_id";
                        page_size?: number;
                        page_token?: string;
                    };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    user_id_type: string;
                                    user_id: string;
                                    timestamp: string;
                                    tenant_key?: string;
                                }>;
                                has_more: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/read_users`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=reply&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/reply document }
             *
             * 回复消息
             *
             * 回复指定消息，支持文本、富文本、卡片、群名片、个人名片、图片、视频、文件等多种消息类型。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 回复私聊消息，需要机器人对用户有[可用性](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability);- 回复群组消息，需要机器人在群中
             */
            reply: async (
                payload?: {
                    data: { content: string; msg_type: string; uuid?: string };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                message_id?: string;
                                root_id?: string;
                                parent_id?: string;
                                msg_type?: string;
                                create_time?: string;
                                update_time?: string;
                                deleted?: boolean;
                                updated?: boolean;
                                chat_id?: string;
                                sender?: {
                                    id: string;
                                    id_type: string;
                                    sender_type: string;
                                    tenant_key?: string;
                                };
                                body?: { content: string };
                                mentions?: Array<{
                                    key: string;
                                    id: string;
                                    id_type: string;
                                    name: string;
                                    tenant_key?: string;
                                }>;
                                upper_message_id?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/reply`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=urgent_app&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/urgent_app document }
             *
             * 发送应用内加急
             *
             * 对指定消息进行应用内加急。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 不支持加急批量消息;- 只能加急机器人自己发送的消息;- 加急时机器人需要在加急消息所在的群中;- 调用本接口需要用户已阅读加急的消息才可以继续加急（用户未读的加急上限为200条）
             *
             * 特别说明：;- 默认接口限流为50 QPS，请谨慎调用
             */
            urgentApp: async (
                payload?: {
                    data: { user_id_list: Array<string> };
                    params: {
                        user_id_type: "user_id" | "union_id" | "open_id";
                    };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { invalid_user_id_list: Array<string> };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/urgent_app`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=urgent_phone&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/urgent_phone document }
             *
             * 发送电话加急
             *
             * 对指定消息进行应用内加急与电话加急。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 只能加急机器人自己发送的消息;- 加急时机器人需要在加急消息所在的群组中;- 需要用户阅读已加急的消息才可以继续加急（用户未读的加急上限为200条）
             *
             * 特别说明：;- 通过接口产生的电话加急将消耗企业的加急额度，请慎重调用;- 通过[租户管理后台](https://admin.feishu.cn/)-费用中心-短信/电话加急 可以查看当前额度;- 默认接口限流为50 QPS，请谨慎调用
             */
            urgentPhone: async (
                payload?: {
                    data: { user_id_list: Array<string> };
                    params: {
                        user_id_type: "user_id" | "union_id" | "open_id";
                    };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { invalid_user_id_list: Array<string> };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/urgent_phone`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=urgent_sms&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/urgent_sms document }
             *
             * 发送短信加急
             *
             * 对指定消息进行应用内加急与短信加急。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 只能加急机器人自己发送的消息;- 加急时机器人仍需要在加急消息所在的群组中;- 调用本接口需要用户已阅读加急的消息才可以继续加急（用户未读的加急上限为200条）
             *
             * 特别说明：;- 通过接口产生的短信加急将消耗企业的加急额度，请慎重调用;- 通过[租户管理后台](https://admin.feishu.cn/)-费用中心-短信/电话加急 可以查看当前额度;- 默认接口限流为50 QPS，请谨慎调用
             */
            urgentSms: async (
                payload?: {
                    data: { user_id_list: Array<string> };
                    params: {
                        user_id_type: "user_id" | "union_id" | "open_id";
                    };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { invalid_user_id_list: Array<string> };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/urgent_sms`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 消息 - 表情回复
         */
        messageReaction: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message.reaction&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-reaction/create document }
             *
             * 添加消息表情回复
             *
             * 给指定消息添加指定类型的表情回复（reaction即表情回复，本文档统一用“reaction”代称）。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 待添加reaction的消息要真实存在，不能被撤回;- 给消息添加reaction，需要reaction的发送方（机器人或者用户）在消息所在的会话内
             */
            create: async (
                payload?: {
                    data: { reaction_type: { emoji_type: string } };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                reaction_id?: string;
                                operator?: {
                                    operator_id: string;
                                    operator_type: "app" | "user";
                                };
                                action_time?: string;
                                reaction_type?: { emoji_type: string };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/reactions`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message.reaction&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-reaction/delete document }
             *
             * 删除消息表情回复
             *
             * 删除指定消息的表情回复（reaction即表情回复，本文档统一用“reaction”代称）。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 只能删除真实存在的reaction，并且删除reaction请求的操作者必须是reaction的原始添加者
             */
            delete: async (
                payload?: {
                    path: { message_id: string; reaction_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                reaction_id?: string;
                                operator?: {
                                    operator_id: string;
                                    operator_type: "app" | "user";
                                };
                                action_time?: string;
                                reaction_type?: { emoji_type: string };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/reactions/:reaction_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        reaction_type?: string;
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "open_id" | "union_id" | "user_id";
                    };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/im/v1/messages/:message_id/reactions`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items: Array<{
                                                    reaction_id?: string;
                                                    operator?: {
                                                        operator_id: string;
                                                        operator_type:
                                                            | "app"
                                                            | "user";
                                                    };
                                                    action_time?: string;
                                                    reaction_type?: {
                                                        emoji_type: string;
                                                    };
                                                }>;
                                                has_more: boolean;
                                                page_token: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message.reaction&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-reaction/list document }
             *
             * 获取消息表情回复
             *
             * 获取指定消息的特定类型表情回复列表（reaction即表情回复，本文档统一用“reaction”代称）。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 待获取reaction信息的消息要真实存在，不能被撤回;- 获取消息的reaction，需要request的授权主体（机器人或者用户）在消息所在的会话内
             */
            list: async (
                payload?: {
                    params?: {
                        reaction_type?: string;
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "open_id" | "union_id" | "user_id";
                    };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items: Array<{
                                    reaction_id?: string;
                                    operator?: {
                                        operator_id: string;
                                        operator_type: "app" | "user";
                                    };
                                    action_time?: string;
                                    reaction_type?: { emoji_type: string };
                                }>;
                                has_more: boolean;
                                page_token: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/reactions`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * message.resource
         */
        messageResource: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message.resource&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-resource/get document }
             *
             * 获取消息中的资源文件
             *
             * 获取消息中的资源文件，包括音频，视频，图片和文件，**暂不支持表情包资源下载**。当前仅支持 100M 以内的资源文件的下载。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 机器人和消息需要在同一会话中;- 暂不支持获取合并转发消息中的子消息的资源文件
             */
            get: async (
                payload?: {
                    params: { type: string };
                    path: { message_id: string; file_key: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/resources/:file_key`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        return new Promise((resolve, reject) => {
                            const writableStream =
                                fs.createWriteStream(filePath);
                            writableStream.on("finish", () => {
                                resolve(filePath);
                            });
                            writableStream.on("error", (e) => {
                                reject(e);
                            });
                            res.pipe(writableStream);
                        });
                    },
                };
            },
        },
        /**
         * 消息 - Pin
         */
        pin: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=pin&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/pin/create document }
             *
             * Pin消息
             *
             * Pin一条指定的消息。
             *
             * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- Pin消息时，机器人必须在对应的群组中;- 若消息已经被Pin，返回该Pin的操作信息;- 不能Pin一条对操作者不可见的消息;- 对同一条消息的Pin操作不能超过==5 QPS==
             */
            create: async (
                payload?: {
                    data: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                pin?: {
                                    message_id: string;
                                    chat_id?: string;
                                    operator_id?: string;
                                    operator_id_type?: string;
                                    create_time?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/pins`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=pin&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/pin/delete document }
             *
             * 移除Pin消息
             *
             * 移除一条指定消息的Pin。
             *
             * 注意事项：;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 移除Pin消息时，机器人必须在对应的群组中;- 若消息未被Pin或已被撤回，返回成功信息;- 不能移除一条对操作者不可见的Pin消息;- 对同一条消息移除Pin的操作不能超过==5 QPS==
             */
            delete: async (
                payload?: {
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/pins/:message_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params: {
                        chat_id: string;
                        start_time?: string;
                        end_time?: string;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/im/v1/pins`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    message_id: string;
                                                    chat_id?: string;
                                                    operator_id?: string;
                                                    operator_id_type?: string;
                                                    create_time?: string;
                                                }>;
                                                has_more?: boolean;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=pin&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/pin/list document }
             *
             * 获取群内Pin消息
             *
             * 获取所在群内指定时间范围内的所有Pin消息。
             *
             * 注意事项：;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 获取Pin消息时，机器人必须在群组中;- 获取的Pin消息按Pin的创建时间降序排列;- 接口默认限流为==50 QPS==
             */
            list: async (
                payload?: {
                    params: {
                        chat_id: string;
                        start_time?: string;
                        end_time?: string;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    message_id: string;
                                    chat_id?: string;
                                    operator_id?: string;
                                    operator_id_type?: string;
                                    create_time?: string;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/pins`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * 邮箱
     */
    mail = {
        /**
         * 邮件组别名
         */
        mailgroupAlias: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.alias&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-alias/create document }
             *
             * 创建邮件组别名
             *
             * 创建邮件组别名
             */
            create: async (
                payload?: {
                    data?: { email_alias?: string };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                mailgroup_alias?: {
                                    primary_email?: string;
                                    email_alias?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.alias&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-alias/delete document }
             *
             * 删除邮件组别名
             *
             * 删除邮件组别名
             */
            delete: async (
                payload?: {
                    path?: { mailgroup_id?: string; alias_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases/:alias_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.alias&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-alias/list document }
             *
             * 获取邮件组所有别名
             *
             * 获取邮件组所有别名
             */
            list: async (
                payload?: {
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    primary_email?: string;
                                    email_alias?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 邮件组
         */
        mailgroup: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/create document }
             *
             * 创建邮件组
             *
             * 创建一个邮件组
             */
            create: async (
                payload?: {
                    data?: {
                        email?: string;
                        name?: string;
                        description?: string;
                        who_can_send_mail?:
                            | "ANYONE"
                            | "ALL_INTERNAL_USERS"
                            | "ALL_GROUP_MEMBERS"
                            | "CUSTOM_MEMBERS";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                mailgroup_id?: string;
                                email?: string;
                                name?: string;
                                description?: string;
                                direct_members_count?: string;
                                include_external_member?: boolean;
                                include_all_company_member?: boolean;
                                who_can_send_mail?:
                                    | "ANYONE"
                                    | "ALL_INTERNAL_USERS"
                                    | "ALL_GROUP_MEMBERS"
                                    | "CUSTOM_MEMBERS";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/delete document }
             *
             * 删除邮件组
             *
             * 删除一个邮件组
             */
            delete: async (
                payload?: {
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/get document }
             *
             * 获取邮件组
             *
             * 获取特定邮件组信息
             */
            get: async (
                payload?: {
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                mailgroup_id?: string;
                                email?: string;
                                name?: string;
                                description?: string;
                                direct_members_count?: string;
                                include_external_member?: boolean;
                                include_all_company_member?: boolean;
                                who_can_send_mail?:
                                    | "ANYONE"
                                    | "ALL_INTERNAL_USERS"
                                    | "ALL_GROUP_MEMBERS"
                                    | "CUSTOM_MEMBERS";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        manager_user_id?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/mail/v1/mailgroups`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    mailgroup_id?: string;
                                                    email?: string;
                                                    name?: string;
                                                    description?: string;
                                                    direct_members_count?: string;
                                                    include_external_member?: boolean;
                                                    include_all_company_member?: boolean;
                                                    who_can_send_mail?:
                                                        | "ANYONE"
                                                        | "ALL_INTERNAL_USERS"
                                                        | "ALL_GROUP_MEMBERS"
                                                        | "CUSTOM_MEMBERS";
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/list document }
             *
             * 批量获取邮件组
             *
             * 分页批量获取邮件组
             */
            list: async (
                payload?: {
                    params?: {
                        manager_user_id?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    mailgroup_id?: string;
                                    email?: string;
                                    name?: string;
                                    description?: string;
                                    direct_members_count?: string;
                                    include_external_member?: boolean;
                                    include_all_company_member?: boolean;
                                    who_can_send_mail?:
                                        | "ANYONE"
                                        | "ALL_INTERNAL_USERS"
                                        | "ALL_GROUP_MEMBERS"
                                        | "CUSTOM_MEMBERS";
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/patch document }
             *
             * 修改邮件组
             *
             * 更新邮件组部分字段，没有填写的字段不会被更新
             */
            patch: async (
                payload?: {
                    data?: {
                        email?: string;
                        name?: string;
                        description?: string;
                        who_can_send_mail?:
                            | "ANYONE"
                            | "ALL_INTERNAL_USERS"
                            | "ALL_GROUP_MEMBERS"
                            | "CUSTOM_MEMBERS";
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                mailgroup_id?: string;
                                email?: string;
                                name?: string;
                                description?: string;
                                direct_members_count?: string;
                                include_external_member?: boolean;
                                include_all_company_member?: boolean;
                                who_can_send_mail?:
                                    | "ANYONE"
                                    | "ALL_INTERNAL_USERS"
                                    | "ALL_GROUP_MEMBERS"
                                    | "CUSTOM_MEMBERS";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/update document }
             *
             * 更新邮件组
             *
             * 更新邮件组所有信息
             */
            update: async (
                payload?: {
                    data?: {
                        email?: string;
                        name?: string;
                        description?: string;
                        who_can_send_mail?:
                            | "ANYONE"
                            | "ALL_INTERNAL_USERS"
                            | "ALL_GROUP_MEMBERS"
                            | "CUSTOM_MEMBERS";
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                mailgroup_id?: string;
                                email?: string;
                                name?: string;
                                description?: string;
                                direct_members_count?: string;
                                include_external_member?: boolean;
                                include_all_company_member?: boolean;
                                who_can_send_mail?:
                                    | "ANYONE"
                                    | "ALL_INTERNAL_USERS"
                                    | "ALL_GROUP_MEMBERS"
                                    | "CUSTOM_MEMBERS";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 邮件组成员
         */
        mailgroupMember: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.member&apiName=batch_create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_create&project=mail&resource=mailgroup.member&version=v1 document }
             */
            batchCreate: async (
                payload?: {
                    data?: {
                        items?: Array<{
                            member_id?: string;
                            email?: string;
                            user_id?: string;
                            department_id?: string;
                            type?:
                                | "USER"
                                | "DEPARTMENT"
                                | "COMPANY"
                                | "EXTERNAL_USER"
                                | "MAIL_GROUP"
                                | "PUBLIC_MAILBOX"
                                | "OTHER_MEMBER";
                        }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    member_id?: string;
                                    email?: string;
                                    user_id?: string;
                                    department_id?: string;
                                    type?:
                                        | "USER"
                                        | "DEPARTMENT"
                                        | "COMPANY"
                                        | "EXTERNAL_USER"
                                        | "MAIL_GROUP"
                                        | "PUBLIC_MAILBOX"
                                        | "OTHER_MEMBER";
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members/batch_create`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.member&apiName=batch_delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_delete&project=mail&resource=mailgroup.member&version=v1 document }
             */
            batchDelete: async (
                payload?: {
                    data?: { member_id_list?: Array<string> };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members/batch_delete`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.member&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-member/create document }
             *
             * 创建邮件组成员
             *
             * 向邮件组添加单个成员
             */
            create: async (
                payload?: {
                    data?: {
                        email?: string;
                        user_id?: string;
                        department_id?: string;
                        type?:
                            | "USER"
                            | "DEPARTMENT"
                            | "COMPANY"
                            | "EXTERNAL_USER"
                            | "MAIL_GROUP"
                            | "PUBLIC_MAILBOX"
                            | "OTHER_MEMBER";
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                member_id?: string;
                                email?: string;
                                user_id?: string;
                                department_id?: string;
                                type?:
                                    | "USER"
                                    | "DEPARTMENT"
                                    | "COMPANY"
                                    | "EXTERNAL_USER"
                                    | "MAIL_GROUP"
                                    | "PUBLIC_MAILBOX"
                                    | "OTHER_MEMBER";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.member&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-member/delete document }
             *
             * 删除邮件组成员
             *
             * 删除邮件组单个成员
             */
            delete: async (
                payload?: {
                    path?: { mailgroup_id?: string; member_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.member&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-member/get document }
             *
             * 获取邮件组成员信息
             *
             * 获取邮件组单个成员信息
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { mailgroup_id?: string; member_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                member_id?: string;
                                email?: string;
                                user_id?: string;
                                department_id?: string;
                                type?:
                                    | "USER"
                                    | "DEPARTMENT"
                                    | "COMPANY"
                                    | "EXTERNAL_USER"
                                    | "MAIL_GROUP"
                                    | "PUBLIC_MAILBOX"
                                    | "OTHER_MEMBER";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    member_id?: string;
                                                    email?: string;
                                                    user_id?: string;
                                                    department_id?: string;
                                                    type?:
                                                        | "USER"
                                                        | "DEPARTMENT"
                                                        | "COMPANY"
                                                        | "EXTERNAL_USER"
                                                        | "MAIL_GROUP"
                                                        | "PUBLIC_MAILBOX"
                                                        | "OTHER_MEMBER";
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.member&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-member/list document }
             *
             * 批量获取邮件组成员
             *
             * 分页批量获取邮件组成员列表
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    member_id?: string;
                                    email?: string;
                                    user_id?: string;
                                    department_id?: string;
                                    type?:
                                        | "USER"
                                        | "DEPARTMENT"
                                        | "COMPANY"
                                        | "EXTERNAL_USER"
                                        | "MAIL_GROUP"
                                        | "PUBLIC_MAILBOX"
                                        | "OTHER_MEMBER";
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 邮件组权限成员
         */
        mailgroupPermissionMember: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.permission_member&apiName=batch_create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_create&project=mail&resource=mailgroup.permission_member&version=v1 document }
             */
            batchCreate: async (
                payload?: {
                    data?: {
                        items?: Array<{
                            permission_member_id?: string;
                            user_id?: string;
                            department_id?: string;
                            email?: string;
                            type?:
                                | "USER"
                                | "DEPARTMENT"
                                | "MAIL_GROUP"
                                | "PUBLIC_MAILBOX";
                        }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    permission_member_id?: string;
                                    user_id?: string;
                                    department_id?: string;
                                    email?: string;
                                    type?:
                                        | "USER"
                                        | "DEPARTMENT"
                                        | "MAIL_GROUP"
                                        | "PUBLIC_MAILBOX";
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/batch_create`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.permission_member&apiName=batch_delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_delete&project=mail&resource=mailgroup.permission_member&version=v1 document }
             */
            batchDelete: async (
                payload?: {
                    data: { permission_member_id_list: Array<string> };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/batch_delete`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.permission_member&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-permission_member/create document }
             *
             * 创建邮件组权限成员
             *
             * 向邮件组添加单个自定义权限成员，添加后该成员可发送邮件到该邮件组
             */
            create: async (
                payload?: {
                    data?: {
                        user_id?: string;
                        department_id?: string;
                        email?: string;
                        type?:
                            | "USER"
                            | "DEPARTMENT"
                            | "MAIL_GROUP"
                            | "PUBLIC_MAILBOX";
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                permission_member_id?: string;
                                user_id?: string;
                                department_id?: string;
                                email?: string;
                                type?:
                                    | "USER"
                                    | "DEPARTMENT"
                                    | "MAIL_GROUP"
                                    | "PUBLIC_MAILBOX";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.permission_member&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-permission_member/delete document }
             *
             * 删除邮件组权限成员
             *
             * 从自定义成员中删除单个成员，删除后该成员无法发送邮件到该邮件组
             */
            delete: async (
                payload?: {
                    path?: {
                        mailgroup_id?: string;
                        permission_member_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.permission_member&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-permission_member/get document }
             *
             * 获取邮件组权限成员
             *
             * 获取邮件组单个权限成员信息
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: {
                        mailgroup_id?: string;
                        permission_member_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                permission_member_id?: string;
                                user_id?: string;
                                department_id?: string;
                                email?: string;
                                type?:
                                    | "USER"
                                    | "DEPARTMENT"
                                    | "MAIL_GROUP"
                                    | "PUBLIC_MAILBOX";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    permission_member_id?: string;
                                                    user_id?: string;
                                                    department_id?: string;
                                                    email?: string;
                                                    type?:
                                                        | "USER"
                                                        | "DEPARTMENT"
                                                        | "MAIL_GROUP"
                                                        | "PUBLIC_MAILBOX";
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.permission_member&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-permission_member/list document }
             *
             * 批量获取邮件组权限成员
             *
             * 分页批量获取邮件组权限成员列表
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    permission_member_id?: string;
                                    user_id?: string;
                                    department_id?: string;
                                    email?: string;
                                    type?:
                                        | "USER"
                                        | "DEPARTMENT"
                                        | "MAIL_GROUP"
                                        | "PUBLIC_MAILBOX";
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 公共邮箱别名
         */
        publicMailboxAlias: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.alias&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-alias/create document }
             *
             * 创建公共邮箱别名
             *
             * 创建公共邮箱别名
             */
            create: async (
                payload?: {
                    data?: { email_alias?: string };
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                public_mailbox_alias?: {
                                    primary_email?: string;
                                    email_alias?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.alias&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-alias/delete document }
             *
             * 删除公共邮箱别名
             *
             * 删除公共邮箱别名
             */
            delete: async (
                payload?: {
                    path?: { public_mailbox_id?: string; alias_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases/:alias_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.alias&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-alias/list document }
             *
             * 获取所有公共邮箱别名
             *
             * 获取所有公共邮箱别名
             */
            list: async (
                payload?: {
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    primary_email?: string;
                                    email_alias?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 公共邮箱
         */
        publicMailbox: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/create document }
             *
             * 创建公共邮箱
             *
             * 创建一个公共邮箱
             */
            create: async (
                payload?: {
                    data?: { email?: string; name?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                public_mailbox_id?: string;
                                email?: string;
                                name?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/delete document }
             *
             * 释放公共邮箱地址
             *
             * 该接口会永久删除公共邮箱地址。可用于释放邮箱回收站的公共邮箱地址，一旦删除，该邮箱地址将无法恢复。
             */
            delete: async (
                payload?: {
                    path: { public_mailbox_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/get document }
             *
             * 获取公共邮箱
             *
             * 获取公共邮箱信息
             */
            get: async (
                payload?: {
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                public_mailbox_id?: string;
                                email?: string;
                                name?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/mail/v1/public_mailboxes`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    public_mailbox_id?: string;
                                                    email?: string;
                                                    name?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/list document }
             *
             * 批量获取公共邮箱
             *
             * 分页批量获取公共邮箱列表
             */
            list: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    public_mailbox_id?: string;
                                    email?: string;
                                    name?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/patch document }
             *
             * 修改公共邮箱
             *
             * 更新公共邮箱部分字段，没有填写的字段不会被更新
             */
            patch: async (
                payload?: {
                    data?: { email?: string; name?: string };
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                public_mailbox_id?: string;
                                email?: string;
                                name?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/update document }
             *
             * 更新公共邮箱
             *
             * 更新公共邮箱所有信息
             */
            update: async (
                payload?: {
                    data?: { email?: string; name?: string };
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                public_mailbox_id?: string;
                                email?: string;
                                name?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 公共邮箱成员
         */
        publicMailboxMember: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=batch_create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_create&project=mail&resource=public_mailbox.member&version=v1 document }
             */
            batchCreate: async (
                payload?: {
                    data: {
                        items: Array<{
                            member_id?: string;
                            user_id?: string;
                            type?: "USER";
                        }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { public_mailbox_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    member_id?: string;
                                    user_id?: string;
                                    type?: "USER";
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/batch_create`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=batch_delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_delete&project=mail&resource=public_mailbox.member&version=v1 document }
             */
            batchDelete: async (
                payload?: {
                    data: { member_id_list: Array<string> };
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/batch_delete`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=clear&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/clear document }
             *
             * 清空公共邮箱成员
             *
             * 删除公共邮箱所有成员
             */
            clear: async (
                payload?: {
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/clear`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/create document }
             *
             * 创建公共邮箱成员
             *
             * 向公共邮箱添加单个成员
             */
            create: async (
                payload?: {
                    data?: { user_id?: string; type?: "USER" };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                member_id?: string;
                                user_id?: string;
                                type?: "USER";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/delete document }
             *
             * 删除公共邮箱成员
             *
             * 删除公共邮箱单个成员
             */
            delete: async (
                payload?: {
                    path?: { public_mailbox_id?: string; member_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/get document }
             *
             * 获取公共邮箱成员信息
             *
             * 获取公共邮箱单个成员信息
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { public_mailbox_id?: string; member_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                member_id?: string;
                                user_id?: string;
                                type?: "USER";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    member_id?: string;
                                                    user_id?: string;
                                                    type?: "USER";
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/list document }
             *
             * 批量获取公共邮箱成员
             *
             * 分页批量获取公共邮箱成员列表
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    member_id?: string;
                                    user_id?: string;
                                    type?: "USER";
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 邮箱地址
         */
        user: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=user&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user/query document }
             *
             * 邮箱状态查询
             *
             * 使用邮箱状态查询接口，可以输入邮箱地址，查询出该邮箱地址对应的类型以及状态
             */
            query: async (
                payload?: {
                    data: { email_list: Array<string> };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_list?: Array<{
                                    email?: string;
                                    status?: number;
                                    type?: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/users/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 用户邮箱别名
         */
        userMailboxAlias: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=user_mailbox.alias&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-alias/create document }
             *
             * 创建用户邮箱别名
             *
             * 创建用户邮箱别名
             */
            create: async (
                payload?: {
                    data?: { email_alias?: string };
                    path?: { user_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_mailbox_alias?: {
                                    primary_email?: string;
                                    email_alias?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=user_mailbox.alias&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-alias/delete document }
             *
             * 删除用户邮箱别名
             *
             * 删除用户邮箱别名
             */
            delete: async (
                payload?: {
                    path?: { user_mailbox_id?: string; alias_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases/:alias_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                    path?: { user_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    primary_email?: string;
                                                    email_alias?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=user_mailbox.alias&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-alias/list document }
             *
             * 获取用户邮箱所有别名
             *
             * 获取用户邮箱所有别名
             */
            list: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                    path?: { user_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    primary_email?: string;
                                    email_alias?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 用户邮箱
         */
        userMailbox: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=user_mailbox&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox/delete document }
             *
             * 释放用户邮箱地址
             *
             * 该接口会永久删除用户邮箱地址。可用于删除位于邮箱回收站中的用户邮箱地址，一旦删除，将无法恢复。该接口支持邮件的转移，可以将被释放邮箱的邮件转移到另外一个可以使用的邮箱中。
             */
            delete: async (
                payload?: {
                    params?: { transfer_mailbox?: string };
                    path: { user_mailbox_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/user_mailboxes/:user_mailbox_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
         
         */
    mdm = {};
    /**
         
         */
    meeting_room = {};
    /**
         
         */
    moments = {};
    /**
     * OKR
     */
    okr = {
        /**
         * 图片
         */
        image: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=image&apiName=upload&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/image/upload document }
             *
             * 上传图片
             *
             * 上传图片
             */
            upload: async (
                payload?: {
                    data: {
                        data: Buffer;
                        target_id: string;
                        target_type: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { file_token?: string; url?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/images/upload`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
        },
        /**
         * 指标库
         */
        metricSource: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=metric_source&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/metric_source/list document }
             *
             * 获取指标库
             *
             * 获取租户下全部 OKR 指标库（仅限 OKR 企业版使用）
             */
            list: async (
                payload?: {
                    params?: { page_token?: string; page_size?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                total: number;
                                has_more: boolean;
                                page_token?: string;
                                items?: Array<{
                                    metric_source_id: string;
                                    metric_source_name: string;
                                    metric_name: string;
                                    metric_unit: {
                                        zh_cn: string;
                                        en_us: string;
                                        ja_jp: string;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/metric_sources`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 指标项
         */
        metricSourceTableItem: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=metric_source.table.item&apiName=batch_update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/metric_source-table-item/batch_update document }
             *
             * 批量更新指标项
             *
             * - 该接口用于批量更新多项指标，单次调用最多更新 100 条记录。接口仅限 OKR 企业版使用。;;  更新成功后 OKR 系统会给以下人员发送消息通知：;;    - 首次更新目标值的人员 ;;    - 已经将指标添加为 KR、且本次目标值/起始值/支撑的上级有变更的人员，不包含仅更新了进度值的人员
             */
            batchUpdate: async (
                payload?: {
                    data: {
                        items: Array<{
                            metric_item_id: string;
                            metric_initial_value?: number;
                            metric_target_value?: number;
                            metric_current_value?: number;
                            supported_user_id?: string;
                        }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { metric_source_id: string; metric_table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    metric_item_id: string;
                                    user_id: string;
                                    period_id: string;
                                    metric_unit: {
                                        zh_cn: string;
                                        en_us: string;
                                        ja_jp: string;
                                    };
                                    metric_initial_value: number;
                                    metric_target_value?: number;
                                    metric_current_value: number;
                                    supported_user_id?: string;
                                    kr_id?: string;
                                    updated_at: string;
                                    updated_by?: string;
                                }>;
                                failed_items?: Array<{
                                    metric_item_id: string;
                                    reason: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/metric_sources/:metric_source_id/tables/:metric_table_id/items/batch_update`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=metric_source.table.item&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/metric_source-table-item/get document }
             *
             * 获取指标项详情
             *
             * 获取某项指标的具体内容（仅限 OKR 企业版使用）
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: {
                        metric_source_id: string;
                        metric_table_id: string;
                        metric_item_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                metric_item_id: string;
                                user_id: string;
                                period_id: string;
                                metric_unit: {
                                    zh_cn: string;
                                    en_us: string;
                                    ja_jp: string;
                                };
                                metric_initial_value: number;
                                metric_target_value?: number;
                                metric_current_value: number;
                                supported_user_id?: string;
                                kr_id?: string;
                                updated_at: string;
                                updated_by?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/metric_sources/:metric_source_id/tables/:metric_table_id/items/:metric_item_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=metric_source.table.item&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/metric_source-table-item/list document }
             *
             * 获取指标项
             *
             * 获取指定指标表下的所有指标项（仅限 OKR 企业版使用）
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: string;
                    };
                    path: { metric_source_id: string; metric_table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                total: number;
                                has_more: boolean;
                                page_token?: string;
                                items?: Array<{
                                    metric_item_id: string;
                                    user_id: string;
                                    period_id: string;
                                    metric_unit: {
                                        zh_cn: string;
                                        en_us: string;
                                        ja_jp: string;
                                    };
                                    metric_initial_value: number;
                                    metric_target_value?: number;
                                    metric_current_value: number;
                                    supported_user_id?: string;
                                    kr_id?: string;
                                    updated_at: string;
                                    updated_by?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/metric_sources/:metric_source_id/tables/:metric_table_id/items`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=metric_source.table.item&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/metric_source-table-item/patch document }
             *
             * 更新指标项
             *
             * - 该接口用于更新某项指标，接口仅限 OKR 企业版使用。;;    更新成功后 OKR 系统会给以下人员发送消息通知：;;    - 首次更新目标值的人员 ;;    - 已经将指标添加为 KR、且本次目标值/起始值/支撑的上级有变更的人员，不包含仅更新了进度值的人员
             */
            patch: async (
                payload?: {
                    data?: {
                        metric_initial_value?: number;
                        metric_target_value?: number;
                        metric_current_value?: number;
                        supported_user_id?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: {
                        metric_source_id: string;
                        metric_table_id: string;
                        metric_item_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                metric_item_id: string;
                                user_id: string;
                                period_id: string;
                                metric_unit: {
                                    zh_cn: string;
                                    en_us: string;
                                    ja_jp: string;
                                };
                                metric_initial_value: number;
                                metric_target_value?: number;
                                metric_current_value: number;
                                supported_user_id?: string;
                                kr_id?: string;
                                updated_at: string;
                                updated_by?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/metric_sources/:metric_source_id/tables/:metric_table_id/items/:metric_item_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 指标表
         */
        metricSourceTable: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=metric_source.table&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/metric_source-table/list document }
             *
             * 获取指标表
             *
             * 获取指定指标库下有哪些指标表（仅限 OKR 企业版使用）
             */
            list: async (
                payload?: {
                    params?: { page_token?: string; page_size?: string };
                    path: { metric_source_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                total: number;
                                has_more: boolean;
                                page_token?: string;
                                items?: Array<{
                                    metric_table_id: string;
                                    metric_table_name: string;
                                    period_id: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/metric_sources/:metric_source_id/tables`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * OKR
         */
        okr: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=okr&apiName=batch_get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/okr/batch_get document }
             *
             * 批量获取OKR
             *
             * 根据OKR id批量获取OKR
             *
             * 使用<md-tag mode="inline" type="token-tenant">tenant_access_token</md-tag>需要额外申请权限<md-perm ;href="https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN">以应用身份访问OKR信息</md-perm>
             */
            batchGet: async (
                payload?: {
                    params: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                        okr_ids: number;
                        lang?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                okr_list?: Array<{
                                    id?: string;
                                    permission?: number;
                                    period_id?: string;
                                    name?: string;
                                    objective_list?: Array<{
                                        id?: string;
                                        permission?: number;
                                        content?: string;
                                        progress_report?: string;
                                        score?: number;
                                        weight?: number;
                                        progress_rate?: {
                                            percent?: number;
                                            status?: string;
                                        };
                                        kr_list?: Array<{
                                            id?: string;
                                            content?: string;
                                            score?: number;
                                            weight?: number;
                                            kr_weight?: number;
                                            progress_rate?: {
                                                percent?: number;
                                                status?: string;
                                            };
                                            progress_record_list?: Array<{
                                                id?: string;
                                            }>;
                                            progress_rate_percent_last_updated_time?: string;
                                            progress_rate_status_last_updated_time?: string;
                                            progress_record_last_updated_time?: string;
                                            progress_report_last_updated_time?: string;
                                            score_last_updated_time?: string;
                                            deadline?: string;
                                            mentioned_user_list?: Array<{
                                                open_id?: string;
                                                user_id?: string;
                                            }>;
                                        }>;
                                        aligned_objective_list?: Array<{
                                            id?: string;
                                            okr_id?: string;
                                            owner?: {
                                                open_id?: string;
                                                user_id?: string;
                                            };
                                        }>;
                                        aligning_objective_list?: Array<{
                                            id?: string;
                                            okr_id?: string;
                                            owner?: {
                                                open_id?: string;
                                                user_id?: string;
                                            };
                                        }>;
                                        progress_record_list?: Array<{
                                            id?: string;
                                        }>;
                                        progress_rate_percent_last_updated_time?: string;
                                        progress_rate_status_last_updated_time?: string;
                                        progress_record_last_updated_time?: string;
                                        progress_report_last_updated_time?: string;
                                        score_last_updated_time?: string;
                                        deadline?: string;
                                        mentioned_user_list?: Array<{
                                            open_id?: string;
                                            user_id?: string;
                                        }>;
                                    }>;
                                    confirm_status?: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/okrs/batch_get`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * OKR周期
         */
        period: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=period&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/period/list document }
             *
             * 获取OKR周期列表
             *
             * 获取OKR周期列表
             *
             * 使用<md-tag mode="inline" type="token-tenant">tenant_access_token</md-tag>需要额外申请权限<md-perm ;href="https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN">以应用身份访问OKR信息</md-perm>
             */
            list: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                page_token?: string;
                                has_more?: boolean;
                                items?: Array<{
                                    id?: string;
                                    zh_name?: string;
                                    en_name?: string;
                                    status?: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/periods`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * OKR进展记录
         */
        progressRecord: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=progress_record&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/progress_record/create document }
             *
             * 创建OKR进展记录
             *
             * 创建OKR进展记录
             */
            create: async (
                payload?: {
                    data: {
                        source_title: string;
                        source_url: string;
                        target_id: string;
                        target_type: number;
                        content: {
                            blocks?: Array<{
                                type?: "paragraph" | "gallery";
                                paragraph?: {
                                    style?: {
                                        list?: {
                                            type?:
                                                | "number"
                                                | "bullet"
                                                | "checkBox"
                                                | "checkedBox"
                                                | "indent";
                                            indentLevel?: number;
                                            number?: number;
                                        };
                                    };
                                    elements?: Array<{
                                        type?:
                                            | "textRun"
                                            | "docsLink"
                                            | "person";
                                        textRun?: {
                                            text?: string;
                                            style?: {
                                                bold?: boolean;
                                                strikeThrough?: boolean;
                                                backColor?: {
                                                    red?: number;
                                                    green?: number;
                                                    blue?: number;
                                                    alpha?: number;
                                                };
                                                textColor?: {
                                                    red?: number;
                                                    green?: number;
                                                    blue?: number;
                                                    alpha?: number;
                                                };
                                                link?: { url?: string };
                                            };
                                        };
                                        docsLink?: {
                                            url?: string;
                                            title?: string;
                                        };
                                        person?: { openId?: string };
                                    }>;
                                };
                                gallery?: {
                                    imageList?: Array<{
                                        fileToken?: string;
                                        src?: string;
                                        width?: number;
                                        height?: number;
                                    }>;
                                };
                            }>;
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                progress_id?: string;
                                modify_time?: string;
                                content?: {
                                    blocks?: Array<{
                                        type?: "paragraph" | "gallery";
                                        paragraph?: {
                                            style?: {
                                                list?: {
                                                    type?:
                                                        | "number"
                                                        | "bullet"
                                                        | "checkBox"
                                                        | "checkedBox"
                                                        | "indent";
                                                    indentLevel?: number;
                                                    number?: number;
                                                };
                                            };
                                            elements?: Array<{
                                                type?:
                                                    | "textRun"
                                                    | "docsLink"
                                                    | "person";
                                                textRun?: {
                                                    text?: string;
                                                    style?: {
                                                        bold?: boolean;
                                                        strikeThrough?: boolean;
                                                        backColor?: {
                                                            red?: number;
                                                            green?: number;
                                                            blue?: number;
                                                            alpha?: number;
                                                        };
                                                        textColor?: {
                                                            red?: number;
                                                            green?: number;
                                                            blue?: number;
                                                            alpha?: number;
                                                        };
                                                        link?: { url?: string };
                                                    };
                                                };
                                                docsLink?: {
                                                    url?: string;
                                                    title?: string;
                                                };
                                                person?: { openId?: string };
                                            }>;
                                        };
                                        gallery?: {
                                            imageList?: Array<{
                                                fileToken?: string;
                                                src?: string;
                                                width?: number;
                                                height?: number;
                                            }>;
                                        };
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/progress_records`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=progress_record&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/progress_record/delete document }
             *
             * 删除OKR进展记录
             *
             * 根据ID删除OKR进展记录
             */
            delete: async (
                payload?: {
                    path: { progress_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/progress_records/:progress_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=progress_record&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/progress_record/get document }
             *
             * 获取OKR进展记录
             *
             * 根据ID获取OKR进展记录详情
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { progress_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                progress_id?: string;
                                modify_time?: string;
                                content?: {
                                    blocks?: Array<{
                                        type?: "paragraph" | "gallery";
                                        paragraph?: {
                                            style?: {
                                                list?: {
                                                    type?:
                                                        | "number"
                                                        | "bullet"
                                                        | "checkBox"
                                                        | "checkedBox"
                                                        | "indent";
                                                    indentLevel?: number;
                                                    number?: number;
                                                };
                                            };
                                            elements?: Array<{
                                                type?:
                                                    | "textRun"
                                                    | "docsLink"
                                                    | "person";
                                                textRun?: {
                                                    text?: string;
                                                    style?: {
                                                        bold?: boolean;
                                                        strikeThrough?: boolean;
                                                        backColor?: {
                                                            red?: number;
                                                            green?: number;
                                                            blue?: number;
                                                            alpha?: number;
                                                        };
                                                        textColor?: {
                                                            red?: number;
                                                            green?: number;
                                                            blue?: number;
                                                            alpha?: number;
                                                        };
                                                        link?: { url?: string };
                                                    };
                                                };
                                                docsLink?: {
                                                    url?: string;
                                                    title?: string;
                                                };
                                                person?: { openId?: string };
                                            }>;
                                        };
                                        gallery?: {
                                            imageList?: Array<{
                                                fileToken?: string;
                                                src?: string;
                                                width?: number;
                                                height?: number;
                                            }>;
                                        };
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/progress_records/:progress_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=progress_record&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/progress_record/update document }
             *
             * 更新OKR进展记录
             *
             * 根据OKR进展记录ID更新进展详情
             */
            update: async (
                payload?: {
                    data: {
                        content: {
                            blocks?: Array<{
                                type?: "paragraph" | "gallery";
                                paragraph?: {
                                    style?: {
                                        list?: {
                                            type?:
                                                | "number"
                                                | "bullet"
                                                | "checkBox"
                                                | "checkedBox"
                                                | "indent";
                                            indentLevel?: number;
                                            number?: number;
                                        };
                                    };
                                    elements?: Array<{
                                        type?:
                                            | "textRun"
                                            | "docsLink"
                                            | "person";
                                        textRun?: {
                                            text?: string;
                                            style?: {
                                                bold?: boolean;
                                                strikeThrough?: boolean;
                                                backColor?: {
                                                    red?: number;
                                                    green?: number;
                                                    blue?: number;
                                                    alpha?: number;
                                                };
                                                textColor?: {
                                                    red?: number;
                                                    green?: number;
                                                    blue?: number;
                                                    alpha?: number;
                                                };
                                                link?: { url?: string };
                                            };
                                        };
                                        docsLink?: {
                                            url?: string;
                                            title?: string;
                                        };
                                        person?: { openId?: string };
                                    }>;
                                };
                                gallery?: {
                                    imageList?: Array<{
                                        fileToken?: string;
                                        src?: string;
                                        width?: number;
                                        height?: number;
                                    }>;
                                };
                            }>;
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { progress_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                progress_id?: string;
                                modify_time?: string;
                                content?: {
                                    blocks?: Array<{
                                        type?: "paragraph" | "gallery";
                                        paragraph?: {
                                            style?: {
                                                list?: {
                                                    type?:
                                                        | "number"
                                                        | "bullet"
                                                        | "checkBox"
                                                        | "checkedBox"
                                                        | "indent";
                                                    indentLevel?: number;
                                                    number?: number;
                                                };
                                            };
                                            elements?: Array<{
                                                type?:
                                                    | "textRun"
                                                    | "docsLink"
                                                    | "person";
                                                textRun?: {
                                                    text?: string;
                                                    style?: {
                                                        bold?: boolean;
                                                        strikeThrough?: boolean;
                                                        backColor?: {
                                                            red?: number;
                                                            green?: number;
                                                            blue?: number;
                                                            alpha?: number;
                                                        };
                                                        textColor?: {
                                                            red?: number;
                                                            green?: number;
                                                            blue?: number;
                                                            alpha?: number;
                                                        };
                                                        link?: { url?: string };
                                                    };
                                                };
                                                docsLink?: {
                                                    url?: string;
                                                    title?: string;
                                                };
                                                person?: { openId?: string };
                                            }>;
                                        };
                                        gallery?: {
                                            imageList?: Array<{
                                                fileToken?: string;
                                                src?: string;
                                                width?: number;
                                                height?: number;
                                            }>;
                                        };
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/progress_records/:progress_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 用户OKR
         */
        userOkr: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=user.okr&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/user-okr/list document }
             *
             * 获取用户的OKR列表
             *
             * 根据用户的id获取OKR列表
             *
             * 使用<md-tag mode="inline" type="token-tenant">tenant_access_token</md-tag>需要额外申请权限<md-perm ;href="https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN">以应用身份访问OKR信息</md-perm>
             */
            list: async (
                payload?: {
                    params: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                        offset: string;
                        limit: string;
                        lang?: string;
                        period_ids?: number;
                    };
                    path?: { user_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                total?: number;
                                okr_list?: Array<{
                                    id?: string;
                                    permission?: number;
                                    period_id?: string;
                                    name?: string;
                                    objective_list?: Array<{
                                        id?: string;
                                        permission?: number;
                                        content?: string;
                                        progress_report?: string;
                                        score?: number;
                                        weight?: number;
                                        progress_rate?: {
                                            percent?: number;
                                            status?: string;
                                        };
                                        kr_list?: Array<{
                                            id?: string;
                                            content?: string;
                                            score?: number;
                                            weight?: number;
                                            kr_weight?: number;
                                            progress_rate?: {
                                                percent?: number;
                                                status?: string;
                                            };
                                            progress_record_list?: Array<{
                                                id?: string;
                                            }>;
                                            progress_rate_percent_last_updated_time?: string;
                                            progress_rate_status_last_updated_time?: string;
                                            progress_record_last_updated_time?: string;
                                            progress_report_last_updated_time?: string;
                                            score_last_updated_time?: string;
                                            deadline?: string;
                                            mentioned_user_list?: Array<{
                                                open_id?: string;
                                                user_id?: string;
                                            }>;
                                        }>;
                                        aligned_objective_list?: Array<{
                                            id?: string;
                                            okr_id?: string;
                                            owner?: {
                                                open_id?: string;
                                                user_id?: string;
                                            };
                                        }>;
                                        aligning_objective_list?: Array<{
                                            id?: string;
                                            okr_id?: string;
                                            owner?: {
                                                open_id?: string;
                                                user_id?: string;
                                            };
                                        }>;
                                        progress_record_list?: Array<{
                                            id?: string;
                                        }>;
                                        progress_rate_percent_last_updated_time?: string;
                                        progress_rate_status_last_updated_time?: string;
                                        progress_record_last_updated_time?: string;
                                        progress_report_last_updated_time?: string;
                                        score_last_updated_time?: string;
                                        deadline?: string;
                                        mentioned_user_list?: Array<{
                                            open_id?: string;
                                            user_id?: string;
                                        }>;
                                    }>;
                                    confirm_status?: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/users/:user_id/okrs`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * AI能力
     */
    optical_char_recognition = {
        /**
         * 图片识别
         */
        image: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=optical_char_recognition&resource=image&apiName=basic_recognize&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/optical_char_recognition-v1/image/basic_recognize document }
             *
             * 基础图片识别 (OCR)
             *
             * 可识别图片中的文字，按图片中的区域划分，分段返回文本列表
             *
             * 单租户限流：20QPS，同租户下的应用没有限流，共享本租户的 20QPS 限流
             */
            basicRecognize: async (
                payload?: {
                    data?: { image?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { text_list: Array<string> };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/optical_char_recognition/v1/image/basic_recognize`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * 帐号
     */
    passport = {
        /**
         * 登录态
         */
        session: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=passport&resource=session&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/passport-v1/session/query document }
             *
             * 批量获取用户登录信息（脱敏）
             *
             * 该接口用于查询用户的登录信息
             */
            query: async (
                payload?: {
                    data?: { user_ids?: Array<string> };
                    params?: {
                        user_id_type?: "open_id" | "union_id" | "user_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                mask_sessions?: Array<{
                                    create_time?: string;
                                    terminal_type?: number;
                                    user_id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/passport/v1/sessions/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
         
         */
    people_admin = {};
    /**
         
         */
    people_bytedance = {};
    /**
         
         */
    performance = {};
    /**
         
         */
    report = {};
    /**
         
         */
    search_in_app = {};
    /**
     * 搜索
     */
    search = {
        /**
         * 数据源
         */
        dataSource: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source&apiName=create&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/create document }
             *
             * 创建数据源
             *
             * 创建一个数据源
             */
            create: async (
                payload?: {
                    data: {
                        name: string;
                        state?: number;
                        description?: string;
                        icon_url?: string;
                        template?: string;
                        searchable_fields?: Array<string>;
                        i18n_name?: {
                            zh_cn?: string;
                            en_us?: string;
                            ja_jp?: string;
                        };
                        i18n_description?: {
                            zh_cn?: string;
                            en_us?: string;
                            ja_jp?: string;
                        };
                        schema_id?: string;
                        app_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                data_source?: {
                                    id?: string;
                                    name: string;
                                    state?: number;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    is_exceed_quota?: boolean;
                                    icon_url?: string;
                                    template?: string;
                                    searchable_fields?: Array<string>;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    i18n_description?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    schema_id?: string;
                                    app_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/data_sources`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source&apiName=delete&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/delete document }
             *
             * 删除数据源
             *
             * 删除一个已存在的数据源
             */
            delete: async (
                payload?: {
                    path: { data_source_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/data_sources/:data_source_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source&apiName=get&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/get document }
             *
             * 获取数据源
             *
             * 获取已经创建的数据源
             */
            get: async (
                payload?: {
                    path: { data_source_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                data_source?: {
                                    id?: string;
                                    name: string;
                                    state?: number;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    is_exceed_quota?: boolean;
                                    icon_url?: string;
                                    template?: string;
                                    searchable_fields?: Array<string>;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    i18n_description?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    schema_id?: string;
                                    app_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/data_sources/:data_source_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        view?: number;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/search/v2/data_sources`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    id?: string;
                                                    name: string;
                                                    state?: number;
                                                    description?: string;
                                                    create_time?: string;
                                                    update_time?: string;
                                                    is_exceed_quota?: boolean;
                                                    icon_url?: string;
                                                    template?: string;
                                                    searchable_fields?: Array<string>;
                                                    i18n_name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                        ja_jp?: string;
                                                    };
                                                    i18n_description?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                        ja_jp?: string;
                                                    };
                                                    schema_id?: string;
                                                    app_id?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source&apiName=list&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/list document }
             *
             * 批量获取数据源
             *
             * 批量获取创建的数据源信息
             */
            list: async (
                payload?: {
                    params?: {
                        view?: number;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    id?: string;
                                    name: string;
                                    state?: number;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    is_exceed_quota?: boolean;
                                    icon_url?: string;
                                    template?: string;
                                    searchable_fields?: Array<string>;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    i18n_description?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    schema_id?: string;
                                    app_id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/data_sources`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source&apiName=patch&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/patch document }
             *
             * 修改数据源
             *
             * 更新一个已经存在的数据源
             */
            patch: async (
                payload?: {
                    data?: {
                        name?: string;
                        state?: number;
                        description?: string;
                        icon_url?: string;
                        i18n_name?: {
                            zh_cn?: string;
                            en_us?: string;
                            ja_jp?: string;
                        };
                        i18n_description?: {
                            zh_cn?: string;
                            en_us?: string;
                            ja_jp?: string;
                        };
                    };
                    path: { data_source_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                data_source?: {
                                    id?: string;
                                    name: string;
                                    state?: number;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    is_exceed_quota?: boolean;
                                    icon_url?: string;
                                    template?: string;
                                    searchable_fields?: Array<string>;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    i18n_description?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    schema_id?: string;
                                    app_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/data_sources/:data_source_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 数据项
         */
        dataSourceItem: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source.item&apiName=create&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source-item/create document }
             *
             * 索引数据项
             *
             * 索引一条数据记录
             */
            create: async (
                payload?: {
                    data: {
                        id: string;
                        acl: Array<{
                            access?: "allow" | "deny";
                            value?: string;
                            type?: "user" | "group" | "open_id";
                        }>;
                        metadata: {
                            title: string;
                            source_url: string;
                            create_time?: number;
                            update_time?: number;
                            source_url_mobile?: string;
                        };
                        structured_data: string;
                        content?: {
                            format?: "html" | "plaintext";
                            content_data?: string;
                        };
                    };
                    path: { data_source_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/data_sources/:data_source_id/items`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source.item&apiName=delete&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source-item/delete document }
             *
             * 删除数据项
             *
             * 删除数据项
             */
            delete: async (
                payload?: {
                    path: { data_source_id: string; item_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/data_sources/:data_source_id/items/:item_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source.item&apiName=get&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source-item/get document }
             *
             * 获取数据项
             *
             * 获取单个数据记录
             */
            get: async (
                payload?: {
                    path?: { data_source_id?: string; item_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                item: {
                                    id: string;
                                    acl: Array<{
                                        access?: "allow" | "deny";
                                        value?: string;
                                        type?: "user" | "group" | "open_id";
                                    }>;
                                    metadata: {
                                        title: string;
                                        source_url: string;
                                        create_time?: number;
                                        update_time?: number;
                                        source_url_mobile?: string;
                                    };
                                    structured_data: string;
                                    content?: {
                                        format?: "html" | "plaintext";
                                        content_data?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/data_sources/:data_source_id/items/:item_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 数据范式
         */
        schema: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=schema&apiName=create&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/schema/create document }
             *
             * 创建数据范式
             *
             * 创建一个数据范式
             */
            create: async (
                payload?: {
                    data: {
                        properties: Array<{
                            name: string;
                            type:
                                | "text"
                                | "int"
                                | "tag"
                                | "timestamp"
                                | "double"
                                | "tinytext";
                            is_searchable?: boolean;
                            is_sortable?: boolean;
                            is_returnable?: boolean;
                            sort_options?: {
                                priority?: number;
                                order?: "asc" | "desc";
                            };
                            type_definitions?: {
                                tag?: Array<{
                                    name: string;
                                    color:
                                        | "red"
                                        | "green"
                                        | "blue"
                                        | "grey"
                                        | "yellow";
                                    text: string;
                                }>;
                            };
                            search_options?: {
                                enable_semantic_match?: boolean;
                                enable_exact_match?: boolean;
                                enable_prefix_match?: boolean;
                                enable_number_suffix_match?: boolean;
                                enable_camel_match?: boolean;
                            };
                        }>;
                        display: {
                            card_key: "search_common_card";
                            fields_mapping?: Array<{
                                display_field: string;
                                data_field: string;
                            }>;
                        };
                        schema_id: string;
                    };
                    params?: { validate_only?: boolean };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                schema?: {
                                    properties: Array<{
                                        name: string;
                                        type:
                                            | "text"
                                            | "int"
                                            | "tag"
                                            | "timestamp"
                                            | "double"
                                            | "tinytext";
                                        is_searchable?: boolean;
                                        is_sortable?: boolean;
                                        is_returnable?: boolean;
                                        sort_options?: {
                                            priority?: number;
                                            order?: "asc" | "desc";
                                        };
                                        type_definitions?: {
                                            tag?: Array<{
                                                name: string;
                                                color:
                                                    | "red"
                                                    | "green"
                                                    | "blue"
                                                    | "grey"
                                                    | "yellow";
                                                text: string;
                                            }>;
                                        };
                                        search_options?: {
                                            enable_semantic_match?: boolean;
                                            enable_exact_match?: boolean;
                                            enable_prefix_match?: boolean;
                                            enable_number_suffix_match?: boolean;
                                            enable_camel_match?: boolean;
                                        };
                                    }>;
                                    display: {
                                        card_key: "search_common_card";
                                        fields_mapping?: Array<{
                                            display_field: string;
                                            data_field: string;
                                        }>;
                                    };
                                    schema_id: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/schemas`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=schema&apiName=delete&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/schema/delete document }
             *
             * 删除数据范式
             *
             * 删除已存在的数据范式
             */
            delete: async (
                payload?: {
                    path: { schema_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/schemas/:schema_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=schema&apiName=get&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/schema/get document }
             *
             * 获取数据范式
             *
             * 获取单个数据范式
             */
            get: async (
                payload?: {
                    path: { schema_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                schema?: {
                                    properties: Array<{
                                        name: string;
                                        type:
                                            | "text"
                                            | "int"
                                            | "tag"
                                            | "timestamp"
                                            | "double"
                                            | "tinytext";
                                        is_searchable?: boolean;
                                        is_sortable?: boolean;
                                        is_returnable?: boolean;
                                        sort_options?: {
                                            priority?: number;
                                            order?: "asc" | "desc";
                                        };
                                        type_definitions?: {
                                            tag?: Array<{
                                                name: string;
                                                color:
                                                    | "red"
                                                    | "green"
                                                    | "blue"
                                                    | "grey"
                                                    | "yellow";
                                                text: string;
                                            }>;
                                        };
                                        search_options?: {
                                            enable_semantic_match?: boolean;
                                            enable_exact_match?: boolean;
                                            enable_prefix_match?: boolean;
                                            enable_number_suffix_match?: boolean;
                                            enable_camel_match?: boolean;
                                        };
                                    }>;
                                    display: {
                                        card_key: "search_common_card";
                                        fields_mapping?: Array<{
                                            display_field: string;
                                            data_field: string;
                                        }>;
                                    };
                                    schema_id: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/schemas/:schema_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=schema&apiName=patch&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/schema/patch document }
             *
             * 修改数据范式
             *
             * 修改数据范式
             */
            patch: async (
                payload?: {
                    data?: {
                        display?: {
                            card_key: "search_common_card";
                            fields_mapping?: Array<{
                                display_field: string;
                                data_field: string;
                            }>;
                        };
                    };
                    path: { schema_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                schema?: {
                                    properties: Array<{
                                        name: string;
                                        type:
                                            | "text"
                                            | "int"
                                            | "tag"
                                            | "timestamp"
                                            | "double"
                                            | "tinytext";
                                        is_searchable?: boolean;
                                        is_sortable?: boolean;
                                        is_returnable?: boolean;
                                        sort_options?: {
                                            priority?: number;
                                            order?: "asc" | "desc";
                                        };
                                        type_definitions?: {
                                            tag?: Array<{
                                                name: string;
                                                color:
                                                    | "red"
                                                    | "green"
                                                    | "blue"
                                                    | "grey"
                                                    | "yellow";
                                                text: string;
                                            }>;
                                        };
                                        search_options?: {
                                            enable_semantic_match?: boolean;
                                            enable_exact_match?: boolean;
                                            enable_prefix_match?: boolean;
                                            enable_number_suffix_match?: boolean;
                                            enable_camel_match?: boolean;
                                        };
                                    }>;
                                    display: {
                                        card_key: "search_common_card";
                                        fields_mapping?: Array<{
                                            display_field: string;
                                            data_field: string;
                                        }>;
                                    };
                                    schema_id: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/schemas/:schema_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
         
         */
    security_and_compliance = {};
    /**
     * 云文档-电子表格
     */
    sheets = {
        /**
         * 表格
         */
        spreadsheet: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet&apiName=create&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet/create document }
             *
             * 创建表格
             *
             * 在指定目录下创建表格
             */
            create: async (
                payload?: {
                    data?: { title?: string; folder_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                spreadsheet?: {
                                    title?: string;
                                    folder_token?: string;
                                    url?: string;
                                    spreadsheet_token?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet&apiName=get&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet/get document }
             *
             * 获取电子表格信息
             *
             * 该接口用于获取电子表格的基础信息。
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { spreadsheet_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                spreadsheet?: {
                                    title?: string;
                                    owner_id?: string;
                                    token?: string;
                                    url?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet&apiName=patch&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet/patch document }
             *
             * 修改电子表格属性
             *
             * 该接口用于修改电子表格的属性
             */
            patch: async (
                payload?: {
                    data?: { title?: string };
                    path?: { spreadsheet_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 筛选
         */
        spreadsheetSheetFilter: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter&apiName=create&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/create document }
             *
             * 创建筛选
             *
             * 在子表内创建筛选。
             *
             * 参数值可参考[筛选指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/filter-user-guide)
             */
            create: async (
                payload?: {
                    data: {
                        range: string;
                        col: string;
                        condition: {
                            filter_type: string;
                            compare_type?: string;
                            expected: Array<string>;
                        };
                    };
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter&apiName=delete&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/delete document }
             *
             * 删除筛选
             *
             * 删除子表的筛选
             */
            delete: async (
                payload?: {
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter&apiName=get&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/get document }
             *
             * 获取筛选
             *
             * 获取子表的详细筛选信息
             */
            get: async (
                payload?: {
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                sheet_filter_info?: {
                                    range: string;
                                    filtered_out_rows: Array<number>;
                                    filter_infos: Array<{
                                        col: string;
                                        conditions: Array<{
                                            filter_type: string;
                                            compare_type?: string;
                                            expected: Array<string>;
                                        }>;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter&apiName=update&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/update document }
             *
             * 更新筛选
             *
             * 更新子表筛选范围中的列筛选条件。
             *
             * 参数值可参考[筛选指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/filter-user-guide)
             */
            update: async (
                payload?: {
                    data: {
                        col: string;
                        condition: {
                            filter_type: string;
                            compare_type?: string;
                            expected: Array<string>;
                        };
                    };
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 筛选条件
         */
        spreadsheetSheetFilterViewCondition: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view.condition&apiName=create&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/create document }
             *
             * 创建筛选条件
             *
             * 在筛选视图的筛选范围的某一列创建筛选条件。
             *
             * 筛选条件参考 [筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
             */
            create: async (
                payload?: {
                    data?: {
                        condition_id?: string;
                        filter_type?: string;
                        compare_type?: string;
                        expected?: Array<string>;
                    };
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        filter_view_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                condition?: {
                                    condition_id?: string;
                                    filter_type?: string;
                                    compare_type?: string;
                                    expected?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view.condition&apiName=delete&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/delete document }
             *
             * 删除筛选条件
             *
             * 删除筛选视图的筛选范围某一列的筛选条件。
             */
            delete: async (
                payload?: {
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        filter_view_id?: string;
                        condition_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/:condition_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view.condition&apiName=get&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/get document }
             *
             * 获取筛选条件
             *
             * 获取筛选视图某列的筛选条件信息。
             *
             * 筛选条件含义参考 [筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
             */
            get: async (
                payload?: {
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        filter_view_id?: string;
                        condition_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                condition?: {
                                    condition_id?: string;
                                    filter_type?: string;
                                    compare_type?: string;
                                    expected?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/:condition_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view.condition&apiName=query&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/query document }
             *
             * 查询筛选条件
             *
             * 查询一个筛选视图的所有筛选条件，返回筛选视图的筛选范围内的筛选条件。
             *
             * 筛选条件含义可参考 [筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
             */
            query: async (
                payload?: {
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        filter_view_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    condition_id?: string;
                                    filter_type?: string;
                                    compare_type?: string;
                                    expected?: Array<string>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view.condition&apiName=update&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/update document }
             *
             * 更新筛选条件
             *
             * 更新筛选视图范围的某列的筛选条件，condition id 即为列的字母号。
             *
             * 筛选条件参数可参考 [筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
             */
            update: async (
                payload?: {
                    data?: {
                        filter_type?: string;
                        compare_type?: string;
                        expected?: Array<string>;
                    };
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        filter_view_id?: string;
                        condition_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                condition?: {
                                    condition_id?: string;
                                    filter_type?: string;
                                    compare_type?: string;
                                    expected?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/:condition_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 筛选视图
         */
        spreadsheetSheetFilterView: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view&apiName=create&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/create document }
             *
             * 创建筛选视图
             *
             * 根据传入的参数创建一个筛选视图。Id 和 名字可选，不填的话会默认生成；range 必填。Id 长度为10，由 0-9、a-z、A-Z 组合生成。名字长度不超过100。单个子表内的筛选视图个数不超过 150。
             *
             * 筛选范围的设置参考：[筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
             */
            create: async (
                payload?: {
                    data?: {
                        filter_view_id?: string;
                        filter_view_name?: string;
                        range?: string;
                    };
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                filter_view?: {
                                    filter_view_id?: string;
                                    filter_view_name?: string;
                                    range?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view&apiName=delete&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/delete document }
             *
             * 删除筛选视图
             *
             * 删除指定 id 对应的筛选视图。
             */
            delete: async (
                payload?: {
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        filter_view_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view&apiName=get&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/get document }
             *
             * 获取筛选视图
             *
             * 获取指定筛选视图 id 的名字和筛选范围。
             */
            get: async (
                payload?: {
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        filter_view_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                filter_view?: {
                                    filter_view_id?: string;
                                    filter_view_name?: string;
                                    range?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view&apiName=patch&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/patch document }
             *
             * 更新筛选视图
             *
             * 更新筛选视图的名字或者筛选范围。名字长度不超过100，不能重复即子表内唯一；筛选范围不超过子表的最大范围。
             *
             * 筛选范围的设置参考：[筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
             */
            patch: async (
                payload?: {
                    data?: { filter_view_name?: string; range?: string };
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        filter_view_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                filter_view?: {
                                    filter_view_id?: string;
                                    filter_view_name?: string;
                                    range?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view&apiName=query&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/query document }
             *
             * 查询筛选视图
             *
             * 查询子表内所有的筛选视图基本信息，包括 id、name 和 range
             */
            query: async (
                payload?: {
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    filter_view_id?: string;
                                    filter_view_name?: string;
                                    range?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 工作表
         */
        spreadsheetSheet: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet&apiName=find&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/find document }
             *
             * 查找单元格
             *
             * 在指定范围内查找符合查找条件的单元格。
             */
            find: async (
                payload?: {
                    data: {
                        find_condition: {
                            range: string;
                            match_case?: boolean;
                            match_entire_cell?: boolean;
                            search_by_regex?: boolean;
                            include_formulas?: boolean;
                        };
                        find: string;
                    };
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                find_result?: {
                                    matched_cells?: Array<string>;
                                    matched_formula_cells?: Array<string>;
                                    rows_count?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/find`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet&apiName=get&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/get document }
             *
             * 查询工作表
             *
             * 该接口用于通过工作表ID查询工作表属性信息。
             */
            get: async (
                payload?: {
                    path: { spreadsheet_token: string; sheet_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                sheet?: {
                                    sheet_id?: string;
                                    title?: string;
                                    index?: number;
                                    hidden?: boolean;
                                    grid_properties?: {
                                        frozen_row_count?: number;
                                        frozen_column_count?: number;
                                        row_count?: number;
                                        column_count?: number;
                                    };
                                    resource_type?: string;
                                    merges?: Array<{
                                        start_row_index?: number;
                                        end_row_index?: number;
                                        start_column_index?: number;
                                        end_column_index?: number;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet&apiName=move_dimension&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/move_dimension document }
             *
             * 移动行列
             *
             * 该接口用于移动行列，行列被移动到目标位置后，原本在目标位置的行列会对应右移或下移。
             */
            moveDimension: async (
                payload?: {
                    data?: {
                        source?: {
                            major_dimension?: string;
                            start_index?: number;
                            end_index?: number;
                        };
                        destination_index?: number;
                    };
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/move_dimension`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet&apiName=query&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query document }
             *
             * 获取工作表
             *
             * 该接口用于获取电子表格下所有工作表及其属性。
             */
            query: async (
                payload?: {
                    path?: { spreadsheet_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                sheets?: Array<{
                                    sheet_id?: string;
                                    title?: string;
                                    index?: number;
                                    hidden?: boolean;
                                    grid_properties?: {
                                        frozen_row_count?: number;
                                        frozen_column_count?: number;
                                        row_count?: number;
                                        column_count?: number;
                                    };
                                    resource_type?: string;
                                    merges?: Array<{
                                        start_row_index?: number;
                                        end_row_index?: number;
                                        start_column_index?: number;
                                        end_column_index?: number;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet&apiName=replace&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/replace document }
             *
             * 替换单元格
             *
             * 按照指定的条件查找子表的某个范围内的数据符合条件的单元格并替换值，返回替换成功的单元格位置。一次请求最多允许替换5000个单元格，如果超过请将range缩小范围再操作。请求体中的 range、find、replaccement 字段必填。
             */
            replace: async (
                payload?: {
                    data: {
                        find_condition: {
                            range: string;
                            match_case?: boolean;
                            match_entire_cell?: boolean;
                            search_by_regex?: boolean;
                            include_formulas?: boolean;
                        };
                        find: string;
                        replacement: string;
                    };
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                replace_result?: {
                                    matched_cells?: Array<string>;
                                    matched_formula_cells?: Array<string>;
                                    rows_count?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/replace`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 浮动图片
         */
        spreadsheetSheetFloatImage: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.float_image&apiName=create&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/create document }
             *
             * 创建浮动图片
             *
             * 根据传入的参数创建一张浮动图片。Float_image_token （[上传图片至表格后得到](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_all)）和range（只支持一个单元格） 必填。Float_image_id 可选，不填的话会默认生成，长度为10，由 0-9、a-z、A-Z 组合生成。表格内不重复的图片（浮动图片+单元格图片）总数不超过4000。width 和 height 为图片展示的宽高，可选，不填的话会使用图片的真实宽高。offset_x 和 offset_y 为图片左上角距离所在单元格左上角的偏移，可选，默认为 0。
             *
             * 浮动图片的设置参考：[浮动图片指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/float-image-user-guide)
             */
            create: async (
                payload?: {
                    data?: {
                        float_image_id?: string;
                        float_image_token?: string;
                        range?: string;
                        width?: number;
                        height?: number;
                        offset_x?: number;
                        offset_y?: number;
                    };
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                float_image?: {
                                    float_image_id?: string;
                                    float_image_token?: string;
                                    range?: string;
                                    width?: number;
                                    height?: number;
                                    offset_x?: number;
                                    offset_y?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.float_image&apiName=delete&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/delete document }
             *
             * 删除浮动图片
             *
             * 删除 float_image_id 对应的浮动图片。
             */
            delete: async (
                payload?: {
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        float_image_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/:float_image_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.float_image&apiName=get&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/get document }
             *
             * 获取浮动图片
             *
             * 根据 float_image_id 获取对应浮动图片的信息。
             *
             * 浮动图片参考：[浮动图片指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/float-image-user-guide)
             */
            get: async (
                payload?: {
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        float_image_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                float_image?: {
                                    float_image_id?: string;
                                    float_image_token?: string;
                                    range?: string;
                                    width?: number;
                                    height?: number;
                                    offset_x?: number;
                                    offset_y?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/:float_image_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.float_image&apiName=patch&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/patch document }
             *
             * 更新浮动图片
             *
             * 更新已有的浮动图片位置和宽高，包括 range、width、height、offset_x 和 offset_y，不包括 float_image_id 和 float_image_token。
             *
             * 浮动图片更新参考：[浮动图片指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/float-image-user-guide)
             */
            patch: async (
                payload?: {
                    data?: {
                        float_image_token?: string;
                        range?: string;
                        width?: number;
                        height?: number;
                        offset_x?: number;
                        offset_y?: number;
                    };
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        float_image_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                float_image?: {
                                    float_image_id?: string;
                                    float_image_token?: string;
                                    range?: string;
                                    width?: number;
                                    height?: number;
                                    offset_x?: number;
                                    offset_y?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/:float_image_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.float_image&apiName=query&version=v3 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/query document }
             *
             * 查询浮动图片
             *
             * 返回子表内所有的浮动图片信息。
             *
             * 浮动图片参考：[浮动图片指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/float-image-user-guide)
             */
            query: async (
                payload?: {
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    float_image_id?: string;
                                    float_image_token?: string;
                                    range?: string;
                                    width?: number;
                                    height?: number;
                                    offset_x?: number;
                                    offset_y?: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * AI能力
     */
    speech_to_text = {
        /**
         * 语音识别
         */
        speech: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=speech_to_text&resource=speech&apiName=file_recognize&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/speech_to_text-v1/speech/file_recognize document }
             *
             * 语音文件识别 (ASR)
             *
             * 语音文件识别接口，上传整段语音文件进行一次性识别。接口适合 60 秒以内音频识别
             *
             * 单租户限流：20QPS，同租户下的应用没有限流，共享本租户的 20QPS 限流
             */
            fileRecognize: async (
                payload?: {
                    data: {
                        speech: { speech?: string };
                        config: {
                            file_id: string;
                            format: string;
                            engine_type: string;
                        };
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { recognition_text: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/speech_to_text/v1/speech/file_recognize`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=speech_to_text&resource=speech&apiName=stream_recognize&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/speech_to_text-v1/speech/stream_recognize document }
             *
             * 语音流式识别 (ASR)
             *
             * 语音流式接口，将整个音频文件分片进行传入模型。能够实时返回数据。建议每个音频分片的大小为 100-200ms
             *
             * 单租户限流：20 路（一个 stream_id 称为一路会话），同租户下的应用没有限流，共享本租户的 20路限流
             */
            streamRecognize: async (
                payload?: {
                    data: {
                        speech: { speech?: string };
                        config: {
                            stream_id: string;
                            sequence_id: number;
                            action: number;
                            format: string;
                            engine_type: string;
                        };
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                stream_id: string;
                                sequence_id: number;
                                recognition_text: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/speech_to_text/v1/speech/stream_recognize`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
         
         */
    spend = {};
    /**
         
         */
    sup_project = {};
    /**
     * 任务
     */
    task = {
        /**
         * 任务
         */
        task: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=batch_delete_collaborator&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/batch_delete_collaborator document }
             *
             * 批量删除执行者
             *
             * 该接口用于批量删除执行者
             */
            batchDeleteCollaborator: async (
                payload?: {
                    data?: { id_list?: Array<string> };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { collaborators?: Array<string> };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/batch_delete_collaborator`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=batch_delete_follower&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/batch_delete_follower document }
             *
             * 批量删除关注人
             *
             * 该接口用于批量删除关注人
             */
            batchDeleteFollower: async (
                payload?: {
                    data?: { id_list?: Array<string> };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { followers?: Array<string> };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/batch_delete_follower`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=complete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/complete document }
             *
             * 完成任务
             *
             * 该接口用于将任务状态修改为“已完成”。;完成任务是指整个任务全部完成，而不支持执行者分别完成任务，执行成功后，任务对所有关联用户都变为完成状态。
             */
            complete: async (
                payload?: {
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/complete`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/create document }
             *
             * 创建任务
             *
             * 该接口可以创建一个任务，支持填写任务的基本信息，包括任务的标题，描述及协作者等。;在此基础上，创建任务时可以设置截止时间和重复规则，将任务设置为定期执行的重复任务。通过添加协作者，则可以让其他用户协同完成该任务。;此外，接口也提供了一些支持自定义内容的字段，调用方可以实现定制化效果，如完成任务后跳转到指定结束界面。
             */
            create: async (
                payload?: {
                    data: {
                        summary?: string;
                        description?: string;
                        extra?: string;
                        due?: {
                            time?: string;
                            timezone?: string;
                            is_all_day?: boolean;
                        };
                        origin: {
                            platform_i18n_name: string;
                            href?: { url?: string; title?: string };
                        };
                        can_edit?: boolean;
                        custom?: string;
                        collaborator_ids?: Array<string>;
                        follower_ids?: Array<string>;
                        repeat_rule?: string;
                        rich_summary?: string;
                        rich_description?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                task?: {
                                    id?: string;
                                    summary?: string;
                                    description?: string;
                                    complete_time?: string;
                                    creator_id?: string;
                                    extra?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    due?: {
                                        time?: string;
                                        timezone?: string;
                                        is_all_day?: boolean;
                                    };
                                    origin: {
                                        platform_i18n_name: string;
                                        href?: { url?: string; title?: string };
                                    };
                                    custom?: string;
                                    source?: number;
                                    followers?: Array<{
                                        id?: string;
                                        id_list?: Array<string>;
                                    }>;
                                    collaborators?: Array<{
                                        id?: string;
                                        id_list?: Array<string>;
                                    }>;
                                    collaborator_ids?: Array<string>;
                                    follower_ids?: Array<string>;
                                    repeat_rule?: string;
                                    rich_summary?: string;
                                    rich_description?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/delete document }
             *
             * 删除任务
             *
             * 该接口用于删除任务
             */
            delete: async (
                payload?: {
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/get document }
             *
             * 获取任务详情
             *
             * 该接口用于获取任务详情，包括任务标题、描述、时间、来源等信息
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                task?: {
                                    id?: string;
                                    summary?: string;
                                    description?: string;
                                    complete_time?: string;
                                    creator_id?: string;
                                    extra?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    due?: {
                                        time?: string;
                                        timezone?: string;
                                        is_all_day?: boolean;
                                    };
                                    origin: {
                                        platform_i18n_name: string;
                                        href?: { url?: string; title?: string };
                                    };
                                    can_edit?: boolean;
                                    custom?: string;
                                    source?: number;
                                    followers?: Array<{
                                        id?: string;
                                        id_list?: Array<string>;
                                    }>;
                                    collaborators?: Array<{
                                        id?: string;
                                        id_list?: Array<string>;
                                    }>;
                                    collaborator_ids?: Array<string>;
                                    follower_ids?: Array<string>;
                                    repeat_rule?: string;
                                    rich_summary?: string;
                                    rich_description?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        start_create_time?: string;
                        end_create_time?: string;
                        task_completed?: boolean;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/task/v1/tasks`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    id?: string;
                                                    summary?: string;
                                                    description?: string;
                                                    complete_time?: string;
                                                    creator_id?: string;
                                                    extra?: string;
                                                    create_time?: string;
                                                    update_time?: string;
                                                    due?: {
                                                        time?: string;
                                                        timezone?: string;
                                                        is_all_day?: boolean;
                                                    };
                                                    origin: {
                                                        platform_i18n_name: string;
                                                        href?: {
                                                            url?: string;
                                                            title?: string;
                                                        };
                                                    };
                                                    can_edit?: boolean;
                                                    custom?: string;
                                                    source?: number;
                                                    followers?: Array<{
                                                        id?: string;
                                                        id_list?: Array<string>;
                                                    }>;
                                                    collaborators?: Array<{
                                                        id?: string;
                                                        id_list?: Array<string>;
                                                    }>;
                                                    collaborator_ids?: Array<string>;
                                                    follower_ids?: Array<string>;
                                                    repeat_rule?: string;
                                                    rich_summary?: string;
                                                    rich_description?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/list document }
             *
             * 获取任务列表
             *
             * 以分页的方式获取任务列表。当使用user_access_token时，获取与该用户身份相关的所有任务。当使用tenant_access_token时，获取以该应用身份通过“创建任务“接口创建的所有任务（并非获取该应用所在租户下所有用户创建的任务）。;本接口支持通过任务创建时间以及任务的完成状态对任务进行过滤。
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        start_create_time?: string;
                        end_create_time?: string;
                        task_completed?: boolean;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    summary?: string;
                                    description?: string;
                                    complete_time?: string;
                                    creator_id?: string;
                                    extra?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    due?: {
                                        time?: string;
                                        timezone?: string;
                                        is_all_day?: boolean;
                                    };
                                    origin: {
                                        platform_i18n_name: string;
                                        href?: { url?: string; title?: string };
                                    };
                                    can_edit?: boolean;
                                    custom?: string;
                                    source?: number;
                                    followers?: Array<{
                                        id?: string;
                                        id_list?: Array<string>;
                                    }>;
                                    collaborators?: Array<{
                                        id?: string;
                                        id_list?: Array<string>;
                                    }>;
                                    collaborator_ids?: Array<string>;
                                    follower_ids?: Array<string>;
                                    repeat_rule?: string;
                                    rich_summary?: string;
                                    rich_description?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/patch document }
             *
             * 更新任务
             *
             * 该接口用于修改任务的标题、描述、时间、来源等相关信息
             */
            patch: async (
                payload?: {
                    data: {
                        task: {
                            summary?: string;
                            description?: string;
                            extra?: string;
                            due?: {
                                time?: string;
                                timezone?: string;
                                is_all_day?: boolean;
                            };
                            origin?: {
                                platform_i18n_name: string;
                                href?: { url?: string; title?: string };
                            };
                            can_edit?: boolean;
                            custom?: string;
                            followers?: Array<{
                                id?: string;
                                id_list?: Array<string>;
                            }>;
                            collaborators?: Array<{
                                id?: string;
                                id_list?: Array<string>;
                            }>;
                            collaborator_ids?: Array<string>;
                            follower_ids?: Array<string>;
                            repeat_rule?: string;
                            rich_summary?: string;
                            rich_description?: string;
                        };
                        update_fields: Array<string>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                task?: {
                                    id?: string;
                                    summary?: string;
                                    description?: string;
                                    complete_time?: string;
                                    creator_id?: string;
                                    extra?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    due?: {
                                        time?: string;
                                        timezone?: string;
                                        is_all_day?: boolean;
                                    };
                                    origin: {
                                        platform_i18n_name: string;
                                        href?: { url?: string; title?: string };
                                    };
                                    custom?: string;
                                    source?: number;
                                    followers?: Array<{
                                        id?: string;
                                        id_list?: Array<string>;
                                    }>;
                                    collaborators?: Array<{
                                        id?: string;
                                        id_list?: Array<string>;
                                    }>;
                                    collaborator_ids?: Array<string>;
                                    follower_ids?: Array<string>;
                                    repeat_rule?: string;
                                    rich_summary?: string;
                                    rich_description?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=uncomplete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/uncomplete document }
             *
             * 取消完成任务
             *
             * 该接口用于取消任务的已完成状态
             */
            uncomplete: async (
                payload?: {
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/uncomplete`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 执行者
         */
        taskCollaborator: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.collaborator&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-collaborator/create document }
             *
             * 新增执行者
             *
             * 该接口用于新增任务执行者，一次性可以添加多个执行者。;只有任务的创建者和执行者才能添加执行者，关注人无权限添加。
             */
            create: async (
                payload?: {
                    data?: { id?: string; id_list?: Array<string> };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                collaborator: {
                                    id?: string;
                                    id_list?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/collaborators`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.collaborator&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-collaborator/delete document }
             *
             * 删除执行者
             *
             * 该接口用于删除任务执行者
             */
            delete: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string; collaborator_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/collaborators/:collaborator_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/task/v1/tasks/:task_id/collaborators`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    id?: string;
                                                    id_list?: Array<string>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.collaborator&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-collaborator/list document }
             *
             * 获取一个任务的执行者列表
             *
             * 该接口用于查询任务执行者列表，支持分页，最大值为50
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    id_list?: Array<string>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/collaborators`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 评论
         */
        taskComment: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.comment&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/create document }
             *
             * 创建评论
             *
             * 该接口用于创建和回复任务的评论。当parent_id字段为0时，为创建评论；当parent_id不为0时，为回复某条评论
             */
            create: async (
                payload?: {
                    data?: {
                        content?: string;
                        parent_id?: string;
                        create_milli_time?: string;
                        rich_content?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                comment?: {
                                    content?: string;
                                    parent_id?: string;
                                    id?: string;
                                    create_milli_time?: string;
                                    rich_content?: string;
                                    creator_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/comments`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.comment&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/delete document }
             *
             * 删除评论
             *
             * 该接口用于通过评论ID删除评论
             */
            delete: async (
                payload?: {
                    path: { task_id: string; comment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/comments/:comment_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.comment&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/get document }
             *
             * 获取评论详情
             *
             * 该接口用于通过评论ID获取评论详情
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string; comment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                comment?: {
                                    content?: string;
                                    parent_id?: string;
                                    id?: string;
                                    create_milli_time?: string;
                                    rich_content?: string;
                                    creator_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/comments/:comment_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        list_direction?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/task/v1/tasks/:task_id/comments`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    content?: string;
                                                    parent_id?: string;
                                                    id?: string;
                                                    create_milli_time?: string;
                                                    rich_content?: string;
                                                    creator_id?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.comment&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/list document }
             *
             * 获取评论列表
             *
             * 该接口用于查询任务评论列表，支持分页，最大值为100
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        list_direction?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    content?: string;
                                    parent_id?: string;
                                    id?: string;
                                    create_milli_time?: string;
                                    rich_content?: string;
                                    creator_id?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/comments`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.comment&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/update document }
             *
             * 更新评论
             *
             * 该接口用于更新评论内容
             */
            update: async (
                payload?: {
                    data?: { content?: string; rich_content?: string };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string; comment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                comment?: {
                                    content?: string;
                                    parent_id?: string;
                                    id?: string;
                                    create_milli_time?: string;
                                    rich_content?: string;
                                    creator_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/comments/:comment_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 关注人
         */
        taskFollower: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.follower&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-follower/create document }
             *
             * 新增关注人
             *
             * 该接口用于创建任务关注人。可以一次性添加多位关注人。关注人ID要使用表示用户的ID。
             */
            create: async (
                payload?: {
                    data?: { id?: string; id_list?: Array<string> };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                follower: {
                                    id?: string;
                                    id_list?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/followers`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.follower&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-follower/delete document }
             *
             * 删除关注人
             *
             * 该接口用于删除任务关注人
             */
            delete: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string; follower_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/followers/:follower_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/task/v1/tasks/:task_id/followers`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    id?: string;
                                                    id_list?: Array<string>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.follower&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-follower/list document }
             *
             * 获取任务关注人列表
             *
             * 该接口用于查询任务关注人列表，支持分页，最大值为50
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    id_list?: Array<string>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/followers`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 提醒
         */
        taskReminder: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.reminder&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-reminder/create document }
             *
             * 新增提醒时间
             *
             * 该接口用于创建任务的提醒时间。提醒时间在截止时间基础上做偏移，但是偏移后的结果不能早于当前时间。
             */
            create: async (
                payload?: {
                    data: { relative_fire_minute: number };
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                reminder?: {
                                    id?: string;
                                    relative_fire_minute: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/reminders`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.reminder&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-reminder/delete document }
             *
             * 删除提醒时间
             *
             * 删除提醒时间，返回结果状态
             */
            delete: async (
                payload?: {
                    path: { task_id: string; reminder_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/reminders/:reminder_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/task/v1/tasks/:task_id/reminders`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    id?: string;
                                                    relative_fire_minute: number;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.reminder&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-reminder/list document }
             *
             * 查询提醒时间列表
             *
             * 返回提醒时间列表，支持分页，最大值为50
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    relative_fire_minute: number;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/reminders`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * 企业信息
     */
    tenant = {
        /**
         * 企业信息
         */
        tenant: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=tenant&resource=tenant&apiName=query&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/tenant-v2/tenant/query document }
             *
             * 获取企业信息
             *
             * 获取企业名称、企业编号等企业信息
             *
             * 如果ISV应用是企业创建时默认安装，并且180天内企业未打开或使用过此应用，则无法通过此接口获取到企业信息。
             */
            query: async (payload?: {}, options?: IRequestOptions) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                tenant?: {
                                    name: string;
                                    display_id: string;
                                    tenant_tag: number;
                                    tenant_key: string;
                                    avatar: {
                                        avatar_origin?: string;
                                        avatar_72?: string;
                                        avatar_240?: string;
                                        avatar_640?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/tenant/v2/tenant/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * AI能力
     */
    translation = {
        /**
         * 文本
         */
        text: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=translation&resource=text&apiName=detect&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/translation-v1/text/detect document }
             *
             * 文本语种识别
             *
             * 机器翻译 (MT)，支持 100 多种语言识别，返回符合 ISO 639-1 标准
             *
             * 单租户限流：20QPS，同租户下的应用没有限流，共享本租户的 20QPS 限流
             */
            detect: async (
                payload?: {
                    data: { text: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { language: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/translation/v1/text/detect`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=translation&resource=text&apiName=translate&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/translation-v1/text/translate document }
             *
             * 文本翻译
             *
             * 机器翻译 (MT)，支持以下语种互译：;"zh": 汉语；;"zh-Hant": 繁体汉语；;"en": 英语；;"ja": 日语；;"ru": 俄语；;"de": 德语；;"fr": 法语；;"it": 意大利语；;"pl": 波兰语；;"th": 泰语；;"hi": 印地语；;"id": 印尼语；;"es": 西班牙语；;"pt": 葡萄牙语；;"ko": 朝鲜语；;"vi": 越南语；
             *
             * 单租户限流：20QPS，同租户下的应用没有限流，共享本租户的 20QPS 限流
             */
            translate: async (
                payload?: {
                    data: {
                        source_language: string;
                        text: string;
                        target_language: string;
                        glossary?: Array<{ from: string; to: string }>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        { code?: number; msg?: string; data?: { text: string } }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/translation/v1/text/translate`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
         
         */
    unified_kms_log = {};
    /**
     * 视频会议
     */
    vc = {
        /**
         * 导出
         */
        export: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=export&apiName=download&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/export/download document }
             *
             * 下载导出文件
             *
             * 下载导出文件
             */
            download: async (
                payload?: {
                    params: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await this.httpInstance
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/exports/download`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        return new Promise((resolve, reject) => {
                            const writableStream =
                                fs.createWriteStream(filePath);
                            writableStream.on("finish", () => {
                                resolve(filePath);
                            });
                            writableStream.on("error", (e) => {
                                reject(e);
                            });
                            res.pipe(writableStream);
                        });
                    },
                };
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=export&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/export/get document }
             *
             * 查询导出任务结果
             *
             * 查看异步导出的进度
             */
            get: async (
                payload?: {
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                status: number;
                                url?: string;
                                file_token?: string;
                                fail_msg?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/exports/:task_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=export&apiName=meeting_list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/export/meeting_list document }
             *
             * 导出会议明细
             *
             * 导出会议明细，具体权限要求请参考「导出概述」
             */
            meetingList: async (
                payload?: {
                    data: {
                        start_time: string;
                        end_time: string;
                        meeting_no?: string;
                        user_id?: string;
                        room_id?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { task_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/exports/meeting_list`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=export&apiName=participant_list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/export/participant_list document }
             *
             * 导出参会人明细
             *
             * 导出某个会议的参会人详情列表，具体权限要求请参考「导出概述」
             */
            participantList: async (
                payload?: {
                    data: {
                        meeting_start_time: string;
                        meeting_end_time: string;
                        meeting_no: string;
                        user_id?: string;
                        room_id?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { task_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/exports/participant_list`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=export&apiName=participant_quality_list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/export/participant_quality_list document }
             *
             * 导出参会人会议质量数据
             *
             * 导出某场会议某个参会人的音视频&共享质量数据;，具体权限要求请参考「导出概述」
             */
            participantQualityList: async (
                payload?: {
                    data: {
                        meeting_start_time: string;
                        meeting_end_time: string;
                        meeting_no: string;
                        join_time: string;
                        user_id?: string;
                        room_id?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { task_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/exports/participant_quality_list`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=export&apiName=resource_reservation_list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/export/resource_reservation_list document }
             *
             * 导出会议室预定数据
             *
             * 导出会议室预定数据，具体权限要求请参考「导出概述」
             */
            resourceReservationList: async (
                payload?: {
                    data: {
                        room_level_id: string;
                        need_topic?: boolean;
                        start_time: string;
                        end_time: string;
                        room_ids?: Array<string>;
                        is_exclude?: boolean;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { task_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/exports/resource_reservation_list`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 会议
         */
        meeting: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=end&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/end document }
             *
             * 结束会议
             *
             * 结束一个进行中的会议
             *
             * 会议正在进行中，且操作者须具有相应的权限（如果操作者为用户，必须是会中当前主持人）
             */
            end: async (
                payload?: {
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id/end`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/get document }
             *
             * 获取会议详情
             *
             * 获取一个会议的详细数据
             *
             * 只能获取归属于自己的会议，支持查询最近90天内的会议
             */
            get: async (
                payload?: {
                    params?: {
                        with_participants?: boolean;
                        with_meeting_ability?: boolean;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                meeting?: {
                                    id?: string;
                                    topic?: string;
                                    url?: string;
                                    meeting_no?: string;
                                    create_time?: string;
                                    start_time?: string;
                                    end_time?: string;
                                    host_user?: {
                                        id?: string;
                                        user_type?: number;
                                    };
                                    status?: number;
                                    participant_count?: string;
                                    participant_count_accumulated?: string;
                                    participants?: Array<{
                                        id?: string;
                                        first_join_time?: string;
                                        final_leave_time?: string;
                                        in_meeting_duration?: string;
                                        user_type?: number;
                                        is_host?: boolean;
                                        is_cohost?: boolean;
                                        is_external?: boolean;
                                        status?: number;
                                    }>;
                                    ability?: {
                                        use_video?: boolean;
                                        use_audio?: boolean;
                                        use_share_screen?: boolean;
                                        use_follow_screen?: boolean;
                                        use_recording?: boolean;
                                        use_pstn?: boolean;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=invite&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/invite document }
             *
             * 邀请参会人
             *
             * 邀请参会人进入会议
             *
             * 发起邀请的操作者必须具有相应的权限（如果操作者为用户，则必须在会中），如果会议被锁定、或参会人数如果达到上限，则会邀请失败
             */
            invite: async (
                payload?: {
                    data: {
                        invitees: Array<{ id?: string; user_type?: number }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                invite_results?: Array<{
                                    id?: string;
                                    user_type?: number;
                                    status?: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id/invite`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=kickout&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/kickout document }
             *
             * 移除参会人
             *
             * 将参会人从会议中移除
             */
            kickout: async (
                payload?: {
                    data: {
                        kickout_users: Array<{
                            id?: string;
                            user_type?: number;
                        }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                kickout_results?: Array<{
                                    id?: string;
                                    user_type?: number;
                                    result?: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id/kickout`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listByNoWithIterator: async (
                payload?: {
                    params: {
                        meeting_no: string;
                        start_time: string;
                        end_time: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/vc/v1/meetings/list_by_no`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                meeting_briefs?: Array<{
                                                    id?: string;
                                                    topic?: string;
                                                    url?: string;
                                                    meeting_no?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=list_by_no&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/list_by_no document }
             *
             * 获取与会议号相关联的会议列表
             *
             * 获取指定时间范围（90天内)会议号关联的会议简要信息列表
             */
            listByNo: async (
                payload?: {
                    params: {
                        meeting_no: string;
                        start_time: string;
                        end_time: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                meeting_briefs?: Array<{
                                    id?: string;
                                    topic?: string;
                                    url?: string;
                                    meeting_no?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/list_by_no`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=set_host&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/set_host document }
             *
             * 设置主持人
             *
             * 设置会议的主持人
             *
             * 发起设置主持人的操作者必须具有相应的权限（如果操作者为用户，必须是会中当前主持人）；该操作使用CAS并发安全机制，需传入会中当前主持人，如果操作失败可使用返回的最新数据重试
             */
            setHost: async (
                payload?: {
                    data: {
                        host_user: { id?: string; user_type?: number };
                        old_host_user?: { id?: string; user_type?: number };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                host_user?: { id?: string; user_type?: number };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id/set_host`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 录制
         */
        meetingRecording: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting.recording&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/get document }
             *
             * 获取录制文件
             *
             * 获取一个会议的录制文件。
             *
             * 会议结束后并且收到了"录制完成"的事件方可获取录制文件；只有会议owner（通过开放平台预约的会议即为预约人）有权限获取；录制时间太短(&lt;5s)有可能无法生成录制文件
             */
            get: async (
                payload?: {
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                recording?: { url?: string; duration?: string };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id/recording`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting.recording&apiName=set_permission&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/set_permission document }
             *
             * 授权录制文件
             *
             * 将一个会议的录制文件授权给组织、用户或公开到公网
             *
             * 会议结束后并且收到了"录制完成"的事件方可进行授权；会议owner（通过开放平台预约的会议即为预约人）才有权限操作
             */
            setPermission: async (
                payload?: {
                    data: {
                        permission_objects: Array<{
                            id?: string;
                            type: number;
                            permission: number;
                        }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id/recording/set_permission`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting.recording&apiName=start&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/start document }
             *
             * 开始录制
             *
             * 在会议中开始录制。
             *
             * 会议正在进行中，且操作者具有相应权限（如果操作者为用户，必须是会中当前主持人）
             */
            start: async (
                payload?: {
                    data?: { timezone?: number };
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id/recording/start`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting.recording&apiName=stop&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/stop document }
             *
             * 停止录制
             *
             * 在会议中停止录制。
             *
             * 会议正在录制中，且操作者具有相应权限（如果操作者为用户，必须是会中当前主持人）
             */
            stop: async (
                payload?: {
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id/recording/stop`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * meeting_list
         */
        meetingList: {
            getWithIterator: async (
                payload?: {
                    params: {
                        start_time: string;
                        end_time: string;
                        meeting_no?: string;
                        user_id?: string;
                        room_id?: string;
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/vc/v1/meeting_list`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                meeting_list?: Array<{
                                                    meeting_id?: string;
                                                    meeting_topic?: string;
                                                    organizer?: string;
                                                    department?: string;
                                                    user_id?: string;
                                                    employee_id?: string;
                                                    email?: string;
                                                    mobile?: string;
                                                    meeting_start_time?: string;
                                                    meeting_end_time?: string;
                                                    meeting_duration?: string;
                                                    number_of_participants?: string;
                                                    audio?: boolean;
                                                    video?: boolean;
                                                    sharing?: boolean;
                                                    recording?: boolean;
                                                    telephone?: boolean;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting_list&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=vc&resource=meeting_list&version=v1 document }
             */
            get: async (
                payload?: {
                    params: {
                        start_time: string;
                        end_time: string;
                        meeting_no?: string;
                        user_id?: string;
                        room_id?: string;
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                meeting_list?: Array<{
                                    meeting_id?: string;
                                    meeting_topic?: string;
                                    organizer?: string;
                                    department?: string;
                                    user_id?: string;
                                    employee_id?: string;
                                    email?: string;
                                    mobile?: string;
                                    meeting_start_time?: string;
                                    meeting_end_time?: string;
                                    meeting_duration?: string;
                                    number_of_participants?: string;
                                    audio?: boolean;
                                    video?: boolean;
                                    sharing?: boolean;
                                    recording?: boolean;
                                    telephone?: boolean;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meeting_list`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * participant_list
         */
        participantList: {
            getWithIterator: async (
                payload?: {
                    params: {
                        meeting_start_time: string;
                        meeting_end_time: string;
                        meeting_no: string;
                        user_id?: string;
                        room_id?: string;
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/vc/v1/participant_list`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                participants?: Array<{
                                                    participant_name?: string;
                                                    department?: string;
                                                    user_id?: string;
                                                    employee_id?: string;
                                                    phone?: string;
                                                    email?: string;
                                                    device?: string;
                                                    app_version?: string;
                                                    public_ip?: string;
                                                    internal_ip?: string;
                                                    use_rtc_proxy?: boolean;
                                                    location?: string;
                                                    network_type?: string;
                                                    protocol?: string;
                                                    microphone?: string;
                                                    speaker?: string;
                                                    camera?: string;
                                                    audio?: boolean;
                                                    video?: boolean;
                                                    sharing?: boolean;
                                                    join_time?: string;
                                                    leave_time?: string;
                                                    time_in_meeting?: string;
                                                    leave_reason?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=participant_list&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=vc&resource=participant_list&version=v1 document }
             */
            get: async (
                payload?: {
                    params: {
                        meeting_start_time: string;
                        meeting_end_time: string;
                        meeting_no: string;
                        user_id?: string;
                        room_id?: string;
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                participants?: Array<{
                                    participant_name?: string;
                                    department?: string;
                                    user_id?: string;
                                    employee_id?: string;
                                    phone?: string;
                                    email?: string;
                                    device?: string;
                                    app_version?: string;
                                    public_ip?: string;
                                    internal_ip?: string;
                                    use_rtc_proxy?: boolean;
                                    location?: string;
                                    network_type?: string;
                                    protocol?: string;
                                    microphone?: string;
                                    speaker?: string;
                                    camera?: string;
                                    audio?: boolean;
                                    video?: boolean;
                                    sharing?: boolean;
                                    join_time?: string;
                                    leave_time?: string;
                                    time_in_meeting?: string;
                                    leave_reason?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/participant_list`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * participant_quality_list
         */
        participantQualityList: {
            getWithIterator: async (
                payload?: {
                    params: {
                        meeting_start_time: string;
                        meeting_end_time: string;
                        meeting_no: string;
                        join_time: string;
                        user_id?: string;
                        room_id?: string;
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/vc/v1/participant_quality_list`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                participant_quality_list?: Array<{
                                                    network?: {
                                                        time?: string;
                                                        network_delay?: string;
                                                        bitrate_received?: string;
                                                        packet_loss_avg_received?: string;
                                                        packet_loss_max_received?: string;
                                                        bitrate_sent?: string;
                                                        packet_loss_avg_sent?: string;
                                                        packet_loss_max_sent?: string;
                                                    };
                                                    audio?: {
                                                        time?: string;
                                                        mic_input_volume?: string;
                                                        speaker_volume?: string;
                                                        bitrate_received?: string;
                                                        latency_received?: string;
                                                        jitter_received?: string;
                                                        bitrate_sent?: string;
                                                        latency_sent?: string;
                                                        jitter_sent?: string;
                                                    };
                                                    video?: {
                                                        time?: string;
                                                        bitrate_received?: string;
                                                        latency_received?: string;
                                                        jitter_received?: string;
                                                        maximum_resolution_received?: string;
                                                        framerate_received?: string;
                                                        bitrate_sent?: string;
                                                        latency_sent?: string;
                                                        jitter_sent?: string;
                                                        maximum_resolution_sent?: string;
                                                        framerate_sent?: string;
                                                    };
                                                    screen_sharing?: {
                                                        time?: string;
                                                        bitrate_received?: string;
                                                        latency_received?: string;
                                                        jitter_received?: string;
                                                        maximum_resolution_received?: string;
                                                        framerate_received?: string;
                                                        bitrate_sent?: string;
                                                        latency_sent?: string;
                                                        jitter_sent?: string;
                                                        maximum_resolution_sent?: string;
                                                        framerate_sent?: string;
                                                    };
                                                    cpu_usage?: {
                                                        time?: string;
                                                        client_avg_cpu_usage?: string;
                                                        client_max_cpu_usage?: string;
                                                        system_avg_cpu_usage?: string;
                                                        system_max_cpu_usage?: string;
                                                    };
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=participant_quality_list&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=vc&resource=participant_quality_list&version=v1 document }
             */
            get: async (
                payload?: {
                    params: {
                        meeting_start_time: string;
                        meeting_end_time: string;
                        meeting_no: string;
                        join_time: string;
                        user_id?: string;
                        room_id?: string;
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                participant_quality_list?: Array<{
                                    network?: {
                                        time?: string;
                                        network_delay?: string;
                                        bitrate_received?: string;
                                        packet_loss_avg_received?: string;
                                        packet_loss_max_received?: string;
                                        bitrate_sent?: string;
                                        packet_loss_avg_sent?: string;
                                        packet_loss_max_sent?: string;
                                    };
                                    audio?: {
                                        time?: string;
                                        mic_input_volume?: string;
                                        speaker_volume?: string;
                                        bitrate_received?: string;
                                        latency_received?: string;
                                        jitter_received?: string;
                                        bitrate_sent?: string;
                                        latency_sent?: string;
                                        jitter_sent?: string;
                                    };
                                    video?: {
                                        time?: string;
                                        bitrate_received?: string;
                                        latency_received?: string;
                                        jitter_received?: string;
                                        maximum_resolution_received?: string;
                                        framerate_received?: string;
                                        bitrate_sent?: string;
                                        latency_sent?: string;
                                        jitter_sent?: string;
                                        maximum_resolution_sent?: string;
                                        framerate_sent?: string;
                                    };
                                    screen_sharing?: {
                                        time?: string;
                                        bitrate_received?: string;
                                        latency_received?: string;
                                        jitter_received?: string;
                                        maximum_resolution_received?: string;
                                        framerate_received?: string;
                                        bitrate_sent?: string;
                                        latency_sent?: string;
                                        jitter_sent?: string;
                                        maximum_resolution_sent?: string;
                                        framerate_sent?: string;
                                    };
                                    cpu_usage?: {
                                        time?: string;
                                        client_avg_cpu_usage?: string;
                                        client_max_cpu_usage?: string;
                                        system_avg_cpu_usage?: string;
                                        system_max_cpu_usage?: string;
                                    };
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/participant_quality_list`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 会议报告
         */
        report: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=report&apiName=get_daily&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/report/get_daily document }
             *
             * 获取会议报告
             *
             * 获取一段时间内组织的每日会议使用报告。
             *
             * 支持最近90天内的数据查询
             */
            getDaily: async (
                payload?: {
                    params: { start_time: string; end_time: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                meeting_report?: {
                                    total_meeting_count?: string;
                                    total_meeting_duration?: string;
                                    total_participant_count?: string;
                                    daily_report?: Array<{
                                        date?: string;
                                        meeting_count?: string;
                                        meeting_duration?: string;
                                        participant_count?: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reports/get_daily`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=report&apiName=get_top_user&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/report/get_top_user document }
             *
             * 获取top用户列表
             *
             * 获取一段时间内组织内会议使用的top用户列表。
             *
             * 支持最近90天内的数据查询；默认返回前10位，最多可查询前100位
             */
            getTopUser: async (
                payload?: {
                    params: {
                        start_time: string;
                        end_time: string;
                        limit: number;
                        order_by: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                top_user_report?: Array<{
                                    id?: string;
                                    name?: string;
                                    user_type?: number;
                                    meeting_count?: string;
                                    meeting_duration?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reports/get_top_user`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 预约
         */
        reserve: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve&apiName=apply&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/apply document }
             *
             * 预约会议
             *
             * 创建一个会议预约。
             *
             * 支持预约最近30天内的会议（到期时间距离当前时间不超过30天），预约到期后会议号将被释放，如需继续使用可通过"更新预约"接口进行续期；预约会议时可配置参会人在会中的权限，以达到控制会议的目的
             */
            apply: async (
                payload?: {
                    data: {
                        end_time?: string;
                        owner_id?: string;
                        meeting_settings: {
                            topic?: string;
                            action_permissions?: Array<{
                                permission: number;
                                permission_checkers: Array<{
                                    check_field: number;
                                    check_mode: number;
                                    check_list: Array<string>;
                                }>;
                            }>;
                            meeting_initial_type?: number;
                            call_setting?: {
                                callee: {
                                    id?: string;
                                    user_type: number;
                                    pstn_sip_info?: {
                                        nickname?: string;
                                        main_address: string;
                                    };
                                };
                            };
                            auto_record?: boolean;
                            assign_host_list?: Array<{
                                user_type?: number;
                                id?: string;
                            }>;
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                reserve?: {
                                    id?: string;
                                    meeting_no?: string;
                                    url?: string;
                                    app_link?: string;
                                    live_link?: string;
                                    end_time?: string;
                                };
                                reserve_correction_check_info?: {
                                    invalid_host_id_list?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reserves/apply`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/delete document }
             *
             * 删除预约
             *
             * 删除一个预约
             *
             * 只能删除归属于自己的预约；删除后数据不可恢复
             */
            delete: async (
                payload?: {
                    path?: { reserve_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reserves/:reserve_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/get document }
             *
             * 获取预约
             *
             * 获取一个预约的详情
             *
             * 只能获取归属于自己的预约
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { reserve_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                reserve?: {
                                    id?: string;
                                    meeting_no?: string;
                                    url?: string;
                                    app_link?: string;
                                    live_link?: string;
                                    end_time?: string;
                                    expire_status?: number;
                                    reserve_user_id?: string;
                                    meeting_settings?: {
                                        topic?: string;
                                        action_permissions?: Array<{
                                            permission: number;
                                            permission_checkers: Array<{
                                                check_field: number;
                                                check_mode: number;
                                                check_list: Array<string>;
                                            }>;
                                        }>;
                                        meeting_initial_type?: number;
                                        call_setting?: {
                                            callee: {
                                                id?: string;
                                                user_type: number;
                                                pstn_sip_info?: {
                                                    nickname?: string;
                                                    main_address: string;
                                                };
                                            };
                                        };
                                        auto_record?: boolean;
                                        assign_host_list?: Array<{
                                            user_type?: number;
                                            id?: string;
                                        }>;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reserves/:reserve_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve&apiName=get_active_meeting&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/get_active_meeting document }
             *
             * 获取活跃会议
             *
             * 获取一个预约的当前活跃会议
             *
             * 只能获取归属于自己的预约的活跃会议（一个预约最多有一个正在进行中的会议）
             */
            getActiveMeeting: async (
                payload?: {
                    params?: {
                        with_participants?: boolean;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { reserve_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                meeting?: {
                                    id?: string;
                                    topic?: string;
                                    url?: string;
                                    meeting_no?: string;
                                    create_time?: string;
                                    start_time?: string;
                                    end_time?: string;
                                    host_user?: {
                                        id?: string;
                                        user_type?: number;
                                    };
                                    status?: number;
                                    participant_count?: string;
                                    participant_count_accumulated?: string;
                                    participants?: Array<{
                                        id?: string;
                                        first_join_time?: string;
                                        final_leave_time?: string;
                                        in_meeting_duration?: string;
                                        user_type?: number;
                                        is_host?: boolean;
                                        is_cohost?: boolean;
                                        is_external?: boolean;
                                        status?: number;
                                    }>;
                                    ability?: {
                                        use_video?: boolean;
                                        use_audio?: boolean;
                                        use_share_screen?: boolean;
                                        use_follow_screen?: boolean;
                                        use_recording?: boolean;
                                        use_pstn?: boolean;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reserves/:reserve_id/get_active_meeting`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve&apiName=update&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/update document }
             *
             * 更新预约
             *
             * 更新一个预约
             *
             * 只能更新归属于自己的预约，不需要更新的字段不传（如果传空则会被更新为空）；可用于续期操作，到期时间距离当前时间不超过30天
             */
            update: async (
                payload?: {
                    data?: {
                        end_time?: string;
                        meeting_settings?: {
                            topic?: string;
                            action_permissions?: Array<{
                                permission: number;
                                permission_checkers: Array<{
                                    check_field: number;
                                    check_mode: number;
                                    check_list: Array<string>;
                                }>;
                            }>;
                            meeting_initial_type?: number;
                            call_setting?: {
                                callee: {
                                    id?: string;
                                    user_type: number;
                                    pstn_sip_info?: {
                                        nickname?: string;
                                        main_address: string;
                                    };
                                };
                            };
                            auto_record?: boolean;
                            assign_host_list?: Array<{
                                user_type?: number;
                                id?: string;
                            }>;
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { reserve_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                reserve?: {
                                    id?: string;
                                    meeting_no?: string;
                                    url?: string;
                                    live_link?: string;
                                    end_time?: string;
                                    expire_status?: number;
                                };
                                reserve_correction_check_info?: {
                                    invalid_host_id_list?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reserves/:reserve_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * reserve_config.admin
         */
        reserveConfigAdmin: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve_config.admin&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=vc&resource=reserve_config.admin&version=v1 document }
             */
            get: async (
                payload?: {
                    params: {
                        scope_type: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { reserve_config_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                reserve_admin_config: {
                                    depts?: Array<{ department_id: string }>;
                                    users?: Array<{ user_id: string }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reserve_configs/:reserve_config_id/admin`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve_config.admin&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=vc&resource=reserve_config.admin&version=v1 document }
             */
            patch: async (
                payload?: {
                    data: {
                        scope_type: number;
                        reserve_admin_config: {
                            depts?: Array<{ department_id: string }>;
                            users?: Array<{ user_id: string }>;
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { reserve_config_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reserve_configs/:reserve_config_id/admin`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * reserve_config
         */
        reserveConfig: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve_config&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve_config/patch document }
             *
             * 更新会议室预定范围
             *
             * 更新会议室预定范围
             */
            patch: async (
                payload?: {
                    data: {
                        scope_type: string;
                        approval_config?: {
                            approval_switch?: number;
                            approval_condition?: number;
                            meeting_duration?: number;
                            approvers?: Array<{ user_id: string }>;
                        };
                        time_config?: {
                            time_switch: number;
                            days_in_advance?: number;
                            opening_hour?: string;
                            start_time?: string;
                            end_time?: string;
                            max_duration?: number;
                        };
                        reserve_scope_config?: {
                            allow_all_users?: number;
                            allow_users?: Array<{ user_id: string }>;
                            allow_depts?: Array<{ department_id: string }>;
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { reserve_config_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reserve_configs/:reserve_config_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve_config&apiName=reserve_scope&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve_config/reserve_scope document }
             *
             * 获取会议室预定范围
             *
             * 获取会议室预定范围
             */
            reserveScope: async (
                payload?: {
                    params: {
                        scope_id: string;
                        scope_type: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                approve_config?: {
                                    approval_switch?: number;
                                    approval_condition?: number;
                                    meeting_duration?: number;
                                    approvers?: Array<{ user_id: string }>;
                                };
                                time_config?: {
                                    time_switch: number;
                                    days_in_advance?: number;
                                    opening_hour?: string;
                                    start_time?: string;
                                    end_time?: string;
                                    max_duration?: number;
                                };
                                reserve_scope_config?: {
                                    allow_all_users?: number;
                                    allow_users?: Array<{ user_id: string }>;
                                    allow_depts?: Array<{
                                        department_id: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reserve_configs/reserve_scope`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * resource_reservation_list
         */
        resourceReservationList: {
            getWithIterator: async (
                payload?: {
                    params: {
                        room_level_id: string;
                        need_topic?: boolean;
                        start_time: string;
                        end_time: string;
                        room_ids: number;
                        is_exclude?: boolean;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/vc/v1/resource_reservation_list`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                room_reservation_list?: Array<{
                                                    room_name?: string;
                                                    event_title?: string;
                                                    reserver?: string;
                                                    department_of_reserver?: string;
                                                    guests_number?: string;
                                                    accepted_number?: string;
                                                    event_start_time?: string;
                                                    event_end_time?: string;
                                                    event_duration?: string;
                                                    reservation_status?: string;
                                                    check_in_device?: string;
                                                    room_check_in_status?: string;
                                                    check_in_time?: string;
                                                    is_release_early?: string;
                                                    releasing_person?: string;
                                                    releasing_time?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=resource_reservation_list&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=vc&resource=resource_reservation_list&version=v1 document }
             */
            get: async (
                payload?: {
                    params: {
                        room_level_id: string;
                        need_topic?: boolean;
                        start_time: string;
                        end_time: string;
                        room_ids: number;
                        is_exclude?: boolean;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                room_reservation_list?: Array<{
                                    room_name?: string;
                                    event_title?: string;
                                    reserver?: string;
                                    department_of_reserver?: string;
                                    guests_number?: string;
                                    accepted_number?: string;
                                    event_start_time?: string;
                                    event_end_time?: string;
                                    event_duration?: string;
                                    reservation_status?: string;
                                    check_in_device?: string;
                                    room_check_in_status?: string;
                                    check_in_time?: string;
                                    is_release_early?: string;
                                    releasing_person?: string;
                                    releasing_time?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/resource_reservation_list`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 会议室
         */
        room: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/create document }
             *
             * 创建会议室
             *
             * 该接口用于创建会议室
             */
            create: async (
                payload?: {
                    data: {
                        name: string;
                        capacity: number;
                        description?: string;
                        custom_room_id?: string;
                        room_level_id: string;
                        room_status?: {
                            status: boolean;
                            schedule_status?: boolean;
                            disable_start_time?: string;
                            disable_end_time?: string;
                            disable_reason?: string;
                            contact_ids?: Array<string>;
                            disable_notice?: boolean;
                            resume_notice?: boolean;
                        };
                        device?: Array<{ name: string }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                room?: {
                                    room_id?: string;
                                    name?: string;
                                    capacity?: number;
                                    description?: string;
                                    display_id?: string;
                                    custom_room_id?: string;
                                    room_level_id?: string;
                                    path?: Array<string>;
                                    room_status?: {
                                        status: boolean;
                                        schedule_status?: boolean;
                                        disable_start_time?: string;
                                        disable_end_time?: string;
                                        disable_reason?: string;
                                        contact_ids?: Array<string>;
                                        disable_notice?: boolean;
                                        resume_notice?: boolean;
                                    };
                                    device?: Array<{ name: string }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/rooms`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room&apiName=delete&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/delete document }
             *
             * 删除会议室
             *
             * 该接口可以用来删除某个会议室
             */
            delete: async (
                payload?: {
                    path: { room_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/rooms/:room_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/get document }
             *
             * 查询会议室详情
             *
             * 该接口可以使用会议室ID查询会议室详情
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { room_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                room?: {
                                    room_id?: string;
                                    name?: string;
                                    capacity?: number;
                                    description?: string;
                                    display_id?: string;
                                    custom_room_id?: string;
                                    room_level_id?: string;
                                    path?: Array<string>;
                                    room_status?: {
                                        status: boolean;
                                        schedule_status?: boolean;
                                        disable_start_time?: string;
                                        disable_end_time?: string;
                                        disable_reason?: string;
                                        contact_ids?: Array<string>;
                                        disable_notice?: boolean;
                                        resume_notice?: boolean;
                                    };
                                    device?: Array<{ name: string }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/rooms/:room_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        room_level_id?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/vc/v1/rooms`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                rooms?: Array<{
                                                    room_id?: string;
                                                    name?: string;
                                                    capacity?: number;
                                                    description?: string;
                                                    display_id?: string;
                                                    custom_room_id?: string;
                                                    room_level_id?: string;
                                                    path?: Array<string>;
                                                    room_status?: {
                                                        status: boolean;
                                                        schedule_status?: boolean;
                                                        disable_start_time?: string;
                                                        disable_end_time?: string;
                                                        disable_reason?: string;
                                                        contact_ids?: Array<string>;
                                                        disable_notice?: boolean;
                                                        resume_notice?: boolean;
                                                    };
                                                    device?: Array<{
                                                        name: string;
                                                    }>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/list document }
             *
             * 查询会议室列表
             *
             * 该接口可以用来查询某个会议室层级下会议室列表
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        room_level_id?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                rooms?: Array<{
                                    room_id?: string;
                                    name?: string;
                                    capacity?: number;
                                    description?: string;
                                    display_id?: string;
                                    custom_room_id?: string;
                                    room_level_id?: string;
                                    path?: Array<string>;
                                    room_status?: {
                                        status: boolean;
                                        schedule_status?: boolean;
                                        disable_start_time?: string;
                                        disable_end_time?: string;
                                        disable_reason?: string;
                                        contact_ids?: Array<string>;
                                        disable_notice?: boolean;
                                        resume_notice?: boolean;
                                    };
                                    device?: Array<{ name: string }>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/rooms`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room&apiName=mget&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/mget document }
             *
             * 批量查询会议室详情
             *
             * 该接口可以使用会议室ID批量查询会议室详情
             */
            mget: async (
                payload?: {
                    data: { room_ids: Array<string> };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    room_id?: string;
                                    name?: string;
                                    capacity?: number;
                                    description?: string;
                                    display_id?: string;
                                    custom_room_id?: string;
                                    room_level_id?: string;
                                    path?: Array<string>;
                                    room_status?: {
                                        status: boolean;
                                        schedule_status?: boolean;
                                        disable_start_time?: string;
                                        disable_end_time?: string;
                                        disable_reason?: string;
                                        contact_ids?: Array<string>;
                                        disable_notice?: boolean;
                                        resume_notice?: boolean;
                                    };
                                    device?: Array<{ name: string }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/rooms/mget`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/patch document }
             *
             * 更新会议室
             *
             * 该接口可以用来更新某个会议室的信息
             */
            patch: async (
                payload?: {
                    data?: {
                        name?: string;
                        capacity?: number;
                        description?: string;
                        custom_room_id?: string;
                        room_level_id?: string;
                        room_status?: {
                            status: boolean;
                            schedule_status?: boolean;
                            disable_start_time?: string;
                            disable_end_time?: string;
                            disable_reason?: string;
                            contact_ids?: Array<string>;
                            disable_notice?: boolean;
                            resume_notice?: boolean;
                        };
                        device?: Array<{ name: string }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { room_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/rooms/:room_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room&apiName=search&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/search document }
             *
             * 搜索会议室
             *
             * 该接口可以用来搜索会议室，支持使用关键词进行搜索，也支持使用自定义会议室ID进行查询
             */
            search: async (
                payload?: {
                    data?: {
                        custom_room_ids?: Array<string>;
                        keyword?: string;
                        room_level_id?: string;
                        search_level_name?: boolean;
                        page_size?: number;
                        page_token?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                rooms?: Array<{
                                    room_id?: string;
                                    name?: string;
                                    capacity?: number;
                                    description?: string;
                                    display_id?: string;
                                    custom_room_id?: string;
                                    room_level_id?: string;
                                    path?: Array<string>;
                                    room_status?: {
                                        status: boolean;
                                        schedule_status?: boolean;
                                        disable_start_time?: string;
                                        disable_end_time?: string;
                                        disable_reason?: string;
                                        contact_ids?: Array<string>;
                                        disable_notice?: boolean;
                                        resume_notice?: boolean;
                                    };
                                    device?: Array<{ name: string }>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/rooms/search`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * room_config
         */
        roomConfig: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_config&apiName=query&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query&project=vc&resource=room_config&version=v1 document }
             */
            query: async (
                payload?: {
                    params: {
                        scope: number;
                        country_id?: string;
                        district_id?: string;
                        building_id?: string;
                        floor_name?: string;
                        room_id?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                room_background?: string;
                                display_background?: string;
                                digital_signage?: {
                                    enable?: boolean;
                                    mute?: boolean;
                                    start_display?: number;
                                    stop_display?: number;
                                    materials?: Array<{
                                        id?: string;
                                        name?: string;
                                        material_type?: number;
                                        url?: string;
                                        duration?: number;
                                        cover?: string;
                                        md5?: string;
                                        vid?: string;
                                        size?: string;
                                    }>;
                                };
                                room_box_digital_signage?: {
                                    enable?: boolean;
                                    mute?: boolean;
                                    start_display?: number;
                                    stop_display?: number;
                                    materials?: Array<{
                                        id?: string;
                                        name?: string;
                                        material_type?: number;
                                        url?: string;
                                        duration?: number;
                                        cover?: string;
                                        md5?: string;
                                        vid?: string;
                                        size?: string;
                                    }>;
                                };
                                room_status?: {
                                    status: boolean;
                                    schedule_status?: boolean;
                                    disable_start_time?: string;
                                    disable_end_time?: string;
                                    disable_reason?: string;
                                    contact_ids?: Array<string>;
                                    disable_notice?: boolean;
                                    resume_notice?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/room_configs/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_config&apiName=set&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=set&project=vc&resource=room_config&version=v1 document }
             */
            set: async (
                payload?: {
                    data: {
                        scope: number;
                        country_id?: string;
                        district_id?: string;
                        building_id?: string;
                        floor_name?: string;
                        room_id?: string;
                        room_config: {
                            room_background?: string;
                            display_background?: string;
                            digital_signage?: {
                                enable?: boolean;
                                mute?: boolean;
                                start_display?: number;
                                stop_display?: number;
                                materials?: Array<{
                                    id?: string;
                                    name?: string;
                                    material_type?: number;
                                    url?: string;
                                    duration?: number;
                                    cover?: string;
                                    md5?: string;
                                    vid?: string;
                                    size?: string;
                                }>;
                            };
                            room_box_digital_signage?: {
                                enable?: boolean;
                                mute?: boolean;
                                start_display?: number;
                                stop_display?: number;
                                materials?: Array<{
                                    id?: string;
                                    name?: string;
                                    material_type?: number;
                                    url?: string;
                                    duration?: number;
                                    cover?: string;
                                    md5?: string;
                                    vid?: string;
                                    size?: string;
                                }>;
                            };
                            room_status?: {
                                status: boolean;
                                disable_start_time?: string;
                                disable_end_time?: string;
                                disable_reason?: string;
                                contact_ids?: Array<string>;
                                disable_notice?: boolean;
                                resume_notice?: boolean;
                            };
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/room_configs/set`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 会议室层级
         */
        roomLevel: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_level&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_level/create document }
             *
             * 创建会议室层级
             *
             * 该接口用于创建会议室层级
             */
            create: async (
                payload?: {
                    data: {
                        name: string;
                        parent_id: string;
                        custom_group_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                room_level?: {
                                    room_level_id?: string;
                                    name?: string;
                                    parent_id?: string;
                                    path?: Array<string>;
                                    has_child?: boolean;
                                    custom_group_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/room_levels`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_level&apiName=del&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_level/del document }
             *
             * 删除会议室层级
             *
             * 该接口可以用来删除某个会议室层级
             */
            del: async (
                payload?: {
                    data: { room_level_id: string; delete_child?: boolean };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/room_levels/del`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_level&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_level/get document }
             *
             * 查询会议室层级详情
             *
             * 该接口可以使用会议室层级ID查询会议室层级详情
             */
            get: async (
                payload?: {
                    path: { room_level_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                room_level?: {
                                    room_level_id?: string;
                                    name?: string;
                                    parent_id?: string;
                                    path?: Array<string>;
                                    has_child?: boolean;
                                    custom_group_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/room_levels/:room_level_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        room_level_id?: string;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/vc/v1/room_levels`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    room_level_id?: string;
                                                    name?: string;
                                                    parent_id?: string;
                                                    path?: Array<string>;
                                                    has_child?: boolean;
                                                    custom_group_id?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_level&apiName=list&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_level/list document }
             *
             * 查询会议室层级列表
             *
             * 该接口用来查询某个会议室层级下的子层级列表
             */
            list: async (
                payload?: {
                    params?: {
                        room_level_id?: string;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    room_level_id?: string;
                                    name?: string;
                                    parent_id?: string;
                                    path?: Array<string>;
                                    has_child?: boolean;
                                    custom_group_id?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/room_levels`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_level&apiName=mget&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_level/mget document }
             *
             * 批量查询会议室层级详情
             *
             * 该接口可以使用会议室层级ID批量查询会议室层级详情
             */
            mget: async (
                payload?: {
                    data: { level_ids: Array<string> };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    room_level_id?: string;
                                    name?: string;
                                    parent_id?: string;
                                    path?: Array<string>;
                                    has_child?: boolean;
                                    custom_group_id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/room_levels/mget`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_level&apiName=patch&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_level/patch document }
             *
             * 更新会议室层级
             *
             * 该接口可以用来更新某个会议室层级的信息
             */
            patch: async (
                payload?: {
                    data: {
                        name: string;
                        parent_id: string;
                        custom_group_id?: string;
                    };
                    path: { room_level_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/room_levels/:room_level_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_level&apiName=search&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_level/search document }
             *
             * 搜索会议室层级
             *
             * 该接口可以用来搜索会议室层级，支持使用自定义会议室层级ID进行查询
             */
            search: async (
                payload?: {
                    params: { custom_level_ids: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { level_ids?: Array<string> };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/room_levels/search`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 会议室配置
         */
        scopeConfig: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=scope_config&apiName=create&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/scope_config/create document }
             *
             * 设置会议室配置
             *
             * 该接口可以用来设置某个会议层级范围下或者某个会议室的配置
             */
            create: async (
                payload?: {
                    data: {
                        scope_type: number;
                        scope_id: string;
                        scope_config?: {
                            room_background?: string;
                            display_background?: string;
                            digital_signage?: {
                                enable?: boolean;
                                mute?: boolean;
                                start_display?: number;
                                stop_display?: number;
                                materials?: Array<{
                                    id?: string;
                                    name?: string;
                                    material_type?: number;
                                    url?: string;
                                    duration?: number;
                                    cover?: string;
                                    md5?: string;
                                    vid?: string;
                                    size?: string;
                                }>;
                            };
                            room_box_digital_signage?: {
                                enable?: boolean;
                                mute?: boolean;
                                start_display?: number;
                                stop_display?: number;
                                materials?: Array<{
                                    id?: string;
                                    name?: string;
                                    material_type?: number;
                                    url?: string;
                                    duration?: number;
                                    cover?: string;
                                    md5?: string;
                                    vid?: string;
                                    size?: string;
                                }>;
                            };
                            room_status?: {
                                status: boolean;
                                schedule_status?: boolean;
                                disable_start_time?: string;
                                disable_end_time?: string;
                                disable_reason?: string;
                                contact_ids?: Array<string>;
                                disable_notice?: boolean;
                                resume_notice?: boolean;
                            };
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/scope_config`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=scope_config&apiName=get&version=v1 click to debug }
             *
             * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/scope_config/get document }
             *
             * 查询会议室配置
             *
             * 该接口可以用来查询某个会议层级范围下或者某个会议室的配置
             */
            get: async (
                payload?: {
                    params: {
                        scope_type: number;
                        scope_id: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                current_config?: {
                                    scope_type: number;
                                    scope_id: string;
                                    scope_config?: {
                                        room_background?: string;
                                        display_background?: string;
                                        digital_signage?: {
                                            enable?: boolean;
                                            mute?: boolean;
                                            start_display?: number;
                                            stop_display?: number;
                                            materials?: Array<{
                                                id?: string;
                                                name?: string;
                                                material_type?: number;
                                                url?: string;
                                                duration?: number;
                                                cover?: string;
                                                md5?: string;
                                                vid?: string;
                                                size?: string;
                                            }>;
                                        };
                                        room_box_digital_signage?: {
                                            enable?: boolean;
                                            mute?: boolean;
                                            start_display?: number;
                                            stop_display?: number;
                                            materials?: Array<{
                                                id?: string;
                                                name?: string;
                                                material_type?: number;
                                                url?: string;
                                                duration?: number;
                                                cover?: string;
                                                md5?: string;
                                                vid?: string;
                                                size?: string;
                                            }>;
                                        };
                                        room_status?: {
                                            status: boolean;
                                            schedule_status?: boolean;
                                            disable_start_time?: string;
                                            disable_end_time?: string;
                                            disable_reason?: string;
                                            contact_ids?: Array<string>;
                                            disable_notice?: boolean;
                                            resume_notice?: boolean;
                                        };
                                    };
                                };
                                origin_configs?: Array<{
                                    scope_type: number;
                                    scope_id: string;
                                    scope_config?: {
                                        room_background?: string;
                                        display_background?: string;
                                        digital_signage?: {
                                            enable?: boolean;
                                            mute?: boolean;
                                            start_display?: number;
                                            stop_display?: number;
                                            materials?: Array<{
                                                id?: string;
                                                name?: string;
                                                material_type?: number;
                                                url?: string;
                                                duration?: number;
                                                cover?: string;
                                                md5?: string;
                                                vid?: string;
                                                size?: string;
                                            }>;
                                        };
                                        room_box_digital_signage?: {
                                            enable?: boolean;
                                            mute?: boolean;
                                            start_display?: number;
                                            stop_display?: number;
                                            materials?: Array<{
                                                id?: string;
                                                name?: string;
                                                material_type?: number;
                                                url?: string;
                                                duration?: number;
                                                cover?: string;
                                                md5?: string;
                                                vid?: string;
                                                size?: string;
                                            }>;
                                        };
                                        room_status?: {
                                            status: boolean;
                                            schedule_status?: boolean;
                                            disable_start_time?: string;
                                            disable_end_time?: string;
                                            disable_reason?: string;
                                            contact_ids?: Array<string>;
                                            disable_notice?: boolean;
                                            resume_notice?: boolean;
                                        };
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/scope_config`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
     * 云文档-知识库
     */
    wiki = {
        /**
         * 知识空间
         */
        space: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space&apiName=create&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/create document }
             *
             * 创建知识空间
             *
             * 此接口用于创建知识空间
             *
             * 此接口不支持tenant access token（应用身份访问）
             */
            create: async (
                payload?: {
                    data?: { name?: string; description?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                space?: {
                                    name?: string;
                                    description?: string;
                                    space_id?: string;
                                    space_type?: "team" | "person";
                                    visibility?: "public" | "private";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space&apiName=get&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get document }
             *
             * 获取知识空间信息
             *
             * 此接口用于根据知识空间ID来查询知识空间的信息。;;空间类型（type）：;- 个人空间：归个人管理。一人仅可拥有一个个人空间，无法添加其他管理员。;- 团队空间：归团队（多人)管理，可添加多个管理员。;;空间可见性（visibility）：;- 公开空间：租户所有用户可见，默认为成员权限。无法额外添加成员，但可以添加管理员。;- 私有空间：仅对知识空间管理员、成员可见，需要手动添加管理员、成员。
             *
             * 本接口要求知识库权限：;- 需要为知识空间成员（管理员）
             */
            get: async (
                payload?: {
                    path?: { space_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                space?: {
                                    name?: string;
                                    description?: string;
                                    space_id?: string;
                                    space_type?: "team" | "person";
                                    visibility?: "public" | "private";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space&apiName=get_node&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node document }
             *
             * 获取知识空间节点信息
             *
             * 获取知识空间节点信息
             *
             * 知识库权限要求，当前使用的 access token 所代表的应用或用户拥有：;- 节点阅读权限
             */
            getNode: async (
                payload?: {
                    params: { token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                node?: {
                                    space_id?: string;
                                    node_token?: string;
                                    obj_token?: string;
                                    obj_type:
                                        | "doc"
                                        | "sheet"
                                        | "mindnote"
                                        | "bitable"
                                        | "file"
                                        | "docx";
                                    parent_node_token?: string;
                                    node_type: "origin" | "shortcut";
                                    origin_node_token?: string;
                                    origin_space_id?: string;
                                    has_child?: boolean;
                                    title?: string;
                                    obj_create_time?: string;
                                    obj_edit_time?: string;
                                    node_create_time?: string;
                                    creator?: string;
                                    owner?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/get_node`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/wiki/v2/spaces`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    name?: string;
                                                    description?: string;
                                                    space_id?: string;
                                                    space_type?:
                                                        | "team"
                                                        | "person";
                                                    visibility?:
                                                        | "public"
                                                        | "private";
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space&apiName=list&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/list document }
             *
             * 获取知识空间列表
             *
             * 此接口用于获取有权限访问的知识空间列表。;;此接口为分页接口。由于权限过滤，可能返回列表为空，但分页标记（has_more）为true，可以继续分页请求。;;对于知识空间各项属性描述请参阅[获取知识空间信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get)
             *
             * 使用tenant access token调用时，请确认应用/机器人拥有部分知识空间的访问权限，否则返回列表容易为空。
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    name?: string;
                                    description?: string;
                                    space_id?: string;
                                    space_type?: "team" | "person";
                                    visibility?: "public" | "private";
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 空间成员
         */
        spaceMember: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.member&apiName=create&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-member/create document }
             *
             * 添加知识空间成员
             *
             * 添加知识空间成员或管理员。
             *
             * 知识空间具有[类型](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)和[可见性](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)的概念。不同的类型或可见性可以对本操作做出限制：;- 可见性限制：公开知识空间（visibility为public）对租户所有用户可见，因此不支持再添加成员，但可以添加管理员。;- 类型限制：个人知识空间 （type为person）为个人管理的知识空间，不支持添加其他管理员（包括应用/机器人）。但可以添加成员。;;;知识空间权限要求，当前使用的 access token 所代表的应用或用户拥有：;- 为知识空间管理员
             */
            create: async (
                payload?: {
                    data: {
                        member_type: string;
                        member_id: string;
                        member_role: string;
                    };
                    params?: { need_notification?: boolean };
                    path?: { space_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                member?: {
                                    member_type: string;
                                    member_id: string;
                                    member_role: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/members`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.member&apiName=delete&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-member/delete document }
             *
             * 删除知识空间成员
             *
             * 此接口用于删除知识空间成员或管理员。
             *
             * 知识空间具有[类型](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)和[可见性](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)的概念。不同的类型或可见性可以对本操作做出限制：;- 可见性限制：公开知识空间（visibility为public）对租户所有用户可见，因此不支持再删除成员，但可以删除管理员。;- 类型限制：个人知识空间 （type为person）为个人管理的知识空间，不支持删除管理员。但可以删除成员。;;;知识空间权限要求，当前使用的 access token 所代表的应用或用户拥有：;- 为知识空间管理员
             */
            delete: async (
                payload?: {
                    data: { member_type: string; member_role: string };
                    path: { space_id: string; member_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                member: {
                                    member_type: string;
                                    member_id: string;
                                    member_role: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/members/:member_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 节点
         */
        spaceNode: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=copy&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/copy document }
             *
             * 创建知识空间节点副本
             *
             * 此接口用于在知识空间创建节点副本到指定位置。
             */
            copy: async (
                payload?: {
                    data?: {
                        target_parent_token?: string;
                        target_space_id?: string;
                        title?: string;
                    };
                    path?: { space_id?: string; node_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                node: {
                                    space_id?: string;
                                    node_token?: string;
                                    obj_token?: string;
                                    obj_type:
                                        | "doc"
                                        | "sheet"
                                        | "mindnote"
                                        | "bitable"
                                        | "file"
                                        | "docx";
                                    parent_node_token?: string;
                                    node_type: "origin" | "shortcut";
                                    origin_node_token?: string;
                                    origin_space_id?: string;
                                    has_child?: boolean;
                                    title?: string;
                                    obj_create_time?: string;
                                    obj_edit_time?: string;
                                    node_create_time?: string;
                                    creator?: string;
                                    owner?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes/:node_token/copy`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=create&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/create document }
             *
             * 创建知识空间节点
             *
             * 此接口用于在知识节点里创建[节点](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)到指定位置。
             *
             * 知识空间权限要求，当前使用的 access token 所代表的应用或用户拥有：;- **父节点**容器编辑权限
             */
            create: async (
                payload?: {
                    data: {
                        obj_type:
                            | "doc"
                            | "sheet"
                            | "mindnote"
                            | "bitable"
                            | "file"
                            | "docx";
                        parent_node_token?: string;
                        node_type: "origin" | "shortcut";
                        origin_node_token?: string;
                        title?: string;
                    };
                    path?: { space_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                node?: {
                                    space_id?: string;
                                    node_token?: string;
                                    obj_token?: string;
                                    obj_type:
                                        | "doc"
                                        | "sheet"
                                        | "mindnote"
                                        | "bitable"
                                        | "file"
                                        | "docx";
                                    parent_node_token?: string;
                                    node_type: "origin" | "shortcut";
                                    origin_node_token?: string;
                                    origin_space_id?: string;
                                    has_child?: boolean;
                                    title?: string;
                                    obj_create_time?: string;
                                    obj_edit_time?: string;
                                    node_create_time?: string;
                                    creator?: string;
                                    owner?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        parent_node_token?: string;
                    };
                    path?: { space_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await this.httpInstance
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    space_id?: string;
                                                    node_token?: string;
                                                    obj_token?: string;
                                                    obj_type:
                                                        | "doc"
                                                        | "sheet"
                                                        | "mindnote"
                                                        | "bitable"
                                                        | "file"
                                                        | "docx";
                                                    parent_node_token?: string;
                                                    node_type:
                                                        | "origin"
                                                        | "shortcut";
                                                    origin_node_token?: string;
                                                    origin_space_id?: string;
                                                    has_child?: boolean;
                                                    title?: string;
                                                    obj_create_time?: string;
                                                    obj_edit_time?: string;
                                                    node_create_time?: string;
                                                    creator?: string;
                                                    owner?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=list&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/list document }
             *
             * 获取知识空间子节点列表
             *
             * 此接口用于分页获取Wiki节点的子节点列表。;;此接口为分页接口。由于权限过滤，可能返回列表为空，但分页标记（has_more）为true，可以继续分页请求。
             *
             * 知识库权限要求，当前使用的 access token 所代表的应用或用户拥有：;- 父节点阅读权限
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        parent_node_token?: string;
                    };
                    path?: { space_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    space_id?: string;
                                    node_token?: string;
                                    obj_token?: string;
                                    obj_type:
                                        | "doc"
                                        | "sheet"
                                        | "mindnote"
                                        | "bitable"
                                        | "file"
                                        | "docx";
                                    parent_node_token?: string;
                                    node_type: "origin" | "shortcut";
                                    origin_node_token?: string;
                                    origin_space_id?: string;
                                    has_child?: boolean;
                                    title?: string;
                                    obj_create_time?: string;
                                    obj_edit_time?: string;
                                    node_create_time?: string;
                                    creator?: string;
                                    owner?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=move&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/move document }
             *
             * 移动知识空间节点
             *
             * 此方法用于在Wiki内移动节点，支持跨知识空间移动。如果有子节点，会携带子节点一起移动。
             *
             * 知识库权限要求：;- 节点编辑权限;- 原父节点容器编辑权限;- 目的父节点容器编辑权限
             */
            move: async (
                payload?: {
                    data?: {
                        target_parent_token?: string;
                        target_space_id?: string;
                    };
                    path: { space_id: string; node_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                node?: {
                                    space_id?: string;
                                    node_token?: string;
                                    obj_token?: string;
                                    obj_type:
                                        | "doc"
                                        | "sheet"
                                        | "mindnote"
                                        | "bitable"
                                        | "file"
                                        | "docx";
                                    parent_node_token?: string;
                                    node_type: "origin" | "shortcut";
                                    origin_node_token?: string;
                                    origin_space_id?: string;
                                    has_child?: boolean;
                                    title?: string;
                                    obj_create_time?: string;
                                    obj_edit_time?: string;
                                    node_create_time?: string;
                                    creator?: string;
                                    owner?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes/:node_token/move`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=move_docs_to_wiki&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/move_docs_to_wiki document }
             *
             * 移动云空间文档至知识空间
             *
             * 该接口允许移动云空间文档至知识空间，并挂载在指定位置
             *
             * 此接口为异步接口。若移动已完成（或文档已在Wiki中），则直接返回结果（Wiki token）。若尚未完成，则返回task id。请使用[获取任务结果](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/task/get)接口进行查询。;;知识库权限要求，当前使用的 access token 所代表的应用或用户拥有：;- 文档可管理权限;- 原文件夹编辑权限;- 目标父节点容器编辑权限
             *
             * ### 移动操作 ###;移动后，文档将从“我的空间”或“共享空间”转移至“知识库”后，无法从下列入口查看到文档：;- 云空间主页：快速访问;- 我的空间;- 共享空间;;### 权限变更 ###;移动后，文档会向所有可查看“页面树”的用户显示，默认继承父页面的权限设置。;</md-alert
             */
            moveDocsToWiki: async (
                payload?: {
                    data: {
                        parent_wiki_token?: string;
                        obj_type:
                            | "doc"
                            | "sheet"
                            | "bitable"
                            | "mindnote"
                            | "docx"
                            | "file";
                        obj_token: string;
                        apply?: boolean;
                    };
                    path: { space_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                wiki_token?: string;
                                task_id?: string;
                                applied?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes/move_docs_to_wiki`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=update_title&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/update_title document }
             *
             * 更新知识空间节点标题
             *
             * 此接口用于更新节点标题
             *
             * 此接口目前仅支持文档(doc)、新版文档(docx)和快捷方式。
             */
            updateTitle: async (
                payload?: {
                    data: { title: string };
                    path?: { space_id?: string; node_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes/:node_token/update_title`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 空间设置
         */
        spaceSetting: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.setting&apiName=update&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-setting/update document }
             *
             * 更新知识空间设置
             *
             * 根据space_id更新知识空间公共设置
             *
             * 知识库权限要求：;- 为知识空间管理员
             */
            update: async (
                payload?: {
                    data?: {
                        create_setting?: string;
                        security_setting?: string;
                        comment_setting?: string;
                    };
                    path?: { space_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                setting?: {
                                    create_setting?: string;
                                    security_setting?: string;
                                    comment_setting?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/setting`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        /**
         * 云文档
         */
        task: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=task&apiName=get&version=v2 click to debug }
             *
             * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/task/get document }
             *
             * 获取任务结果
             *
             * 该方法用于获取wiki异步任务的结果
             *
             * 知识库权限要求，当前 access token 所代表的用户或应用（机器人）：;- 为任务创建者
             */
            get: async (
                payload?: {
                    params: { task_type: "move" };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return this.httpInstance
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                task: {
                                    task_id: string;
                                    move_result?: Array<{
                                        node: {
                                            space_id?: string;
                                            node_token?: string;
                                            obj_token?: string;
                                            obj_type:
                                                | "doc"
                                                | "sheet"
                                                | "mindnote"
                                                | "bitable"
                                                | "file"
                                                | "docx";
                                            parent_node_token?: string;
                                            node_type: "origin" | "shortcut";
                                            origin_node_token?: string;
                                            origin_space_id?: string;
                                            has_child?: boolean;
                                            title?: string;
                                            obj_create_time?: string;
                                            obj_edit_time?: string;
                                            node_create_time?: string;
                                            creator?: string;
                                            owner?: string;
                                        };
                                        status: number;
                                        status_msg: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/tasks/:task_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
    /**
         
         */
    workplace = {};
}
